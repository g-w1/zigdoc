[{"doc_comment":"GUIDs must be align(8)","pl":"pub const Guid = extern struct ","src":24,"more_decls":{"pl":"time_low: u32","src":25,"more_decls":null}{"pl":"time_mid: u16","src":26,"more_decls":null}{"pl":"time_high_and_version: u16","src":27,"more_decls":null}{"pl":"clock_seq_high_and_reserved: u8","src":28,"more_decls":null}{"pl":"clock_seq_low: u8","src":29,"more_decls":null}{"pl":"node: [6]u8","src":30,"more_decls":null}{"doc_comment":"Format GUID into hexadecimal lowercase xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx format","pl":"fn format(\n    self: @This(),\n    comptime f: []const u8,\n    options: std.fmt.FormatOptions,\n    writer: anytype,\n) !void","src":33,"more_decls":null}{"pl":"fn eql(a: std.os.uefi.Guid, b: std.os.uefi.Guid) bool","src":53,"more_decls":null}}{"doc_comment":"This structure represents time information.","pl":"pub const Time = extern struct ","src":67,"more_decls":{"doc_comment":"1900 - 9999","pl":"year: u16","src":69,"more_decls":null}{"doc_comment":"1 - 12","pl":"month: u8","src":72,"more_decls":null}{"doc_comment":"1 - 31","pl":"day: u8","src":75,"more_decls":null}{"doc_comment":"0 - 23","pl":"hour: u8","src":78,"more_decls":null}{"doc_comment":"0 - 59","pl":"minute: u8","src":81,"more_decls":null}{"doc_comment":"0 - 59","pl":"second: u8","src":84,"more_decls":null}{"pl":"_pad1: u8","src":85,"more_decls":null}{"doc_comment":"0 - 999999999","pl":"nanosecond: u32","src":88,"more_decls":null}{"doc_comment":"The time's offset in minutes from UTC.\nAllowed values are -1440 to 1440 or unspecified_timezone","pl":"timezone: i16","src":92,"more_decls":null}{"pl":"daylight: packed struct {\n        _pad1: u6,\n\n        /// If true, the time has been adjusted for daylight savings time.\n        in_daylight: bool,\n\n        /// If true, the time is affected by daylight savings time.\n        adjust_daylight: bool,\n    }","src":93,"more_decls":null}{"pl":"_pad2: u8","src":102,"more_decls":null}{"doc_comment":"Time is to be interpreted as local time","pl":"const unspecified_timezone: i16 = 0x7ff","src":105,"more_decls":null}}{"doc_comment":"Capabilities of the clock device","pl":"pub const TimeCapabilities = extern struct ","src":109,"more_decls":{"doc_comment":"Resolution in Hz","pl":"resolution: u32","src":111,"more_decls":null}{"doc_comment":"Accuracy in an error rate of 1e-6 parts per million.","pl":"accuracy: u32","src":114,"more_decls":null}{"doc_comment":"If true, a time set operation clears the device's time below the resolution level.","pl":"sets_to_zero: bool","src":117,"more_decls":null}}{"doc_comment":"A protocol is an interface identified by a GUID.","pl":"const protocols = @import(\"uefi/protocols.zig\")","src":8,"more_decls":null}{"doc_comment":"Status codes returned by EFI interfaces","pl":"const Status = @import(\"uefi/status.zig\").Status","src":11,"more_decls":null}{"pl":"const tables = @import(\"uefi/tables.zig\")","src":12,"more_decls":null}{"doc_comment":"The EFI image's handle that is passed to its entry point.","pl":"var handle: Handle = undefined","src":15,"more_decls":null}{"doc_comment":"A pointer to the EFI System Table that is passed to the EFI image's entry point.","pl":"var system_table: *tables.SystemTable = undefined","src":18,"more_decls":null}{"doc_comment":"A handle to an event structure.","pl":"const Event = *opaque {}","src":21,"more_decls":null}{"doc_comment":"An EFI Handle represents a collection of related interfaces.","pl":"const Handle = *opaque {}","src":64,"more_decls":null}{"doc_comment":"File Handle as specified in the EFI Shell Spec","pl":"const FileHandle = *opaque {}","src":121,"more_decls":null}]