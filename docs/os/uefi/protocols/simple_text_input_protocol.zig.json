[{"doc_comment":"Character input devices, e.g. Keyboard","pl":"pub const SimpleTextInputProtocol = extern struct ","src":12,"more_decls":{"pl":"_reset: fn (*const SimpleTextInputProtocol, bool) callconv(.C) Status","src":13,"more_decls":null}{"pl":"_read_key_stroke: fn (*const SimpleTextInputProtocol, *InputKey) callconv(.C) Status","src":14,"more_decls":null}{"pl":"wait_for_key: Event","src":15,"more_decls":null}{"doc_comment":"Resets the input device hardware.","pl":"pub fn reset(self: *const SimpleTextInputProtocol, verify: bool) Status {\n    return self._reset(self, verify);\n}","src":18,"more_decls":null}{"doc_comment":"Reads the next keystroke from the input device.","pl":"pub fn readKeyStroke(self: *const SimpleTextInputProtocol, input_key: *InputKey) Status {\n    return self._read_key_stroke(self, input_key);\n}","src":23,"more_decls":null}{"pl":"const guid align(8) = Guid{\n        .time_low = 0x387477c1,\n        .time_mid = 0x69c7,\n        .time_high_and_version = 0x11d2,\n        .clock_seq_high_and_reserved = 0x8e,\n        .clock_seq_low = 0x39,\n        .node = [_]u8{ 0x00, 0xa0, 0xc9, 0x69, 0x72, 0x3b },\n    }","src":27,"more_decls":null}}]