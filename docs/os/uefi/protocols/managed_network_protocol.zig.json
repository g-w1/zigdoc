[{"pl":"pub const ManagedNetworkProtocol = extern struct ","src":13,"more_decls":{"pl":"_get_mode_data: fn (*const ManagedNetworkProtocol, ?*ManagedNetworkConfigData, ?*SimpleNetworkMode) callconv(.C) Status","src":14,"more_decls":null}{"pl":"_configure: fn (*const ManagedNetworkProtocol, ?*const ManagedNetworkConfigData) callconv(.C) Status","src":15,"more_decls":null}{"pl":"_mcast_ip_to_mac: fn (*const ManagedNetworkProtocol, bool, *const c_void, *MacAddress) callconv(.C) Status","src":16,"more_decls":null}{"pl":"_groups: fn (*const ManagedNetworkProtocol, bool, ?*const MacAddress) callconv(.C) Status","src":17,"more_decls":null}{"pl":"_transmit: fn (*const ManagedNetworkProtocol, *const ManagedNetworkCompletionToken) callconv(.C) Status","src":18,"more_decls":null}{"pl":"_receive: fn (*const ManagedNetworkProtocol, *const ManagedNetworkCompletionToken) callconv(.C) Status","src":19,"more_decls":null}{"pl":"_cancel: fn (*const ManagedNetworkProtocol, ?*const ManagedNetworkCompletionToken) callconv(.C) Status","src":20,"more_decls":null}{"pl":"_poll: fn (*const ManagedNetworkProtocol) callconv(.C) usize","src":21,"more_decls":null}{"doc_comment":"Returns the operational parameters for the current MNP child driver.\nMay also support returning the underlying SNP driver mode data.","pl":"pub fn getModeData(self: *const ManagedNetworkProtocol, mnp_config_data: ?*ManagedNetworkConfigData, snp_mode_data: ?*SimpleNetworkMode) Status {\n    return self._get_mode_data(self, mnp_config_data, snp_mode_data);\n}","src":25,"more_decls":null}{"doc_comment":"Sets or clears the operational parameters for the MNP child driver.","pl":"pub fn configure(self: *const ManagedNetworkProtocol, mnp_config_data: ?*const ManagedNetworkConfigData) Status {\n    return self._configure(self, mnp_config_data);\n}","src":30,"more_decls":null}{"doc_comment":"Translates an IP multicast address to a hardware (MAC) multicast address.\nThis function may be unsupported in some MNP implementations.","pl":"pub fn mcastIpToMac(self: *const ManagedNetworkProtocol, ipv6flag: bool, ipaddress: *const c_void, mac_address: *MacAddress) Status {\n    return self._mcast_ip_to_mac(self, ipv6flag, ipaddress);\n}","src":36,"more_decls":null}{"doc_comment":"Enables and disables receive filters for multicast address.\nThis function may be unsupported in some MNP implementations.","pl":"pub fn groups(self: *const ManagedNetworkProtocol, join_flag: bool, mac_address: ?*const MacAddress) Status {\n    return self._groups(self, join_flag, mac_address);\n}","src":42,"more_decls":null}{"doc_comment":"Places asynchronous outgoing data packets into the transmit queue.","pl":"pub fn transmit(self: *const ManagedNetworkProtocol, token: *const ManagedNetworkCompletionToken) Status {\n    return self._transmit(self, token);\n}","src":47,"more_decls":null}{"doc_comment":"Places an asynchronous receiving request into the receiving queue.","pl":"pub fn receive(self: *const ManagedNetworkProtocol, token: *const ManagedNetworkCompletionToken) Status {\n    return self._receive(self, token);\n}","src":52,"more_decls":null}{"doc_comment":"Aborts an asynchronous transmit or receive request.","pl":"pub fn cancel(self: *const ManagedNetworkProtocol, token: ?*const ManagedNetworkCompletionToken) Status {\n    return self._cancel(self, token);\n}","src":57,"more_decls":null}{"doc_comment":"Polls for incoming data packets and processes outgoing data packets.","pl":"pub fn poll(self: *const ManagedNetworkProtocol) Status {\n    return self._poll(self);\n}","src":62,"more_decls":null}{"pl":"const guid align(8) = Guid{\n        .time_low = 0x7ab33a91,\n        .time_mid = 0xace5,\n        .time_high_and_version = 0x4326,\n        .clock_seq_high_and_reserved = 0xb5,\n        .clock_seq_low = 0x72,\n        .node = [_]u8{ 0xe7, 0xee, 0x33, 0xd3, 0x9f, 0x16 },\n    }","src":66,"more_decls":null}}{"pl":"pub const ManagedNetworkConfigData = extern struct ","src":76,"more_decls":{"pl":"received_queue_timeout_value: u32","src":77,"more_decls":null}{"pl":"transmit_queue_timeout_value: u32","src":78,"more_decls":null}{"pl":"protocol_type_filter: u16","src":79,"more_decls":null}{"pl":"enable_unicast_receive: bool","src":80,"more_decls":null}{"pl":"enable_multicast_receive: bool","src":81,"more_decls":null}{"pl":"enable_broadcast_receive: bool","src":82,"more_decls":null}{"pl":"enable_promiscuous_receive: bool","src":83,"more_decls":null}{"pl":"flush_queues_on_reset: bool","src":84,"more_decls":null}{"pl":"enable_receive_timestamps: bool","src":85,"more_decls":null}{"pl":"disable_background_polling: bool","src":86,"more_decls":null}}{"pl":"pub const ManagedNetworkCompletionToken = extern struct ","src":89,"more_decls":{"pl":"event: Event","src":90,"more_decls":null}{"pl":"status: Status","src":91,"more_decls":null}{"pl":"packet: extern union {\n        RxData: *ManagedNetworkReceiveData,\n        TxData: *ManagedNetworkTransmitData,\n    }","src":92,"more_decls":null}}{"pl":"pub const ManagedNetworkReceiveData = extern struct ","src":98,"more_decls":{"pl":"timestamp: Time","src":99,"more_decls":null}{"pl":"recycle_event: Event","src":100,"more_decls":null}{"pl":"packet_length: u32","src":101,"more_decls":null}{"pl":"header_length: u32","src":102,"more_decls":null}{"pl":"address_length: u32","src":103,"more_decls":null}{"pl":"data_length: u32","src":104,"more_decls":null}{"pl":"broadcast_flag: bool","src":105,"more_decls":null}{"pl":"multicast_flag: bool","src":106,"more_decls":null}{"pl":"promiscuous_flag: bool","src":107,"more_decls":null}{"pl":"protocol_type: u16","src":108,"more_decls":null}{"pl":"destination_address: [*]u8","src":109,"more_decls":null}{"pl":"source_address: [*]u8","src":110,"more_decls":null}{"pl":"media_header: [*]u8","src":111,"more_decls":null}{"pl":"packet_data: [*]u8","src":112,"more_decls":null}}{"pl":"pub const ManagedNetworkTransmitData = extern struct ","src":115,"more_decls":{"pl":"destination_address: ?*MacAddress","src":116,"more_decls":null}{"pl":"source_address: ?*MacAddress","src":117,"more_decls":null}{"pl":"protocol_type: u16","src":118,"more_decls":null}{"pl":"data_length: u32","src":119,"more_decls":null}{"pl":"header_length: u16","src":120,"more_decls":null}{"pl":"fragment_count: u16","src":121,"more_decls":null}{"pl":"pub fn getFragments(self: *ManagedNetworkTransmitData) []ManagedNetworkFragmentData {\n    return @ptrCast([*]ManagedNetworkFragmentData, @ptrCast([*]u8, self) + @sizeOf(ManagedNetworkTransmitData))[0..self.fragment_count];\n}","src":123,"more_decls":null}}{"pl":"pub const ManagedNetworkFragmentData = extern struct ","src":128,"more_decls":{"pl":"fragment_length: u32","src":129,"more_decls":null}{"pl":"fragment_buffer: [*]u8","src":130,"more_decls":null}}]