[{"doc_comment":"Protocol for mice","pl":"pub const SimplePointerProtocol = struct ","src":11,"more_decls":{"pl":"_reset: fn (*const SimplePointerProtocol, bool) callconv(.C) Status","src":12,"more_decls":null}{"pl":"_get_state: fn (*const SimplePointerProtocol, *SimplePointerState) callconv(.C) Status","src":13,"more_decls":null}{"pl":"wait_for_input: Event","src":14,"more_decls":null}{"pl":"mode: *SimplePointerMode","src":15,"more_decls":null}{"doc_comment":"Resets the pointer device hardware.","pl":"pub fn reset(self: *const SimplePointerProtocol, verify: bool) Status {\n    return self._reset(self, verify);\n}","src":18,"more_decls":null}{"doc_comment":"Retrieves the current state of a pointer device.","pl":"pub fn getState(self: *const SimplePointerProtocol, state: *SimplePointerState) Status {\n    return self._get_state(self, state);\n}","src":23,"more_decls":null}{"pl":"const guid align(8) = Guid{\n        .time_low = 0x31878c87,\n        .time_mid = 0x0b75,\n        .time_high_and_version = 0x11d5,\n        .clock_seq_high_and_reserved = 0x9a,\n        .clock_seq_low = 0x4f,\n        .node = [_]u8{ 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d },\n    }","src":27,"more_decls":null}}{"pl":"pub const SimplePointerMode = struct ","src":37,"more_decls":{"pl":"resolution_x: u64","src":38,"more_decls":null}{"pl":"resolution_y: u64","src":39,"more_decls":null}{"pl":"resolution_z: u64","src":40,"more_decls":null}{"pl":"left_button: bool","src":41,"more_decls":null}{"pl":"right_button: bool","src":42,"more_decls":null}}{"pl":"pub const SimplePointerState = struct ","src":45,"more_decls":{"pl":"relative_movement_x: i32 = undefined","src":46,"more_decls":null}{"pl":"relative_movement_y: i32 = undefined","src":47,"more_decls":null}{"pl":"relative_movement_z: i32 = undefined","src":48,"more_decls":null}{"pl":"left_button: bool = undefined","src":49,"more_decls":null}{"pl":"right_button: bool = undefined","src":50,"more_decls":null}}]