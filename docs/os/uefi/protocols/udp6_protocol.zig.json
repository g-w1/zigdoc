[{"pl":"pub const Udp6Protocol = extern struct ","src":15,"more_decls":{"pl":"_get_mode_data: fn (*const Udp6Protocol, ?*Udp6ConfigData, ?*Ip6ModeData, ?*ManagedNetworkConfigData, ?*SimpleNetworkMode) callconv(.C) Status","src":16,"more_decls":null}{"pl":"_configure: fn (*const Udp6Protocol, ?*const Udp6ConfigData) callconv(.C) Status","src":17,"more_decls":null}{"pl":"_groups: fn (*const Udp6Protocol, bool, ?*const Ip6Address) callconv(.C) Status","src":18,"more_decls":null}{"pl":"_transmit: fn (*const Udp6Protocol, *Udp6CompletionToken) callconv(.C) Status","src":19,"more_decls":null}{"pl":"_receive: fn (*const Udp6Protocol, *Udp6CompletionToken) callconv(.C) Status","src":20,"more_decls":null}{"pl":"_cancel: fn (*const Udp6Protocol, ?*Udp6CompletionToken) callconv(.C) Status","src":21,"more_decls":null}{"pl":"_poll: fn (*const Udp6Protocol) callconv(.C) Status","src":22,"more_decls":null}{"pl":"pub fn getModeData(self: *const Udp6Protocol, udp6_config_data: ?*Udp6ConfigData, ip6_mode_data: ?*Ip6ModeData, mnp_config_data: ?*ManagedNetworkConfigData, snp_mode_data: ?*SimpleNetworkMode) Status {\n    return self._get_mode_data(self, udp6_config_data, ip6_mode_data, mnp_config_data, snp_mode_data);\n}","src":24,"more_decls":null}{"pl":"pub fn configure(self: *const Udp6Protocol, udp6_config_data: ?*const Udp6ConfigData) Status {\n    return self._configure(self, udp6_config_data);\n}","src":28,"more_decls":null}{"pl":"pub fn groups(self: *const Udp6Protocol, join_flag: bool, multicast_address: ?*const Ip6Address) Status {\n    return self._groups(self, join_flag, multicast_address);\n}","src":32,"more_decls":null}{"pl":"pub fn transmit(self: *const Udp6Protocol, token: *Udp6CompletionToken) Status {\n    return self._transmit(self, token);\n}","src":36,"more_decls":null}{"pl":"pub fn receive(self: *const Udp6Protocol, token: *Udp6CompletionToken) Status {\n    return self._receive(self, token);\n}","src":40,"more_decls":null}{"pl":"pub fn cancel(self: *const Udp6Protocol, token: ?*Udp6CompletionToken) Status {\n    return self._cancel(self, token);\n}","src":44,"more_decls":null}{"pl":"pub fn poll(self: *const Udp6Protocol) Status {\n    return self._poll(self);\n}","src":48,"more_decls":null}{"pl":"const guid align(8) = uefi.Guid{\n        .time_low = 0x4f948815,\n        .time_mid = 0xb4b9,\n        .time_high_and_version = 0x43cb,\n        .clock_seq_high_and_reserved = 0x8a,\n        .clock_seq_low = 0x33,\n        .node = [_]u8{ 0x90, 0xe0, 0x60, 0xb3, 0x49, 0x55 },\n    }","src":52,"more_decls":null}}{"pl":"pub const Udp6ConfigData = extern struct ","src":62,"more_decls":{"pl":"accept_promiscuous: bool","src":63,"more_decls":null}{"pl":"accept_any_port: bool","src":64,"more_decls":null}{"pl":"allow_duplicate_port: bool","src":65,"more_decls":null}{"pl":"traffic_class: u8","src":66,"more_decls":null}{"pl":"hop_limit: u8","src":67,"more_decls":null}{"pl":"receive_timeout: u32","src":68,"more_decls":null}{"pl":"transmit_timeout: u32","src":69,"more_decls":null}{"pl":"station_address: Ip6Address","src":70,"more_decls":null}{"pl":"station_port: u16","src":71,"more_decls":null}{"pl":"remote_address: Ip6Address","src":72,"more_decls":null}{"pl":"remote_port: u16","src":73,"more_decls":null}}{"pl":"pub const Udp6CompletionToken = extern struct ","src":76,"more_decls":{"pl":"event: Event","src":77,"more_decls":null}{"pl":"Status: usize","src":78,"more_decls":null}{"pl":"packet: extern union {\n        RxData: *Udp6ReceiveData,\n        TxData: *Udp6TransmitData,\n    }","src":79,"more_decls":null}}{"pl":"pub const Udp6ReceiveData = extern struct ","src":85,"more_decls":{"pl":"timestamp: Time","src":86,"more_decls":null}{"pl":"recycle_signal: Event","src":87,"more_decls":null}{"pl":"udp6_session: Udp6SessionData","src":88,"more_decls":null}{"pl":"data_length: u32","src":89,"more_decls":null}{"pl":"fragment_count: u32","src":90,"more_decls":null}{"pl":"pub fn getFragments(self: *Udp6ReceiveData) []Udp6FragmentData {\n    return @ptrCast([*]Udp6FragmentData, @ptrCast([*]u8, self) + @sizeOf(Udp6ReceiveData))[0..self.fragment_count];\n}","src":92,"more_decls":null}}{"pl":"pub const Udp6TransmitData = extern struct ","src":97,"more_decls":{"pl":"udp6_session_data: ?*Udp6SessionData","src":98,"more_decls":null}{"pl":"data_length: u32","src":99,"more_decls":null}{"pl":"fragment_count: u32","src":100,"more_decls":null}{"pl":"pub fn getFragments(self: *Udp6TransmitData) []Udp6FragmentData {\n    return @ptrCast([*]Udp6FragmentData, @ptrCast([*]u8, self) + @sizeOf(Udp6TransmitData))[0..self.fragment_count];\n}","src":102,"more_decls":null}}{"pl":"pub const Udp6SessionData = extern struct ","src":107,"more_decls":{"pl":"source_address: Ip6Address","src":108,"more_decls":null}{"pl":"source_port: u16","src":109,"more_decls":null}{"pl":"destination_address: Ip6Address","src":110,"more_decls":null}{"pl":"destination_port: u16","src":111,"more_decls":null}}{"pl":"pub const Udp6FragmentData = extern struct ","src":114,"more_decls":{"pl":"fragment_length: u32","src":115,"more_decls":null}{"pl":"fragment_buffer: [*]u8","src":116,"more_decls":null}}]