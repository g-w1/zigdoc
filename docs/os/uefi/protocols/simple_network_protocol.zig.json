[{"pl":"pub const SimpleNetworkProtocol = extern struct ","src":10,"more_decls":{"pl":"revision: u64","src":11,"more_decls":null}{"pl":"_start: fn (*const SimpleNetworkProtocol) callconv(.C) Status","src":12,"more_decls":null}{"pl":"_stop: fn (*const SimpleNetworkProtocol) callconv(.C) Status","src":13,"more_decls":null}{"pl":"_initialize: fn (*const SimpleNetworkProtocol, usize, usize) callconv(.C) Status","src":14,"more_decls":null}{"pl":"_reset: fn (*const SimpleNetworkProtocol, bool) callconv(.C) Status","src":15,"more_decls":null}{"pl":"_shutdown: fn (*const SimpleNetworkProtocol) callconv(.C) Status","src":16,"more_decls":null}{"pl":"_receive_filters: fn (*const SimpleNetworkProtocol, SimpleNetworkReceiveFilter, SimpleNetworkReceiveFilter, bool, usize, ?[*]const MacAddress) callconv(.C) Status","src":17,"more_decls":null}{"pl":"_station_address: fn (*const SimpleNetworkProtocol, bool, ?*const MacAddress) callconv(.C) Status","src":18,"more_decls":null}{"pl":"_statistics: fn (*const SimpleNetworkProtocol, bool, ?*usize, ?*NetworkStatistics) callconv(.C) Status","src":19,"more_decls":null}{"pl":"_mcast_ip_to_mac: fn (*const SimpleNetworkProtocol, bool, *const c_void, *MacAddress) callconv(.C) Status","src":20,"more_decls":null}{"pl":"_nvdata: fn (*const SimpleNetworkProtocol, bool, usize, usize, [*]u8) callconv(.C) Status","src":21,"more_decls":null}{"pl":"_get_status: fn (*const SimpleNetworkProtocol, *SimpleNetworkInterruptStatus, ?*?[*]u8) callconv(.C) Status","src":22,"more_decls":null}{"pl":"_transmit: fn (*const SimpleNetworkProtocol, usize, usize, [*]const u8, ?*const MacAddress, ?*const MacAddress, ?*const u16) callconv(.C) Status","src":23,"more_decls":null}{"pl":"_receive: fn (*const SimpleNetworkProtocol, ?*usize, *usize, [*]u8, ?*MacAddress, ?*MacAddress, ?*u16) callconv(.C) Status","src":24,"more_decls":null}{"pl":"wait_for_packet: Event","src":25,"more_decls":null}{"pl":"mode: *SimpleNetworkMode","src":26,"more_decls":null}{"doc_comment":"Changes the state of a network interface from \"stopped\" to \"started\".","pl":"pub fn start(self: *const SimpleNetworkProtocol) Status {\n    return self._start(self);\n}","src":29,"more_decls":null}{"doc_comment":"Changes the state of a network interface from \"started\" to \"stopped\".","pl":"pub fn stop(self: *const SimpleNetworkProtocol) Status {\n    return self._stop(self);\n}","src":34,"more_decls":null}{"doc_comment":"Resets a network adapter and allocates the transmit and receive buffers required by the network interface.","pl":"pub fn initialize(self: *const SimpleNetworkProtocol, extra_rx_buffer_size: usize, extra_tx_buffer_size: usize) Status {\n    return self._initialize(self, extra_rx_buffer_size, extra_tx_buffer_size);\n}","src":39,"more_decls":null}{"doc_comment":"Resets a network adapter and reinitializes it with the parameters that were provided in the previous call to initialize().","pl":"pub fn reset(self: *const SimpleNetworkProtocol, extended_verification: bool) Status {\n    return self._reset(self, extended_verification);\n}","src":44,"more_decls":null}{"doc_comment":"Resets a network adapter and leaves it in a state that is safe for another driver to initialize.","pl":"pub fn shutdown(self: *const SimpleNetworkProtocol) Status {\n    return self._shutdown(self);\n}","src":49,"more_decls":null}{"doc_comment":"Manages the multicast receive filters of a network interface.","pl":"pub fn receiveFilters(self: *const SimpleNetworkProtocol, enable: SimpleNetworkReceiveFilter, disable: SimpleNetworkReceiveFilter, reset_mcast_filter: bool, mcast_filter_cnt: usize, mcast_filter: ?[*]const MacAddress) Status {\n    return self._receive_filters(self, enable, disable, reset_mcast_filter, mcast_filter_cnt, mcast_filter);\n}","src":54,"more_decls":null}{"doc_comment":"Modifies or resets the current station address, if supported.","pl":"pub fn stationAddress(self: *const SimpleNetworkProtocol, reset: bool, new: ?*const MacAddress) Status {\n    return self._station_address(self, reset, new);\n}","src":59,"more_decls":null}{"doc_comment":"Resets or collects the statistics on a network interface.","pl":"pub fn statistics(self: *const SimpleNetworkProtocol, reset_: bool, statistics_size: ?*usize, statistics_table: ?*NetworkStatistics) Status {\n    return self._statistics(self, reset_, statistics_size, statistics_table);\n}","src":64,"more_decls":null}{"doc_comment":"Converts a multicast IP address to a multicast HW MAC address.","pl":"pub fn mcastIpToMac(self: *const SimpleNetworkProtocol, ipv6: bool, ip: *const c_void, mac: *MacAddress) Status {\n    return self._mcast_ip_to_mac(self, ipv6, ip, mac);\n}","src":69,"more_decls":null}{"doc_comment":"Performs read and write operations on the NVRAM device attached to a network interface.","pl":"pub fn nvdata(self: *const SimpleNetworkProtocol, read_write: bool, offset: usize, buffer_size: usize, buffer: [*]u8) Status {\n    return self._nvdata(self, read_write, offset, buffer_size, buffer);\n}","src":74,"more_decls":null}{"doc_comment":"Reads the current interrupt status and recycled transmit buffer status from a network interface.","pl":"pub fn getStatus(self: *const SimpleNetworkProtocol, interrupt_status: *SimpleNetworkInterruptStatus, tx_buf: ?*?[*]u8) Status {\n    return self._get_status(self, interrupt_status, tx_buf);\n}","src":79,"more_decls":null}{"doc_comment":"Places a packet in the transmit queue of a network interface.","pl":"pub fn transmit(self: *const SimpleNetworkProtocol, header_size: usize, buffer_size: usize, buffer: [*]const u8, src_addr: ?*const MacAddress, dest_addr: ?*const MacAddress, protocol: ?*const u16) Status {\n    return self._transmit(self, header_size, buffer_size, buffer, src_addr, dest_addr, protocol);\n}","src":84,"more_decls":null}{"doc_comment":"Receives a packet from a network interface.","pl":"pub fn receive(self: *const SimpleNetworkProtocol, header_size: ?*usize, buffer_size: *usize, buffer: [*]u8, src_addr: ?*MacAddress, dest_addr: ?*MacAddress, protocol: ?*u16) Status {\n    return self._receive(self, header_size, buffer_size, buffer, src_addr, dest_addr, protocol);\n}","src":89,"more_decls":null}{"pl":"const guid align(8) = Guid{\n        .time_low = 0xa19832b9,\n        .time_mid = 0xac25,\n        .time_high_and_version = 0x11d3,\n        .clock_seq_high_and_reserved = 0x9a,\n        .clock_seq_low = 0x2d,\n        .node = [_]u8{ 0x00, 0x90, 0x27, 0x3f, 0xc1, 0x4d },\n    }","src":93,"more_decls":null}}{"pl":"pub const SimpleNetworkMode = extern struct ","src":105,"more_decls":{"pl":"state: SimpleNetworkState","src":106,"more_decls":null}{"pl":"hw_address_size: u32","src":107,"more_decls":null}{"pl":"media_header_size: u32","src":108,"more_decls":null}{"pl":"max_packet_size: u32","src":109,"more_decls":null}{"pl":"nvram_size: u32","src":110,"more_decls":null}{"pl":"nvram_access_size: u32","src":111,"more_decls":null}{"pl":"receive_filter_mask: SimpleNetworkReceiveFilter","src":112,"more_decls":null}{"pl":"receive_filter_setting: SimpleNetworkReceiveFilter","src":113,"more_decls":null}{"pl":"max_mcast_filter_count: u32","src":114,"more_decls":null}{"pl":"mcast_filter_count: u32","src":115,"more_decls":null}{"pl":"mcast_filter: [16]MacAddress","src":116,"more_decls":null}{"pl":"current_address: MacAddress","src":117,"more_decls":null}{"pl":"broadcast_address: MacAddress","src":118,"more_decls":null}{"pl":"permanent_address: MacAddress","src":119,"more_decls":null}{"pl":"if_type: u8","src":120,"more_decls":null}{"pl":"mac_address_changeable: bool","src":121,"more_decls":null}{"pl":"multiple_tx_supported: bool","src":122,"more_decls":null}{"pl":"media_present_supported: bool","src":123,"more_decls":null}{"pl":"media_present: bool","src":124,"more_decls":null}}{"pl":"pub const SimpleNetworkReceiveFilter = packed struct ","src":127,"more_decls":{"pl":"receive_unicast: bool","src":128,"more_decls":null}{"pl":"receive_multicast: bool","src":129,"more_decls":null}{"pl":"receive_broadcast: bool","src":130,"more_decls":null}{"pl":"receive_promiscuous: bool","src":131,"more_decls":null}{"pl":"receive_promiscuous_multicast: bool","src":132,"more_decls":null}{"pl":"_pad: u27 = undefined","src":133,"more_decls":null}}{"pl":"pub const SimpleNetworkState = extern enum","src":136,"more_decls":{"pl":"Stopped","src":137,"more_decls":null}{"pl":"Started","src":138,"more_decls":null}{"pl":"Initialized","src":139,"more_decls":null}}{"pl":"pub const NetworkStatistics = extern struct ","src":142,"more_decls":{"pl":"rx_total_frames: u64","src":143,"more_decls":null}{"pl":"rx_good_frames: u64","src":144,"more_decls":null}{"pl":"rx_undersize_frames: u64","src":145,"more_decls":null}{"pl":"rx_oversize_frames: u64","src":146,"more_decls":null}{"pl":"rx_dropped_frames: u64","src":147,"more_decls":null}{"pl":"rx_unicast_frames: u64","src":148,"more_decls":null}{"pl":"rx_broadcast_frames: u64","src":149,"more_decls":null}{"pl":"rx_multicast_frames: u64","src":150,"more_decls":null}{"pl":"rx_crc_error_frames: u64","src":151,"more_decls":null}{"pl":"rx_total_bytes: u64","src":152,"more_decls":null}{"pl":"tx_total_frames: u64","src":153,"more_decls":null}{"pl":"tx_good_frames: u64","src":154,"more_decls":null}{"pl":"tx_undersize_frames: u64","src":155,"more_decls":null}{"pl":"tx_oversize_frames: u64","src":156,"more_decls":null}{"pl":"tx_dropped_frames: u64","src":157,"more_decls":null}{"pl":"tx_unicast_frames: u64","src":158,"more_decls":null}{"pl":"tx_broadcast_frames: u64","src":159,"more_decls":null}{"pl":"tx_multicast_frames: u64","src":160,"more_decls":null}{"pl":"tx_crc_error_frames: u64","src":161,"more_decls":null}{"pl":"tx_total_bytes: u64","src":162,"more_decls":null}{"pl":"collisions: u64","src":163,"more_decls":null}{"pl":"unsupported_protocol: u64","src":164,"more_decls":null}{"pl":"rx_duplicated_frames: u64","src":165,"more_decls":null}{"pl":"rx_decryptError_frames: u64","src":166,"more_decls":null}{"pl":"tx_error_frames: u64","src":167,"more_decls":null}{"pl":"tx_retry_frames: u64","src":168,"more_decls":null}}{"pl":"pub const SimpleNetworkInterruptStatus = packed struct ","src":171,"more_decls":{"pl":"receive_interrupt: bool","src":172,"more_decls":null}{"pl":"transmit_interrupt: bool","src":173,"more_decls":null}{"pl":"command_interrupt: bool","src":174,"more_decls":null}{"pl":"software_interrupt: bool","src":175,"more_decls":null}{"pl":"_pad: u28","src":176,"more_decls":null}}{"pl":"const MacAddress = [32]u8","src":103,"more_decls":null}]