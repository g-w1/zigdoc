[{"doc_comment":"Random Number Generator protocol","pl":"pub const RNGProtocol = extern struct ","src":10,"more_decls":{"pl":"_get_info: fn (*const RNGProtocol, *usize, [*]align(8) Guid) callconv(.C) Status","src":11,"more_decls":null}{"pl":"_get_rng: fn (*const RNGProtocol, ?*align(8) const Guid, usize, [*]u8) callconv(.C) Status","src":12,"more_decls":null}{"doc_comment":"Returns information about the random number generation implementation.","pl":"pub fn getInfo(self: *const RNGProtocol, list_size: *usize, list: [*]align(8) Guid) Status {\n    return self._get_info(self, list_size, list);\n}","src":15,"more_decls":null}{"doc_comment":"Produces and returns an RNG value using either the default or specified RNG algorithm.","pl":"pub fn getRNG(self: *const RNGProtocol, algo: ?*align(8) const Guid, value_length: usize, value: [*]u8) Status {\n    return self._get_rng(self, algo, value_length, value);\n}","src":20,"more_decls":null}{"pl":"const guid align(8) = Guid{\n        .time_low = 0x3152bca5,\n        .time_mid = 0xeade,\n        .time_high_and_version = 0x433d,\n        .clock_seq_high_and_reserved = 0x86,\n        .clock_seq_low = 0x2e,\n        .node = [_]u8{ 0xc0, 0x1c, 0xdc, 0x29, 0x1f, 0x44 },\n    }","src":24,"more_decls":null}{"pl":"const algorithm_sp800_90_hash_256 align(8) = Guid{\n        .time_low = 0xa7af67cb,\n        .time_mid = 0x603b,\n        .time_high_and_version = 0x4d42,\n        .clock_seq_high_and_reserved = 0xba,\n        .clock_seq_low = 0x21,\n        .node = [_]u8{ 0x70, 0xbf, 0xb6, 0x29, 0x3f, 0x96 },\n    }","src":32,"more_decls":null}{"pl":"const algorithm_sp800_90_hmac_256 align(8) = Guid{\n        .time_low = 0xc5149b43,\n        .time_mid = 0xae85,\n        .time_high_and_version = 0x4f53,\n        .clock_seq_high_and_reserved = 0x99,\n        .clock_seq_low = 0x82,\n        .node = [_]u8{ 0xb9, 0x43, 0x35, 0xd3, 0xa9, 0xe7 },\n    }","src":40,"more_decls":null}{"pl":"const algorithm_sp800_90_ctr_256 align(8) = Guid{\n        .time_low = 0x44f0de6e,\n        .time_mid = 0x4d8c,\n        .time_high_and_version = 0x4045,\n        .clock_seq_high_and_reserved = 0xa8,\n        .clock_seq_low = 0xc7,\n        .node = [_]u8{ 0x4d, 0xd1, 0x68, 0x85, 0x6b, 0x9e },\n    }","src":48,"more_decls":null}{"pl":"const algorithm_x9_31_3des align(8) = Guid{\n        .time_low = 0x63c4785a,\n        .time_mid = 0xca34,\n        .time_high_and_version = 0x4012,\n        .clock_seq_high_and_reserved = 0xa3,\n        .clock_seq_low = 0xc8,\n        .node = [_]u8{ 0x0b, 0x6a, 0x32, 0x4f, 0x55, 0x46 },\n    }","src":56,"more_decls":null}{"pl":"const algorithm_x9_31_aes align(8) = Guid{\n        .time_low = 0xacd03321,\n        .time_mid = 0x777e,\n        .time_high_and_version = 0x4d3d,\n        .clock_seq_high_and_reserved = 0xb1,\n        .clock_seq_low = 0xc8,\n        .node = [_]u8{ 0x20, 0xcf, 0xd8, 0x88, 0x20, 0xc9 },\n    }","src":64,"more_decls":null}{"pl":"const algorithm_raw align(8) = Guid{\n        .time_low = 0xe43176d7,\n        .time_mid = 0xb6e8,\n        .time_high_and_version = 0x4827,\n        .clock_seq_high_and_reserved = 0xb7,\n        .clock_seq_low = 0x84,\n        .node = [_]u8{ 0x7f, 0xfd, 0xc4, 0xb6, 0x85, 0x61 },\n    }","src":72,"more_decls":null}}]