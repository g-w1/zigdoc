[{"doc_comment":"Character input devices, e.g. Keyboard","pl":"pub const SimpleTextInputExProtocol = extern struct ","src":11,"more_decls":{"pl":"_reset: fn (*const SimpleTextInputExProtocol, bool) callconv(.C) Status","src":12,"more_decls":null}{"pl":"_read_key_stroke_ex: fn (*const SimpleTextInputExProtocol, *KeyData) callconv(.C) Status","src":13,"more_decls":null}{"pl":"wait_for_key_ex: Event","src":14,"more_decls":null}{"pl":"_set_state: fn (*const SimpleTextInputExProtocol, *const u8) callconv(.C) Status","src":15,"more_decls":null}{"pl":"_register_key_notify: fn (*const SimpleTextInputExProtocol, *const KeyData, fn (*const KeyData) callconv(.C) usize, **c_void) callconv(.C) Status","src":16,"more_decls":null}{"pl":"_unregister_key_notify: fn (*const SimpleTextInputExProtocol, *const c_void) callconv(.C) Status","src":17,"more_decls":null}{"doc_comment":"Resets the input device hardware.","pl":"pub fn reset(self: *const SimpleTextInputExProtocol, verify: bool) Status {\n    return self._reset(self, verify);\n}","src":20,"more_decls":null}{"doc_comment":"Reads the next keystroke from the input device.","pl":"pub fn readKeyStrokeEx(self: *const SimpleTextInputExProtocol, key_data: *KeyData) Status {\n    return self._read_key_stroke_ex(self, key_data);\n}","src":25,"more_decls":null}{"doc_comment":"Set certain state for the input device.","pl":"pub fn setState(self: *const SimpleTextInputExProtocol, state: *const u8) Status {\n    return self._set_state(self, state);\n}","src":30,"more_decls":null}{"doc_comment":"Register a notification function for a particular keystroke for the input device.","pl":"pub fn registerKeyNotify(self: *const SimpleTextInputExProtocol, key_data: *const KeyData, notify: fn (*const KeyData) callconv(.C) usize, handle: **c_void) Status {\n    return self._register_key_notify(self, key_data, notify, handle);\n}","src":35,"more_decls":null}{"doc_comment":"Remove the notification that was previously registered.","pl":"pub fn unregisterKeyNotify(self: *const SimpleTextInputExProtocol, handle: *const c_void) Status {\n    return self._unregister_key_notify(self, handle);\n}","src":40,"more_decls":null}{"pl":"const guid align(8) = Guid{\n        .time_low = 0xdd9e7534,\n        .time_mid = 0x7762,\n        .time_high_and_version = 0x4698,\n        .clock_seq_high_and_reserved = 0x8c,\n        .clock_seq_low = 0x14,\n        .node = [_]u8{ 0xf5, 0x85, 0x17, 0xa6, 0x25, 0xaa },\n    }","src":44,"more_decls":null}}{"pl":"pub const KeyData = extern struct ","src":54,"more_decls":{"pl":"key: InputKey = undefined","src":55,"more_decls":null}{"pl":"key_state: KeyState = undefined","src":56,"more_decls":null}}{"pl":"pub const KeyState = extern struct ","src":59,"more_decls":{"pl":"key_shift_state: packed struct {\n        right_shift_pressed: bool,\n        left_shift_pressed: bool,\n        right_control_pressed: bool,\n        left_control_pressed: bool,\n        right_alt_pressed: bool,\n        left_alt_pressed: bool,\n        right_logo_pressed: bool,\n        left_logo_pressed: bool,\n        menu_key_pressed: bool,\n        sys_req_pressed: bool,\n        _pad1: u21,\n        shift_state_valid: bool,\n    }","src":60,"more_decls":null}{"pl":"key_toggle_state: packed struct {\n        scroll_lock_active: bool,\n        num_lock_active: bool,\n        caps_lock_active: bool,\n        _pad1: u3,\n        key_state_exposed: bool,\n        toggle_state_valid: bool,\n    }","src":74,"more_decls":null}}{"pl":"pub const InputKey = extern struct ","src":84,"more_decls":{"pl":"scan_code: u16","src":85,"more_decls":null}{"pl":"unicode_char: u16","src":86,"more_decls":null}}]