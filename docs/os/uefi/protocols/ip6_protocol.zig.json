[{"pl":"pub const Ip6Protocol = extern struct ","src":13,"more_decls":{"pl":"_get_mode_data: fn (*const Ip6Protocol, ?*Ip6ModeData, ?*ManagedNetworkConfigData, ?*SimpleNetworkMode) callconv(.C) Status","src":14,"more_decls":null}{"pl":"_configure: fn (*const Ip6Protocol, ?*const Ip6ConfigData) callconv(.C) Status","src":15,"more_decls":null}{"pl":"_groups: fn (*const Ip6Protocol, bool, ?*const Ip6Address) callconv(.C) Status","src":16,"more_decls":null}{"pl":"_routes: fn (*const Ip6Protocol, bool, ?*const Ip6Address, u8, ?*const Ip6Address) callconv(.C) Status","src":17,"more_decls":null}{"pl":"_neighbors: fn (*const Ip6Protocol, bool, *const Ip6Address, ?*const MacAddress, u32, bool) callconv(.C) Status","src":18,"more_decls":null}{"pl":"_transmit: fn (*const Ip6Protocol, *Ip6CompletionToken) callconv(.C) Status","src":19,"more_decls":null}{"pl":"_receive: fn (*const Ip6Protocol, *Ip6CompletionToken) callconv(.C) Status","src":20,"more_decls":null}{"pl":"_cancel: fn (*const Ip6Protocol, ?*Ip6CompletionToken) callconv(.C) Status","src":21,"more_decls":null}{"pl":"_poll: fn (*const Ip6Protocol) callconv(.C) Status","src":22,"more_decls":null}{"doc_comment":"Gets the current operational settings for this instance of the EFI IPv6 Protocol driver.","pl":"pub fn getModeData(self: *const Ip6Protocol, ip6_mode_data: ?*Ip6ModeData, mnp_config_data: ?*ManagedNetworkConfigData, snp_mode_data: ?*SimpleNetworkMode) Status {\n    return self._get_mode_data(self, ip6_mode_data, mnp_config_data, snp_mode_data);\n}","src":25,"more_decls":null}{"doc_comment":"Assign IPv6 address and other configuration parameter to this EFI IPv6 Protocol driver instance.","pl":"pub fn configure(self: *const Ip6Protocol, ip6_config_data: ?*const Ip6ConfigData) Status {\n    return self._configure(self, ip6_config_data);\n}","src":30,"more_decls":null}{"doc_comment":"Joins and leaves multicast groups.","pl":"pub fn groups(self: *const Ip6Protocol, join_flag: bool, group_address: ?*const Ip6Address) Status {\n    return self._groups(self, join_flag, group_address);\n}","src":35,"more_decls":null}{"doc_comment":"Adds and deletes routing table entries.","pl":"pub fn routes(self: *const Ip6Protocol, delete_route: bool, destination: ?*const Ip6Address, prefix_length: u8, gateway_address: ?*const Ip6Address) Status {\n    return self._routes(self, delete_route, destination, prefix_length, gateway_address);\n}","src":40,"more_decls":null}{"doc_comment":"Add or delete Neighbor cache entries.","pl":"pub fn neighbors(self: *const Ip6Protocol, delete_flag: bool, target_ip6_address: *const Ip6Address, target_link_address: ?*const MacAddress, timeout: u32, override: bool) Status {\n    return self._neighbors(self, delete_flag, target_ip6_address, target_link_address, timeout, override);\n}","src":45,"more_decls":null}{"doc_comment":"Places outgoing data packets into the transmit queue.","pl":"pub fn transmit(self: *const Ip6Protocol, token: *Ip6CompletionToken) Status {\n    return self._transmit(self, token);\n}","src":50,"more_decls":null}{"doc_comment":"Places a receiving request into the receiving queue.","pl":"pub fn receive(self: *const Ip6Protocol, token: *Ip6CompletionToken) Status {\n    return self._receive(self, token);\n}","src":55,"more_decls":null}{"doc_comment":"Abort an asynchronous transmits or receive request.","pl":"pub fn cancel(self: *const Ip6Protocol, token: ?*Ip6CompletionToken) Status {\n    return self._cancel(self, token);\n}","src":60,"more_decls":null}{"doc_comment":"Polls for incoming data packets and processes outgoing data packets.","pl":"pub fn poll(self: *const Ip6Protocol) Status {\n    return self._poll(self);\n}","src":65,"more_decls":null}{"pl":"const guid align(8) = Guid{\n        .time_low = 0x2c8759d5,\n        .time_mid = 0x5c2d,\n        .time_high_and_version = 0x66ef,\n        .clock_seq_high_and_reserved = 0x92,\n        .clock_seq_low = 0x5f,\n        .node = [_]u8{ 0xb6, 0x6c, 0x10, 0x19, 0x57, 0xe2 },\n    }","src":69,"more_decls":null}}{"pl":"pub const Ip6ModeData = extern struct ","src":79,"more_decls":{"pl":"is_started: bool","src":80,"more_decls":null}{"pl":"max_packet_size: u32","src":81,"more_decls":null}{"pl":"config_data: Ip6ConfigData","src":82,"more_decls":null}{"pl":"is_configured: bool","src":83,"more_decls":null}{"pl":"address_count: u32","src":84,"more_decls":null}{"pl":"address_list: [*]Ip6AddressInfo","src":85,"more_decls":null}{"pl":"group_count: u32","src":86,"more_decls":null}{"pl":"group_table: [*]Ip6Address","src":87,"more_decls":null}{"pl":"route_count: u32","src":88,"more_decls":null}{"pl":"route_table: [*]Ip6RouteTable","src":89,"more_decls":null}{"pl":"neighbor_count: u32","src":90,"more_decls":null}{"pl":"neighbor_cache: [*]Ip6NeighborCache","src":91,"more_decls":null}{"pl":"prefix_count: u32","src":92,"more_decls":null}{"pl":"prefix_table: [*]Ip6AddressInfo","src":93,"more_decls":null}{"pl":"icmp_type_count: u32","src":94,"more_decls":null}{"pl":"icmp_type_list: [*]Ip6IcmpType","src":95,"more_decls":null}}{"pl":"pub const Ip6ConfigData = extern struct ","src":98,"more_decls":{"pl":"default_protocol: u8","src":99,"more_decls":null}{"pl":"accept_any_protocol: bool","src":100,"more_decls":null}{"pl":"accept_icmp_errors: bool","src":101,"more_decls":null}{"pl":"accept_promiscuous: bool","src":102,"more_decls":null}{"pl":"destination_address: Ip6Address","src":103,"more_decls":null}{"pl":"station_address: Ip6Address","src":104,"more_decls":null}{"pl":"traffic_class: u8","src":105,"more_decls":null}{"pl":"hop_limit: u8","src":106,"more_decls":null}{"pl":"flow_label: u32","src":107,"more_decls":null}{"pl":"receive_timeout: u32","src":108,"more_decls":null}{"pl":"transmit_timeout: u32","src":109,"more_decls":null}}{"pl":"pub const Ip6AddressInfo = extern struct ","src":114,"more_decls":{"pl":"address: Ip6Address","src":115,"more_decls":null}{"pl":"prefix_length: u8","src":116,"more_decls":null}}{"pl":"pub const Ip6RouteTable = extern struct ","src":119,"more_decls":{"pl":"gateway: Ip6Address","src":120,"more_decls":null}{"pl":"destination: Ip6Address","src":121,"more_decls":null}{"pl":"prefix_length: u8","src":122,"more_decls":null}}{"pl":"pub const Ip6NeighborState = extern enum","src":125,"more_decls":{"pl":"Incomplete","src":126,"more_decls":null}{"pl":"Reachable","src":127,"more_decls":null}{"pl":"Stale","src":128,"more_decls":null}{"pl":"Delay","src":129,"more_decls":null}{"pl":"Probe","src":130,"more_decls":null}}{"pl":"pub const Ip6NeighborCache = extern struct ","src":133,"more_decls":{"pl":"neighbor: Ip6Address","src":134,"more_decls":null}{"pl":"link_address: MacAddress","src":135,"more_decls":null}{"pl":"state: Ip6NeighborState","src":136,"more_decls":null}}{"pl":"pub const Ip6IcmpType = extern struct ","src":139,"more_decls":{"pl":"type: u8","src":140,"more_decls":null}{"pl":"code: u8","src":141,"more_decls":null}}{"pl":"pub const Ip6CompletionToken = extern struct ","src":144,"more_decls":{"pl":"event: Event","src":145,"more_decls":null}{"pl":"status: Status","src":146,"more_decls":null}{"pl":"packet: *c_void","src":147,"more_decls":null}}{"pl":"const Ip6Address = [16]u8","src":112,"more_decls":null}]