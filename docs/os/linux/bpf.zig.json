[{"doc_comment":"These values correspond to \"syscalls\" within the BPF program's environment,\neach one is documented in std.os.linux.BPF.kern","pl":"pub const Helper = enum","src":242,"more_decls":{"pl":"unspec","src":243,"more_decls":null}{"pl":"map_lookup_elem","src":244,"more_decls":null}{"pl":"map_update_elem","src":245,"more_decls":null}{"pl":"map_delete_elem","src":246,"more_decls":null}{"pl":"probe_read","src":247,"more_decls":null}{"pl":"ktime_get_ns","src":248,"more_decls":null}{"pl":"trace_printk","src":249,"more_decls":null}{"pl":"get_prandom_u32","src":250,"more_decls":null}{"pl":"get_smp_processor_id","src":251,"more_decls":null}{"pl":"skb_store_bytes","src":252,"more_decls":null}{"pl":"l3_csum_replace","src":253,"more_decls":null}{"pl":"l4_csum_replace","src":254,"more_decls":null}{"pl":"tail_call","src":255,"more_decls":null}{"pl":"clone_redirect","src":256,"more_decls":null}{"pl":"get_current_pid_tgid","src":257,"more_decls":null}{"pl":"get_current_uid_gid","src":258,"more_decls":null}{"pl":"get_current_comm","src":259,"more_decls":null}{"pl":"get_cgroup_classid","src":260,"more_decls":null}{"pl":"skb_vlan_push","src":261,"more_decls":null}{"pl":"skb_vlan_pop","src":262,"more_decls":null}{"pl":"skb_get_tunnel_key","src":263,"more_decls":null}{"pl":"skb_set_tunnel_key","src":264,"more_decls":null}{"pl":"perf_event_read","src":265,"more_decls":null}{"pl":"redirect","src":266,"more_decls":null}{"pl":"get_route_realm","src":267,"more_decls":null}{"pl":"perf_event_output","src":268,"more_decls":null}{"pl":"skb_load_bytes","src":269,"more_decls":null}{"pl":"get_stackid","src":270,"more_decls":null}{"pl":"csum_diff","src":271,"more_decls":null}{"pl":"skb_get_tunnel_opt","src":272,"more_decls":null}{"pl":"skb_set_tunnel_opt","src":273,"more_decls":null}{"pl":"skb_change_proto","src":274,"more_decls":null}{"pl":"skb_change_type","src":275,"more_decls":null}{"pl":"skb_under_cgroup","src":276,"more_decls":null}{"pl":"get_hash_recalc","src":277,"more_decls":null}{"pl":"get_current_task","src":278,"more_decls":null}{"pl":"probe_write_user","src":279,"more_decls":null}{"pl":"current_task_under_cgroup","src":280,"more_decls":null}{"pl":"skb_change_tail","src":281,"more_decls":null}{"pl":"skb_pull_data","src":282,"more_decls":null}{"pl":"csum_update","src":283,"more_decls":null}{"pl":"set_hash_invalid","src":284,"more_decls":null}{"pl":"get_numa_node_id","src":285,"more_decls":null}{"pl":"skb_change_head","src":286,"more_decls":null}{"pl":"xdp_adjust_head","src":287,"more_decls":null}{"pl":"probe_read_str","src":288,"more_decls":null}{"pl":"get_socket_cookie","src":289,"more_decls":null}{"pl":"get_socket_uid","src":290,"more_decls":null}{"pl":"set_hash","src":291,"more_decls":null}{"pl":"setsockopt","src":292,"more_decls":null}{"pl":"skb_adjust_room","src":293,"more_decls":null}{"pl":"redirect_map","src":294,"more_decls":null}{"pl":"sk_redirect_map","src":295,"more_decls":null}{"pl":"sock_map_update","src":296,"more_decls":null}{"pl":"xdp_adjust_meta","src":297,"more_decls":null}{"pl":"perf_event_read_value","src":298,"more_decls":null}{"pl":"perf_prog_read_value","src":299,"more_decls":null}{"pl":"getsockopt","src":300,"more_decls":null}{"pl":"override_return","src":301,"more_decls":null}{"pl":"sock_ops_cb_flags_set","src":302,"more_decls":null}{"pl":"msg_redirect_map","src":303,"more_decls":null}{"pl":"msg_apply_bytes","src":304,"more_decls":null}{"pl":"msg_cork_bytes","src":305,"more_decls":null}{"pl":"msg_pull_data","src":306,"more_decls":null}{"pl":"bind","src":307,"more_decls":null}{"pl":"xdp_adjust_tail","src":308,"more_decls":null}{"pl":"skb_get_xfrm_state","src":309,"more_decls":null}{"pl":"get_stack","src":310,"more_decls":null}{"pl":"skb_load_bytes_relative","src":311,"more_decls":null}{"pl":"fib_lookup","src":312,"more_decls":null}{"pl":"sock_hash_update","src":313,"more_decls":null}{"pl":"msg_redirect_hash","src":314,"more_decls":null}{"pl":"sk_redirect_hash","src":315,"more_decls":null}{"pl":"lwt_push_encap","src":316,"more_decls":null}{"pl":"lwt_seg6_store_bytes","src":317,"more_decls":null}{"pl":"lwt_seg6_adjust_srh","src":318,"more_decls":null}{"pl":"lwt_seg6_action","src":319,"more_decls":null}{"pl":"rc_repeat","src":320,"more_decls":null}{"pl":"rc_keydown","src":321,"more_decls":null}{"pl":"skb_cgroup_id","src":322,"more_decls":null}{"pl":"get_current_cgroup_id","src":323,"more_decls":null}{"pl":"get_local_storage","src":324,"more_decls":null}{"pl":"sk_select_reuseport","src":325,"more_decls":null}{"pl":"skb_ancestor_cgroup_id","src":326,"more_decls":null}{"pl":"sk_lookup_tcp","src":327,"more_decls":null}{"pl":"sk_lookup_udp","src":328,"more_decls":null}{"pl":"sk_release","src":329,"more_decls":null}{"pl":"map_push_elem","src":330,"more_decls":null}{"pl":"map_pop_elem","src":331,"more_decls":null}{"pl":"map_peek_elem","src":332,"more_decls":null}{"pl":"msg_push_data","src":333,"more_decls":null}{"pl":"msg_pop_data","src":334,"more_decls":null}{"pl":"rc_pointer_rel","src":335,"more_decls":null}{"pl":"spin_lock","src":336,"more_decls":null}{"pl":"spin_unlock","src":337,"more_decls":null}{"pl":"sk_fullsock","src":338,"more_decls":null}{"pl":"tcp_sock","src":339,"more_decls":null}{"pl":"skb_ecn_set_ce","src":340,"more_decls":null}{"pl":"get_listener_sock","src":341,"more_decls":null}{"pl":"skc_lookup_tcp","src":342,"more_decls":null}{"pl":"tcp_check_syncookie","src":343,"more_decls":null}{"pl":"sysctl_get_name","src":344,"more_decls":null}{"pl":"sysctl_get_current_value","src":345,"more_decls":null}{"pl":"sysctl_get_new_value","src":346,"more_decls":null}{"pl":"sysctl_set_new_value","src":347,"more_decls":null}{"pl":"strtol","src":348,"more_decls":null}{"pl":"strtoul","src":349,"more_decls":null}{"pl":"sk_storage_get","src":350,"more_decls":null}{"pl":"sk_storage_delete","src":351,"more_decls":null}{"pl":"send_signal","src":352,"more_decls":null}{"pl":"tcp_gen_syncookie","src":353,"more_decls":null}{"pl":"skb_output","src":354,"more_decls":null}{"pl":"probe_read_user","src":355,"more_decls":null}{"pl":"probe_read_kernel","src":356,"more_decls":null}{"pl":"probe_read_user_str","src":357,"more_decls":null}{"pl":"probe_read_kernel_str","src":358,"more_decls":null}{"pl":"tcp_send_ack","src":359,"more_decls":null}{"pl":"send_signal_thread","src":360,"more_decls":null}{"pl":"jiffies64","src":361,"more_decls":null}{"pl":"read_branch_records","src":362,"more_decls":null}{"pl":"get_ns_current_pid_tgid","src":363,"more_decls":null}{"pl":"xdp_output","src":364,"more_decls":null}{"pl":"get_netns_cookie","src":365,"more_decls":null}{"pl":"get_current_ancestor_cgroup_id","src":366,"more_decls":null}{"pl":"sk_assign","src":367,"more_decls":null}{"pl":"ktime_get_boot_ns","src":368,"more_decls":null}{"pl":"seq_printf","src":369,"more_decls":null}{"pl":"seq_write","src":370,"more_decls":null}{"pl":"sk_cgroup_id","src":371,"more_decls":null}{"pl":"sk_ancestor_cgroup_id","src":372,"more_decls":null}{"pl":"ringbuf_output","src":373,"more_decls":null}{"pl":"ringbuf_reserve","src":374,"more_decls":null}{"pl":"ringbuf_submit","src":375,"more_decls":null}{"pl":"ringbuf_discard","src":376,"more_decls":null}{"pl":"ringbuf_query","src":377,"more_decls":null}{"pl":"csum_level","src":378,"more_decls":null}{"pl":"skc_to_tcp6_sock","src":379,"more_decls":null}{"pl":"skc_to_tcp_sock","src":380,"more_decls":null}{"pl":"skc_to_tcp_timewait_sock","src":381,"more_decls":null}{"pl":"skc_to_tcp_request_sock","src":382,"more_decls":null}{"pl":"skc_to_udp6_sock","src":383,"more_decls":null}{"pl":"get_task_stack","src":384,"more_decls":null}{"pl":"_","src":385,"more_decls":null}}{"doc_comment":"a single BPF instruction","pl":"pub const Insn = packed struct ","src":391,"more_decls":{"pl":"code: u8","src":392,"more_decls":null}{"pl":"dst: u4","src":393,"more_decls":null}{"pl":"src: u4","src":394,"more_decls":null}{"pl":"off: i16","src":395,"more_decls":null}{"pl":"imm: i32","src":396,"more_decls":null}{"doc_comment":"r0 - r9 are general purpose 64-bit registers, r10 points to the stack\nframe","pl":"pub const Reg = packed enum","src":400,"more_decls":{"pl":"r0","src":400,"more_decls":null}{"pl":"r1","src":400,"more_decls":null}{"pl":"r2","src":400,"more_decls":null}{"pl":"r3","src":400,"more_decls":null}{"pl":"r4","src":400,"more_decls":null}{"pl":"r5","src":400,"more_decls":null}{"pl":"r6","src":400,"more_decls":null}{"pl":"r7","src":400,"more_decls":null}{"pl":"r8","src":400,"more_decls":null}{"pl":"r9","src":400,"more_decls":null}{"pl":"r10 ","src":400,"more_decls":null}}{"pl":"pub const Size = packed enum","src":428,"more_decls":{"pl":"byte = B","src":429,"more_decls":null}{"pl":"half_word = H","src":430,"more_decls":null}{"pl":"word = W","src":431,"more_decls":null}{"pl":"double_word = DW","src":432,"more_decls":null}}{"pl":"pub fn mov(dst: Reg, src: anytype) Insn {\n    return alu(64, .mov, dst, src);\n}","src":491,"more_decls":null}{"pl":"pub fn add(dst: Reg, src: anytype) Insn {\n    return alu(64, .add, dst, src);\n}","src":495,"more_decls":null}{"pl":"pub fn sub(dst: Reg, src: anytype) Insn {\n    return alu(64, .sub, dst, src);\n}","src":499,"more_decls":null}{"pl":"pub fn mul(dst: Reg, src: anytype) Insn {\n    return alu(64, .mul, dst, src);\n}","src":503,"more_decls":null}{"pl":"pub fn div(dst: Reg, src: anytype) Insn {\n    return alu(64, .div, dst, src);\n}","src":507,"more_decls":null}{"pl":"pub fn alu_or(dst: Reg, src: anytype) Insn {\n    return alu(64, .alu_or, dst, src);\n}","src":511,"more_decls":null}{"pl":"pub fn alu_and(dst: Reg, src: anytype) Insn {\n    return alu(64, .alu_and, dst, src);\n}","src":515,"more_decls":null}{"pl":"pub fn lsh(dst: Reg, src: anytype) Insn {\n    return alu(64, .lsh, dst, src);\n}","src":519,"more_decls":null}{"pl":"pub fn rsh(dst: Reg, src: anytype) Insn {\n    return alu(64, .rsh, dst, src);\n}","src":523,"more_decls":null}{"pl":"pub fn neg(dst: Reg) Insn {\n    return alu(64, .neg, dst, 0);\n}","src":527,"more_decls":null}{"pl":"pub fn mod(dst: Reg, src: anytype) Insn {\n    return alu(64, .mod, dst, src);\n}","src":531,"more_decls":null}{"pl":"pub fn xor(dst: Reg, src: anytype) Insn {\n    return alu(64, .xor, dst, src);\n}","src":535,"more_decls":null}{"pl":"pub fn arsh(dst: Reg, src: anytype) Insn {\n    return alu(64, .arsh, dst, src);\n}","src":539,"more_decls":null}{"pl":"pub fn ja(off: i16) Insn {\n    return jmp(.ja, .r0, 0, off);\n}","src":547,"more_decls":null}{"pl":"pub fn jeq(dst: Reg, src: anytype, off: i16) Insn {\n    return jmp(.jeq, dst, src, off);\n}","src":551,"more_decls":null}{"pl":"pub fn jgt(dst: Reg, src: anytype, off: i16) Insn {\n    return jmp(.jgt, dst, src, off);\n}","src":555,"more_decls":null}{"pl":"pub fn jge(dst: Reg, src: anytype, off: i16) Insn {\n    return jmp(.jge, dst, src, off);\n}","src":559,"more_decls":null}{"pl":"pub fn jlt(dst: Reg, src: anytype, off: i16) Insn {\n    return jmp(.jlt, dst, src, off);\n}","src":563,"more_decls":null}{"pl":"pub fn jle(dst: Reg, src: anytype, off: i16) Insn {\n    return jmp(.jle, dst, src, off);\n}","src":567,"more_decls":null}{"pl":"pub fn jset(dst: Reg, src: anytype, off: i16) Insn {\n    return jmp(.jset, dst, src, off);\n}","src":571,"more_decls":null}{"pl":"pub fn jne(dst: Reg, src: anytype, off: i16) Insn {\n    return jmp(.jne, dst, src, off);\n}","src":575,"more_decls":null}{"pl":"pub fn jsgt(dst: Reg, src: anytype, off: i16) Insn {\n    return jmp(.jsgt, dst, src, off);\n}","src":579,"more_decls":null}{"pl":"pub fn jsge(dst: Reg, src: anytype, off: i16) Insn {\n    return jmp(.jsge, dst, src, off);\n}","src":583,"more_decls":null}{"pl":"pub fn jslt(dst: Reg, src: anytype, off: i16) Insn {\n    return jmp(.jslt, dst, src, off);\n}","src":587,"more_decls":null}{"pl":"pub fn jsle(dst: Reg, src: anytype, off: i16) Insn {\n    return jmp(.jsle, dst, src, off);\n}","src":591,"more_decls":null}{"pl":"fn xadd(dst: Reg, src: Reg) Insn","src":595,"more_decls":null}{"pl":"pub fn ld_abs(size: Size, dst: Reg, src: Reg, imm: i32) Insn {\n    return ld(.abs, size, dst, src, imm);\n}","src":615,"more_decls":null}{"pl":"pub fn ld_ind(size: Size, dst: Reg, src: Reg, imm: i32) Insn {\n    return ld(.ind, size, dst, src, imm);\n}","src":619,"more_decls":null}{"pl":"fn ldx(size: Size, dst: Reg, src: Reg, off: i16) Insn","src":623,"more_decls":null}{"pl":"pub fn ld_dw1(dst: Reg, imm: u64) Insn {\n    return ld_imm_impl1(dst, .r0, imm);\n}","src":653,"more_decls":null}{"pl":"pub fn ld_dw2(imm: u64) Insn {\n    return ld_imm_impl2(imm);\n}","src":657,"more_decls":null}{"pl":"pub fn ld_map_fd1(dst: Reg, map_fd: fd_t) Insn {\n    return ld_imm_impl1(dst, @intToEnum(Reg, PSEUDO_MAP_FD), @intCast(u64, map_fd));\n}","src":661,"more_decls":null}{"pl":"pub fn ld_map_fd2(map_fd: fd_t) Insn {\n    return ld_imm_impl2(@intCast(u64, map_fd));\n}","src":665,"more_decls":null}{"pl":"fn st(comptime size: Size, dst: Reg, off: i16, imm: i32) Insn","src":669,"more_decls":null}{"pl":"fn stx(size: Size, dst: Reg, off: i16, src: Reg) Insn","src":680,"more_decls":null}{"pl":"pub fn le(comptime size: Size, dst: Reg) Insn {\n    return endian_swap(.Little, size, dst);\n}","src":708,"more_decls":null}{"pl":"pub fn be(comptime size: Size, dst: Reg) Insn {\n    return endian_swap(.Big, size, dst);\n}","src":712,"more_decls":null}{"pl":"fn call(helper: Helper) Insn","src":716,"more_decls":null}{"doc_comment":"exit BPF program","pl":"fn exit() Insn","src":727,"more_decls":null}}{"pl":"pub const Cmd = extern enum","src":856,"more_decls":{"doc_comment":"Create  a map and return a file descriptor that refers to the map.  The\nclose-on-exec file descriptor flag is automatically enabled for the new\nfile descriptor.\n\nuses MapCreateAttr","pl":"map_create","src":862,"more_decls":null}{"doc_comment":"Look up an element by key in a specified map and return its value.\n\nuses MapElemAttr","pl":"map_lookup_elem","src":867,"more_decls":null}{"doc_comment":"Create or update an element (key/value pair) in a specified map.\n\nuses MapElemAttr","pl":"map_update_elem","src":872,"more_decls":null}{"doc_comment":"Look up and delete an element by key in a specified map.\n\nuses MapElemAttr","pl":"map_delete_elem","src":877,"more_decls":null}{"doc_comment":"Look up an element by key in a specified map and return the key of the\nnext element.","pl":"map_get_next_key","src":881,"more_decls":null}{"doc_comment":"Verify and load an eBPF program, returning a new file descriptor\nassociated with  the  program.   The close-on-exec file descriptor flag\nis automatically enabled for the new file descriptor.\n\nuses ProgLoadAttr","pl":"prog_load","src":888,"more_decls":null}{"doc_comment":"Pin a map or eBPF program to a path within the minimal BPF filesystem\n\nuses ObjAttr","pl":"obj_pin","src":893,"more_decls":null}{"doc_comment":"Get the file descriptor of a BPF object pinned to a certain path\n\nuses ObjAttr","pl":"obj_get","src":898,"more_decls":null}{"doc_comment":"uses ProgAttachAttr","pl":"prog_attach","src":901,"more_decls":null}{"doc_comment":"uses ProgAttachAttr","pl":"prog_detach","src":904,"more_decls":null}{"doc_comment":"uses TestRunAttr","pl":"prog_test_run","src":907,"more_decls":null}{"doc_comment":"uses GetIdAttr","pl":"prog_get_next_id","src":910,"more_decls":null}{"doc_comment":"uses GetIdAttr","pl":"map_get_next_id","src":913,"more_decls":null}{"doc_comment":"uses GetIdAttr","pl":"prog_get_fd_by_id","src":916,"more_decls":null}{"doc_comment":"uses GetIdAttr","pl":"map_get_fd_by_id","src":919,"more_decls":null}{"doc_comment":"uses InfoAttr","pl":"obj_get_info_by_fd","src":922,"more_decls":null}{"doc_comment":"uses QueryAttr","pl":"prog_query","src":925,"more_decls":null}{"doc_comment":"uses RawTracepointAttr","pl":"raw_tracepoint_open","src":928,"more_decls":null}{"doc_comment":"uses BtfLoadAttr","pl":"btf_load","src":931,"more_decls":null}{"doc_comment":"uses GetIdAttr","pl":"btf_get_fd_by_id","src":934,"more_decls":null}{"doc_comment":"uses TaskFdQueryAttr","pl":"task_fd_query","src":937,"more_decls":null}{"doc_comment":"uses MapElemAttr","pl":"map_lookup_and_delete_elem","src":940,"more_decls":null}{"pl":"map_freeze","src":941,"more_decls":null}{"doc_comment":"uses GetIdAttr","pl":"btf_get_next_id","src":944,"more_decls":null}{"doc_comment":"uses MapBatchAttr","pl":"map_lookup_batch","src":947,"more_decls":null}{"doc_comment":"uses MapBatchAttr","pl":"map_lookup_and_delete_batch","src":950,"more_decls":null}{"doc_comment":"uses MapBatchAttr","pl":"map_update_batch","src":953,"more_decls":null}{"doc_comment":"uses MapBatchAttr","pl":"map_delete_batch","src":956,"more_decls":null}{"doc_comment":"uses LinkCreateAttr","pl":"link_create","src":959,"more_decls":null}{"doc_comment":"uses LinkUpdateAttr","pl":"link_update","src":962,"more_decls":null}{"doc_comment":"uses GetIdAttr","pl":"link_get_fd_by_id","src":965,"more_decls":null}{"doc_comment":"uses GetIdAttr","pl":"link_get_next_id","src":968,"more_decls":null}{"doc_comment":"uses EnableStatsAttr","pl":"enable_stats","src":971,"more_decls":null}{"doc_comment":"uses IterCreateAttr","pl":"iter_create","src":974,"more_decls":null}{"pl":"link_detach","src":975,"more_decls":null}{"pl":"_","src":976,"more_decls":null}}{"pl":"pub const MapType = extern enum","src":979,"more_decls":{"pl":"unspec","src":980,"more_decls":null}{"pl":"hash","src":981,"more_decls":null}{"pl":"array","src":982,"more_decls":null}{"pl":"prog_array","src":983,"more_decls":null}{"pl":"perf_event_array","src":984,"more_decls":null}{"pl":"percpu_hash","src":985,"more_decls":null}{"pl":"percpu_array","src":986,"more_decls":null}{"pl":"stack_trace","src":987,"more_decls":null}{"pl":"cgroup_array","src":988,"more_decls":null}{"pl":"lru_hash","src":989,"more_decls":null}{"pl":"lru_percpu_hash","src":990,"more_decls":null}{"pl":"lpm_trie","src":991,"more_decls":null}{"pl":"array_of_maps","src":992,"more_decls":null}{"pl":"hash_of_maps","src":993,"more_decls":null}{"pl":"devmap","src":994,"more_decls":null}{"pl":"sockmap","src":995,"more_decls":null}{"pl":"cpumap","src":996,"more_decls":null}{"pl":"xskmap","src":997,"more_decls":null}{"pl":"sockhash","src":998,"more_decls":null}{"pl":"cgroup_storage","src":999,"more_decls":null}{"pl":"reuseport_sockarray","src":1000,"more_decls":null}{"pl":"percpu_cgroup_storage","src":1001,"more_decls":null}{"pl":"queue","src":1002,"more_decls":null}{"pl":"stack","src":1003,"more_decls":null}{"pl":"sk_storage","src":1004,"more_decls":null}{"pl":"devmap_hash","src":1005,"more_decls":null}{"pl":"struct_ops","src":1006,"more_decls":null}{"doc_comment":"An ordered and shared CPU version of perf_event_array. They have\nsimilar semantics:\n- variable length records\n- no blocking: when full, reservation fails\n- memory mappable for ease and speed\n- epoll notifications for new data, but can busy poll\n\nRingbufs give BPF programs two sets of APIs:\n- ringbuf_output() allows copy data from one place to a ring\nbuffer, similar to bpf_perf_event_output()\n- ringbuf_reserve()/ringbuf_commit()/ringbuf_discard() split the\nprocess into two steps. First a fixed amount of space is reserved,\nif that is successful then the program gets a pointer to a chunk of\nmemory and can be submitted with commit() or discarded with\ndiscard()\n\nringbuf_output() will incurr an extra memory copy, but allows to submit\nrecords of the length that's not known beforehand, and is an easy\nreplacement for perf_event_outptu().\n\nringbuf_reserve() avoids the extra memory copy but requires a known size\nof memory beforehand.\n\nringbuf_query() allows to query properties of the map, 4 are currently\nsupported:\n- BPF_RB_AVAIL_DATA: amount of unconsumed data in ringbuf\n- BPF_RB_RING_SIZE: returns size of ringbuf\n- BPF_RB_CONS_POS/BPF_RB_PROD_POS returns current logical position\nof consumer and producer respectively\n\nkey size: 0\nvalue size: 0\nmax entries: size of ringbuf, must be power of 2","pl":"ringbuf","src":1041,"more_decls":null}{"pl":"_","src":1043,"more_decls":null}}{"pl":"pub const ProgType = extern enum","src":1046,"more_decls":{"pl":"unspec","src":1047,"more_decls":null}{"doc_comment":"context type: __sk_buff","pl":"socket_filter","src":1050,"more_decls":null}{"doc_comment":"context type: bpf_user_pt_regs_t","pl":"kprobe","src":1053,"more_decls":null}{"doc_comment":"context type: __sk_buff","pl":"sched_cls","src":1056,"more_decls":null}{"doc_comment":"context type: __sk_buff","pl":"sched_act","src":1059,"more_decls":null}{"doc_comment":"context type: u64","pl":"tracepoint","src":1062,"more_decls":null}{"doc_comment":"context type: xdp_md","pl":"xdp","src":1065,"more_decls":null}{"doc_comment":"context type: bpf_perf_event_data","pl":"perf_event","src":1068,"more_decls":null}{"doc_comment":"context type: __sk_buff","pl":"cgroup_skb","src":1071,"more_decls":null}{"doc_comment":"context type: bpf_sock","pl":"cgroup_sock","src":1074,"more_decls":null}{"doc_comment":"context type: __sk_buff","pl":"lwt_in","src":1077,"more_decls":null}{"doc_comment":"context type: __sk_buff","pl":"lwt_out","src":1080,"more_decls":null}{"doc_comment":"context type: __sk_buff","pl":"lwt_xmit","src":1083,"more_decls":null}{"doc_comment":"context type: bpf_sock_ops","pl":"sock_ops","src":1086,"more_decls":null}{"doc_comment":"context type: __sk_buff","pl":"sk_skb","src":1089,"more_decls":null}{"doc_comment":"context type: bpf_cgroup_dev_ctx","pl":"cgroup_device","src":1092,"more_decls":null}{"doc_comment":"context type: sk_msg_md","pl":"sk_msg","src":1095,"more_decls":null}{"doc_comment":"context type: bpf_raw_tracepoint_args","pl":"raw_tracepoint","src":1098,"more_decls":null}{"doc_comment":"context type: bpf_sock_addr","pl":"cgroup_sock_addr","src":1101,"more_decls":null}{"doc_comment":"context type: __sk_buff","pl":"lwt_seg6local","src":1104,"more_decls":null}{"doc_comment":"context type: u32","pl":"lirc_mode2","src":1107,"more_decls":null}{"doc_comment":"context type: sk_reuseport_md","pl":"sk_reuseport","src":1110,"more_decls":null}{"doc_comment":"context type: __sk_buff","pl":"flow_dissector","src":1113,"more_decls":null}{"doc_comment":"context type: bpf_sysctl","pl":"cgroup_sysctl","src":1116,"more_decls":null}{"doc_comment":"context type: bpf_raw_tracepoint_args","pl":"raw_tracepoint_writable","src":1119,"more_decls":null}{"doc_comment":"context type: bpf_sockopt","pl":"cgroup_sockopt","src":1122,"more_decls":null}{"doc_comment":"context type: void *","pl":"tracing","src":1125,"more_decls":null}{"doc_comment":"context type: void *","pl":"struct_ops","src":1128,"more_decls":null}{"doc_comment":"context type: void *","pl":"ext","src":1131,"more_decls":null}{"doc_comment":"context type: void *","pl":"lsm","src":1134,"more_decls":null}{"doc_comment":"context type: bpf_sk_lookup","pl":"sk_lookup","src":1137,"more_decls":null}{"pl":"_","src":1138,"more_decls":null}}{"pl":"pub const AttachType = extern enum","src":1141,"more_decls":{"pl":"cgroup_inet_ingress","src":1142,"more_decls":null}{"pl":"cgroup_inet_egress","src":1143,"more_decls":null}{"pl":"cgroup_inet_sock_create","src":1144,"more_decls":null}{"pl":"cgroup_sock_ops","src":1145,"more_decls":null}{"pl":"sk_skb_stream_parser","src":1146,"more_decls":null}{"pl":"sk_skb_stream_verdict","src":1147,"more_decls":null}{"pl":"cgroup_device","src":1148,"more_decls":null}{"pl":"sk_msg_verdict","src":1149,"more_decls":null}{"pl":"cgroup_inet4_bind","src":1150,"more_decls":null}{"pl":"cgroup_inet6_bind","src":1151,"more_decls":null}{"pl":"cgroup_inet4_connect","src":1152,"more_decls":null}{"pl":"cgroup_inet6_connect","src":1153,"more_decls":null}{"pl":"cgroup_inet4_post_bind","src":1154,"more_decls":null}{"pl":"cgroup_inet6_post_bind","src":1155,"more_decls":null}{"pl":"cgroup_udp4_sendmsg","src":1156,"more_decls":null}{"pl":"cgroup_udp6_sendmsg","src":1157,"more_decls":null}{"pl":"lirc_mode2","src":1158,"more_decls":null}{"pl":"flow_dissector","src":1159,"more_decls":null}{"pl":"cgroup_sysctl","src":1160,"more_decls":null}{"pl":"cgroup_udp4_recvmsg","src":1161,"more_decls":null}{"pl":"cgroup_udp6_recvmsg","src":1162,"more_decls":null}{"pl":"cgroup_getsockopt","src":1163,"more_decls":null}{"pl":"cgroup_setsockopt","src":1164,"more_decls":null}{"pl":"trace_raw_tp","src":1165,"more_decls":null}{"pl":"trace_fentry","src":1166,"more_decls":null}{"pl":"trace_fexit","src":1167,"more_decls":null}{"pl":"modify_return","src":1168,"more_decls":null}{"pl":"lsm_mac","src":1169,"more_decls":null}{"pl":"trace_iter","src":1170,"more_decls":null}{"pl":"cgroup_inet4_getpeername","src":1171,"more_decls":null}{"pl":"cgroup_inet6_getpeername","src":1172,"more_decls":null}{"pl":"cgroup_inet4_getsockname","src":1173,"more_decls":null}{"pl":"cgroup_inet6_getsockname","src":1174,"more_decls":null}{"pl":"xdp_devmap","src":1175,"more_decls":null}{"pl":"cgroup_inet_sock_release","src":1176,"more_decls":null}{"pl":"xdp_cpumap","src":1177,"more_decls":null}{"pl":"sk_lookup","src":1178,"more_decls":null}{"pl":"xdp","src":1179,"more_decls":null}{"pl":"_","src":1180,"more_decls":null}}{"doc_comment":"struct used by Cmd.map_create command","pl":"pub const MapCreateAttr = extern struct ","src":1185,"more_decls":{"doc_comment":"one of MapType","pl":"map_type: u32","src":1187,"more_decls":null}{"doc_comment":"size of key in bytes","pl":"key_size: u32","src":1190,"more_decls":null}{"doc_comment":"size of value in bytes","pl":"value_size: u32","src":1193,"more_decls":null}{"doc_comment":"max number of entries in a map","pl":"max_entries: u32","src":1196,"more_decls":null}{"doc_comment":".map_create related flags","pl":"map_flags: u32","src":1199,"more_decls":null}{"doc_comment":"fd pointing to the inner map","pl":"inner_map_fd: fd_t","src":1202,"more_decls":null}{"doc_comment":"numa node (effective only if MapCreateFlags.numa_node is set)","pl":"numa_node: u32","src":1205,"more_decls":null}{"pl":"map_name: [obj_name_len]u8","src":1206,"more_decls":null}{"doc_comment":"ifindex of netdev to create on","pl":"map_ifindex: u32","src":1209,"more_decls":null}{"doc_comment":"fd pointing to a BTF type data","pl":"btf_fd: fd_t","src":1212,"more_decls":null}{"doc_comment":"BTF type_id of the key","pl":"btf_key_type_id: u32","src":1215,"more_decls":null}{"doc_comment":"BTF type_id of the value","pl":"bpf_value_type_id: u32","src":1218,"more_decls":null}{"doc_comment":"BTF type_id of a kernel struct stored as the map value","pl":"btf_vmlinux_value_type_id: u32","src":1221,"more_decls":null}}{"doc_comment":"struct used by Cmd.map_*_elem commands","pl":"pub const MapElemAttr = extern struct ","src":1225,"more_decls":{"pl":"map_fd: fd_t","src":1226,"more_decls":null}{"pl":"key: u64","src":1227,"more_decls":null}{"pl":"result: extern union {\n        value: u64,\n        next_key: u64,\n    }","src":1228,"more_decls":null}{"pl":"flags: u64","src":1232,"more_decls":null}}{"doc_comment":"struct used by Cmd.map_*_batch commands","pl":"pub const MapBatchAttr = extern struct ","src":1236,"more_decls":{"doc_comment":"start batch, NULL to start from beginning","pl":"in_batch: u64","src":1238,"more_decls":null}{"doc_comment":"output: next start batch","pl":"out_batch: u64","src":1241,"more_decls":null}{"pl":"keys: u64","src":1242,"more_decls":null}{"pl":"values: u64","src":1243,"more_decls":null}{"doc_comment":"input/output:\ninput: # of key/value elements\noutput: # of filled elements","pl":"count: u32","src":1248,"more_decls":null}{"pl":"map_fd: fd_t","src":1249,"more_decls":null}{"pl":"elem_flags: u64","src":1250,"more_decls":null}{"pl":"flags: u64","src":1251,"more_decls":null}}{"doc_comment":"struct used by Cmd.prog_load command","pl":"pub const ProgLoadAttr = extern struct ","src":1255,"more_decls":{"doc_comment":"one of ProgType","pl":"prog_type: u32","src":1257,"more_decls":null}{"pl":"insn_cnt: u32","src":1258,"more_decls":null}{"pl":"insns: u64","src":1259,"more_decls":null}{"pl":"license: u64","src":1260,"more_decls":null}{"doc_comment":"verbosity level of verifier","pl":"log_level: u32","src":1263,"more_decls":null}{"doc_comment":"size of user buffer","pl":"log_size: u32","src":1266,"more_decls":null}{"doc_comment":"user supplied buffer","pl":"log_buf: u64","src":1269,"more_decls":null}{"doc_comment":"not used","pl":"kern_version: u32","src":1272,"more_decls":null}{"pl":"prog_flags: u32","src":1273,"more_decls":null}{"pl":"prog_name: [obj_name_len]u8","src":1274,"more_decls":null}{"doc_comment":"ifindex of netdev to prep for.","pl":"prog_ifindex: u32","src":1277,"more_decls":null}{"doc_comment":"For some prog types expected attach type must be known at load time to\nverify attach type specific parts of prog (context accesses, allowed\nhelpers, etc).","pl":"expected_attach_type: u32","src":1282,"more_decls":null}{"doc_comment":"fd pointing to BTF type data","pl":"prog_btf_fd: fd_t","src":1285,"more_decls":null}{"doc_comment":"userspace bpf_func_info size","pl":"func_info_rec_size: u32","src":1288,"more_decls":null}{"pl":"func_info: u64","src":1289,"more_decls":null}{"doc_comment":"number of bpf_func_info records","pl":"func_info_cnt: u32","src":1292,"more_decls":null}{"doc_comment":"userspace bpf_line_info size","pl":"line_info_rec_size: u32","src":1295,"more_decls":null}{"pl":"line_info: u64","src":1296,"more_decls":null}{"doc_comment":"number of bpf_line_info records","pl":"line_info_cnt: u32","src":1299,"more_decls":null}{"doc_comment":"in-kernel BTF type id to attach to","pl":"attact_btf_id: u32","src":1302,"more_decls":null}{"doc_comment":"0 to attach to vmlinux","pl":"attach_prog_id: u32","src":1305,"more_decls":null}}{"doc_comment":"struct used by Cmd.obj_* commands","pl":"pub const ObjAttr = extern struct ","src":1309,"more_decls":{"pl":"pathname: u64","src":1310,"more_decls":null}{"pl":"bpf_fd: fd_t","src":1311,"more_decls":null}{"pl":"file_flags: u32","src":1312,"more_decls":null}}{"doc_comment":"struct used by Cmd.prog_attach/detach commands","pl":"pub const ProgAttachAttr = extern struct ","src":1316,"more_decls":{"doc_comment":"container object to attach to","pl":"target_fd: fd_t","src":1318,"more_decls":null}{"doc_comment":"eBPF program to attach","pl":"attach_bpf_fd: fd_t","src":1321,"more_decls":null}{"pl":"attach_type: u32","src":1323,"more_decls":null}{"pl":"attach_flags: u32","src":1324,"more_decls":null}{"doc_comment":"previously attached eBPF program to replace if .replace is used","pl":"replace_bpf_fd: fd_t","src":1328,"more_decls":null}}{"doc_comment":"struct used by Cmd.prog_test_run command","pl":"pub const TestRunAttr = extern struct ","src":1332,"more_decls":{"pl":"prog_fd: fd_t","src":1333,"more_decls":null}{"pl":"retval: u32","src":1334,"more_decls":null}{"doc_comment":"input: len of data_in","pl":"data_size_in: u32","src":1337,"more_decls":null}{"doc_comment":"input/output: len of data_out. returns ENOSPC if data_out is too small.","pl":"data_size_out: u32","src":1340,"more_decls":null}{"pl":"data_in: u64","src":1341,"more_decls":null}{"pl":"data_out: u64","src":1342,"more_decls":null}{"pl":"repeat: u32","src":1343,"more_decls":null}{"pl":"duration: u32","src":1344,"more_decls":null}{"doc_comment":"input: len of ctx_in","pl":"ctx_size_in: u32","src":1347,"more_decls":null}{"doc_comment":"input/output: len of ctx_out. returns ENOSPC if ctx_out is too small.","pl":"ctx_size_out: u32","src":1350,"more_decls":null}{"pl":"ctx_in: u64","src":1351,"more_decls":null}{"pl":"ctx_out: u64","src":1352,"more_decls":null}}{"doc_comment":"struct used by Cmd.*_get_*_id commands","pl":"pub const GetIdAttr = extern struct ","src":1356,"more_decls":{"pl":"id: extern union {\n        start_id: u32,\n        prog_id: u32,\n        map_id: u32,\n        btf_id: u32,\n        link_id: u32,\n    }","src":1357,"more_decls":null}{"pl":"next_id: u32","src":1364,"more_decls":null}{"pl":"open_flags: u32","src":1365,"more_decls":null}}{"doc_comment":"struct used by Cmd.obj_get_info_by_fd command","pl":"pub const InfoAttr = extern struct ","src":1369,"more_decls":{"pl":"bpf_fd: fd_t","src":1370,"more_decls":null}{"pl":"info_len: u32","src":1371,"more_decls":null}{"pl":"info: u64","src":1372,"more_decls":null}}{"doc_comment":"struct used by Cmd.prog_query command","pl":"pub const QueryAttr = extern struct ","src":1376,"more_decls":{"doc_comment":"container object to query","pl":"target_fd: fd_t","src":1378,"more_decls":null}{"pl":"attach_type: u32","src":1379,"more_decls":null}{"pl":"query_flags: u32","src":1380,"more_decls":null}{"pl":"attach_flags: u32","src":1381,"more_decls":null}{"pl":"prog_ids: u64","src":1382,"more_decls":null}{"pl":"prog_cnt: u32","src":1383,"more_decls":null}}{"doc_comment":"struct used by Cmd.raw_tracepoint_open command","pl":"pub const RawTracepointAttr = extern struct ","src":1387,"more_decls":{"pl":"name: u64","src":1388,"more_decls":null}{"pl":"prog_fd: fd_t","src":1389,"more_decls":null}}{"doc_comment":"struct used by Cmd.btf_load command","pl":"pub const BtfLoadAttr = extern struct ","src":1393,"more_decls":{"pl":"btf: u64","src":1394,"more_decls":null}{"pl":"btf_log_buf: u64","src":1395,"more_decls":null}{"pl":"btf_size: u32","src":1396,"more_decls":null}{"pl":"btf_log_size: u32","src":1397,"more_decls":null}{"pl":"btf_log_level: u32","src":1398,"more_decls":null}}{"doc_comment":"struct used by Cmd.task_fd_query","pl":"pub const TaskFdQueryAttr = extern struct ","src":1402,"more_decls":{"doc_comment":"input: pid","pl":"pid: pid_t","src":1404,"more_decls":null}{"doc_comment":"input: fd","pl":"fd: fd_t","src":1407,"more_decls":null}{"doc_comment":"input: flags","pl":"flags: u32","src":1410,"more_decls":null}{"doc_comment":"input/output: buf len","pl":"buf_len: u32","src":1413,"more_decls":null}{"doc_comment":"input/output:\ntp_name for tracepoint\nsymbol for kprobe\nfilename for uprobe","pl":"buf: u64","src":1419,"more_decls":null}{"doc_comment":"output: prod_id","pl":"prog_id: u32","src":1422,"more_decls":null}{"doc_comment":"output: BPF_FD_TYPE","pl":"fd_type: u32","src":1425,"more_decls":null}{"doc_comment":"output: probe_offset","pl":"probe_offset: u64","src":1428,"more_decls":null}{"doc_comment":"output: probe_addr","pl":"probe_addr: u64","src":1431,"more_decls":null}}{"doc_comment":"struct used by Cmd.link_create command","pl":"pub const LinkCreateAttr = extern struct ","src":1435,"more_decls":{"doc_comment":"eBPF program to attach","pl":"prog_fd: fd_t","src":1437,"more_decls":null}{"doc_comment":"object to attach to","pl":"target_fd: fd_t","src":1440,"more_decls":null}{"pl":"attach_type: u32","src":1441,"more_decls":null}{"doc_comment":"extra flags","pl":"flags: u32","src":1444,"more_decls":null}}{"doc_comment":"struct used by Cmd.link_update command","pl":"pub const LinkUpdateAttr = extern struct ","src":1448,"more_decls":{"pl":"link_fd: fd_t","src":1449,"more_decls":null}{"doc_comment":"new program to update link with","pl":"new_prog_fd: fd_t","src":1452,"more_decls":null}{"doc_comment":"extra flags","pl":"flags: u32","src":1455,"more_decls":null}{"doc_comment":"expected link's program fd, it is specified only if BPF_F_REPLACE is\nset in flags","pl":"old_prog_fd: fd_t","src":1459,"more_decls":null}}{"doc_comment":"struct used by Cmd.enable_stats command","pl":"pub const EnableStatsAttr = extern struct ","src":1463,"more_decls":{"pl":"type: u32","src":1464,"more_decls":null}}{"doc_comment":"struct used by Cmd.iter_create command","pl":"pub const IterCreateAttr = extern struct ","src":1468,"more_decls":{"pl":"link_fd: fd_t","src":1469,"more_decls":null}{"pl":"flags: u32","src":1470,"more_decls":null}}{"doc_comment":"Mega struct that is passed to the bpf() syscall","pl":"pub const Attr = extern union ","src":1474,"more_decls":{"pl":"map_create: MapCreateAttr","src":1475,"more_decls":null}{"pl":"map_elem: MapElemAttr","src":1476,"more_decls":null}{"pl":"map_batch: MapBatchAttr","src":1477,"more_decls":null}{"pl":"prog_load: ProgLoadAttr","src":1478,"more_decls":null}{"pl":"obj: ObjAttr","src":1479,"more_decls":null}{"pl":"prog_attach: ProgAttachAttr","src":1480,"more_decls":null}{"pl":"test_run: TestRunAttr","src":1481,"more_decls":null}{"pl":"get_id: GetIdAttr","src":1482,"more_decls":null}{"pl":"info: InfoAttr","src":1483,"more_decls":null}{"pl":"query: QueryAttr","src":1484,"more_decls":null}{"pl":"raw_tracepoint: RawTracepointAttr","src":1485,"more_decls":null}{"pl":"btf_load: BtfLoadAttr","src":1486,"more_decls":null}{"pl":"task_fd_query: TaskFdQueryAttr","src":1487,"more_decls":null}{"pl":"link_create: LinkCreateAttr","src":1488,"more_decls":null}{"pl":"link_update: LinkUpdateAttr","src":1489,"more_decls":null}{"pl":"enable_stats: EnableStatsAttr","src":1490,"more_decls":null}{"pl":"iter_create: IterCreateAttr","src":1491,"more_decls":null}}{"pl":"pub const Log = struct ","src":1494,"more_decls":{"pl":"level: u32","src":1495,"more_decls":null}{"pl":"buf: []u8","src":1496,"more_decls":null}}{"pl":"fn map_create(map_type: MapType, key_size: u32, value_size: u32, max_entries: u32) !fd_t","src":1499,"more_decls":null}{"pl":"fn map_lookup_elem(fd: fd_t, key: []const u8, value: []u8) !void","src":1524,"more_decls":null}{"pl":"fn map_update_elem(fd: fd_t, key: []const u8, value: []const u8, flags: u64) !void","src":1545,"more_decls":null}{"pl":"fn map_delete_elem(fd: fd_t, key: []const u8) !void","src":1568,"more_decls":null}{"pl":"fn prog_load(\n    prog_type: ProgType,\n    insns: []const Insn,\n    log: ?*Log,\n    license: []const u8,\n    kern_version: u32,\n) !fd_t","src":1616,"more_decls":null}{"pl":"const btf = @import(\"bpf/btf.zig\")","src":13,"more_decls":null}{"pl":"const kern = @import(\"bpf/kern.zig\")","src":14,"more_decls":null}{"pl":"const LD = 0x00","src":17,"more_decls":null}{"pl":"const LDX = 0x01","src":18,"more_decls":null}{"pl":"const ST = 0x02","src":19,"more_decls":null}{"pl":"const STX = 0x03","src":20,"more_decls":null}{"pl":"const ALU = 0x04","src":21,"more_decls":null}{"pl":"const JMP = 0x05","src":22,"more_decls":null}{"pl":"const RET = 0x06","src":23,"more_decls":null}{"pl":"const MISC = 0x07","src":24,"more_decls":null}{"doc_comment":"32-bit","pl":"const W = 0x00","src":27,"more_decls":null}{"doc_comment":"16-bit","pl":"const H = 0x08","src":29,"more_decls":null}{"doc_comment":"8-bit","pl":"const B = 0x10","src":31,"more_decls":null}{"doc_comment":"64-bit","pl":"const DW = 0x18","src":33,"more_decls":null}{"pl":"const IMM = 0x00","src":35,"more_decls":null}{"pl":"const ABS = 0x20","src":36,"more_decls":null}{"pl":"const IND = 0x40","src":37,"more_decls":null}{"pl":"const MEM = 0x60","src":38,"more_decls":null}{"pl":"const LEN = 0x80","src":39,"more_decls":null}{"pl":"const MSH = 0xa0","src":40,"more_decls":null}{"pl":"const ADD = 0x00","src":43,"more_decls":null}{"pl":"const SUB = 0x10","src":44,"more_decls":null}{"pl":"const MUL = 0x20","src":45,"more_decls":null}{"pl":"const DIV = 0x30","src":46,"more_decls":null}{"pl":"const OR = 0x40","src":47,"more_decls":null}{"pl":"const AND = 0x50","src":48,"more_decls":null}{"pl":"const LSH = 0x60","src":49,"more_decls":null}{"pl":"const RSH = 0x70","src":50,"more_decls":null}{"pl":"const NEG = 0x80","src":51,"more_decls":null}{"pl":"const MOD = 0x90","src":52,"more_decls":null}{"pl":"const XOR = 0xa0","src":53,"more_decls":null}{"pl":"const JA = 0x00","src":56,"more_decls":null}{"pl":"const JEQ = 0x10","src":57,"more_decls":null}{"pl":"const JGT = 0x20","src":58,"more_decls":null}{"pl":"const JGE = 0x30","src":59,"more_decls":null}{"pl":"const JSET = 0x40","src":60,"more_decls":null}{"pl":"const K = 0x00","src":63,"more_decls":null}{"pl":"const X = 0x08","src":64,"more_decls":null}{"pl":"const MAXINSNS = 4096","src":66,"more_decls":null}{"doc_comment":"jmp mode in word width","pl":"const JMP32 = 0x06","src":70,"more_decls":null}{"doc_comment":"alu mode in double word width","pl":"const ALU64 = 0x07","src":73,"more_decls":null}{"doc_comment":"exclusive add","pl":"const XADD = 0xc0","src":77,"more_decls":null}{"doc_comment":"mov reg to reg","pl":"const MOV = 0xb0","src":81,"more_decls":null}{"doc_comment":"sign extending arithmetic shift right */","pl":"const ARSH = 0xc0","src":84,"more_decls":null}{"doc_comment":"flags for endianness conversion:","pl":"const END = 0xd0","src":88,"more_decls":null}{"doc_comment":"convert to little-endian */","pl":"const TO_LE = 0x00","src":91,"more_decls":null}{"doc_comment":"convert to big-endian","pl":"const TO_BE = 0x08","src":94,"more_decls":null}{"pl":"const FROM_LE = TO_LE","src":95,"more_decls":null}{"pl":"const FROM_BE = TO_BE","src":96,"more_decls":null}{"doc_comment":"jump != *","pl":"const JNE = 0x50","src":100,"more_decls":null}{"doc_comment":"LT is unsigned, '<'","pl":"const JLT = 0xa0","src":103,"more_decls":null}{"doc_comment":"LE is unsigned, '<=' *","pl":"const JLE = 0xb0","src":106,"more_decls":null}{"doc_comment":"SGT is signed '>', GT in x86","pl":"const JSGT = 0x60","src":109,"more_decls":null}{"doc_comment":"SGE is signed '>=', GE in x86","pl":"const JSGE = 0x70","src":112,"more_decls":null}{"doc_comment":"SLT is signed, '<'","pl":"const JSLT = 0xc0","src":115,"more_decls":null}{"doc_comment":"SLE is signed, '<='","pl":"const JSLE = 0xd0","src":118,"more_decls":null}{"doc_comment":"function call","pl":"const CALL = 0x80","src":121,"more_decls":null}{"doc_comment":"function return","pl":"const EXIT = 0x90","src":124,"more_decls":null}{"doc_comment":"Flag for prog_attach command. If a sub-cgroup installs some bpf program, the\nprogram in this cgroup yields to sub-cgroup program.","pl":"const F_ALLOW_OVERRIDE = 0x1","src":128,"more_decls":null}{"doc_comment":"Flag for prog_attach command. If a sub-cgroup installs some bpf program,\nthat cgroup program gets run in addition to the program in this cgroup.","pl":"const F_ALLOW_MULTI = 0x2","src":132,"more_decls":null}{"doc_comment":"Flag for prog_attach command.","pl":"const F_REPLACE = 0x4","src":135,"more_decls":null}{"doc_comment":"If BPF_F_STRICT_ALIGNMENT is used in BPF_PROG_LOAD command, the verifier\nwill perform strict alignment checking as if the kernel has been built with\nCONFIG_EFFICIENT_UNALIGNED_ACCESS not set, and NET_IP_ALIGN defined to 2.","pl":"const F_STRICT_ALIGNMENT = 0x1","src":140,"more_decls":null}{"doc_comment":"If BPF_F_ANY_ALIGNMENT is used in BPF_PROF_LOAD command, the verifier will\nallow any alignment whatsoever.  On platforms with strict alignment\nrequirements for loads ands stores (such as sparc and mips) the verifier\nvalidates that all loads and stores provably follow this requirement.  This\nflag turns that checking and enforcement off.\n\nIt is mostly used for testing when we want to validate the context and\nmemory access aspects of the verifier, but because of an unaligned access\nthe alignment check would trigger before the one we are interested in.","pl":"const F_ANY_ALIGNMENT = 0x2","src":151,"more_decls":null}{"doc_comment":"BPF_F_TEST_RND_HI32 is used in BPF_PROG_LOAD command for testing purpose.\nVerifier does sub-register def/use analysis and identifies instructions\nwhose def only matters for low 32-bit, high 32-bit is never referenced later\nthrough implicit zero extension. Therefore verifier notifies JIT back-ends\nthat it is safe to ignore clearing high 32-bit for these instructions. This\nsaves some back-ends a lot of code-gen. However such optimization is not\nnecessary on some arches, for example x86_64, arm64 etc, whose JIT back-ends\nhence hasn't used verifier's analysis result. But, we really want to have a\nway to be able to verify the correctness of the described optimization on\nx86_64 on which testsuites are frequently exercised.\n\nSo, this flag is introduced. Once it is set, verifier will randomize high\n32-bit for those instructions who has been identified as safe to ignore\nthem.  Then, if verifier is not doing correct analysis, such randomization\nwill regress tests to expose bugs.","pl":"const F_TEST_RND_HI32 = 0x4","src":168,"more_decls":null}{"doc_comment":"When BPF ldimm64's insn[0].src_reg != 0 then this can have two extensions:\ninsn[0].src_reg:  BPF_PSEUDO_MAP_FD   BPF_PSEUDO_MAP_VALUE\ninsn[0].imm:      map fd              map fd\ninsn[1].imm:      0                   offset into value\ninsn[0].off:      0                   0\ninsn[1].off:      0                   0\nldimm64 rewrite:  address of map      address of map[0]+offset\nverifier type:    CONST_PTR_TO_MAP    PTR_TO_MAP_VALUE","pl":"const PSEUDO_MAP_FD = 1","src":178,"more_decls":null}{"pl":"const PSEUDO_MAP_VALUE = 2","src":179,"more_decls":null}{"doc_comment":"when bpf_call->src_reg == BPF_PSEUDO_CALL, bpf_call->imm == pc-relative\noffset to another bpf function","pl":"const PSEUDO_CALL = 1","src":183,"more_decls":null}{"doc_comment":"flag for BPF_MAP_UPDATE_ELEM command. create new element or update existing","pl":"const ANY = 0","src":186,"more_decls":null}{"doc_comment":"flag for BPF_MAP_UPDATE_ELEM command. create new element if it didn't exist","pl":"const NOEXIST = 1","src":189,"more_decls":null}{"doc_comment":"flag for BPF_MAP_UPDATE_ELEM command. update existing element","pl":"const EXIST = 2","src":192,"more_decls":null}{"doc_comment":"flag for BPF_MAP_UPDATE_ELEM command. spin_lock-ed map_lookup/map_update","pl":"const F_LOCK = 4","src":195,"more_decls":null}{"doc_comment":"flag for BPF_MAP_CREATE command */","pl":"const BPF_F_NO_PREALLOC = 0x1","src":198,"more_decls":null}{"doc_comment":"flag for BPF_MAP_CREATE command. Instead of having one common LRU list in\nthe BPF_MAP_TYPE_LRU_[PERCPU_]HASH map, use a percpu LRU list which can\nscale and perform better.  Note, the LRU nodes (including free nodes) cannot\nbe moved across different LRU lists.","pl":"const BPF_F_NO_COMMON_LRU = 0x2","src":204,"more_decls":null}{"doc_comment":"flag for BPF_MAP_CREATE command. Specify numa node during map creation","pl":"const BPF_F_NUMA_NODE = 0x4","src":207,"more_decls":null}{"doc_comment":"flag for BPF_MAP_CREATE command. Flags for BPF object read access from\nsyscall side","pl":"const BPF_F_RDONLY = 0x8","src":211,"more_decls":null}{"doc_comment":"flag for BPF_MAP_CREATE command. Flags for BPF object write access from\nsyscall side","pl":"const BPF_F_WRONLY = 0x10","src":215,"more_decls":null}{"doc_comment":"flag for BPF_MAP_CREATE command. Flag for stack_map, store build_id+offset\ninstead of pointer","pl":"const BPF_F_STACK_BUILD_ID = 0x20","src":219,"more_decls":null}{"doc_comment":"flag for BPF_MAP_CREATE command. Zero-initialize hash function seed. This\nshould only be used for testing.","pl":"const BPF_F_ZERO_SEED = 0x40","src":223,"more_decls":null}{"doc_comment":"flag for BPF_MAP_CREATE command Flags for accessing BPF object from program\nside.","pl":"const BPF_F_RDONLY_PROG = 0x80","src":227,"more_decls":null}{"doc_comment":"flag for BPF_MAP_CREATE command. Flags for accessing BPF object from program\nside.","pl":"const BPF_F_WRONLY_PROG = 0x100","src":231,"more_decls":null}{"doc_comment":"flag for BPF_MAP_CREATE command. Clone map from listener for newly accepted\nsocket","pl":"const BPF_F_CLONE = 0x200","src":235,"more_decls":null}{"doc_comment":"flag for BPF_MAP_CREATE command. Enable memory-mapping BPF map","pl":"const BPF_F_MMAPABLE = 0x400","src":238,"more_decls":null}]