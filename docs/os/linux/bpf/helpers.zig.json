[{"pl":"const map_lookup_elem = @intToPtr(fn (map: *const kern.MapDef, key: ?*const c_void) ?*c_void, 1)","src":13,"more_decls":null}{"pl":"const map_update_elem = @intToPtr(fn (map: *const kern.MapDef, key: ?*const c_void, value: ?*const c_void, flags: u64) c_long, 2)","src":14,"more_decls":null}{"pl":"const map_delete_elem = @intToPtr(fn (map: *const kern.MapDef, key: ?*const c_void) c_long, 3)","src":15,"more_decls":null}{"pl":"const probe_read = @intToPtr(fn (dst: ?*c_void, size: u32, unsafe_ptr: ?*const c_void) c_long, 4)","src":16,"more_decls":null}{"pl":"const ktime_get_ns = @intToPtr(fn () u64, 5)","src":17,"more_decls":null}{"pl":"const trace_printk = @intToPtr(fn (fmt: [*:0]const u8, fmt_size: u32, arg1: u64, arg2: u64, arg3: u64) c_long, 6)","src":18,"more_decls":null}{"pl":"const get_prandom_u32 = @intToPtr(fn () u32, 7)","src":19,"more_decls":null}{"pl":"const get_smp_processor_id = @intToPtr(fn () u32, 8)","src":20,"more_decls":null}{"pl":"const skb_store_bytes = @intToPtr(fn (skb: *kern.SkBuff, offset: u32, from: ?*const c_void, len: u32, flags: u64) c_long, 9)","src":21,"more_decls":null}{"pl":"const l3_csum_replace = @intToPtr(fn (skb: *kern.SkBuff, offset: u32, from: u64, to: u64, size: u64) c_long, 10)","src":22,"more_decls":null}{"pl":"const l4_csum_replace = @intToPtr(fn (skb: *kern.SkBuff, offset: u32, from: u64, to: u64, flags: u64) c_long, 11)","src":23,"more_decls":null}{"pl":"const tail_call = @intToPtr(fn (ctx: ?*c_void, prog_array_map: *const kern.MapDef, index: u32) c_long, 12)","src":24,"more_decls":null}{"pl":"const clone_redirect = @intToPtr(fn (skb: *kern.SkBuff, ifindex: u32, flags: u64) c_long, 13)","src":25,"more_decls":null}{"pl":"const get_current_pid_tgid = @intToPtr(fn () u64, 14)","src":26,"more_decls":null}{"pl":"const get_current_uid_gid = @intToPtr(fn () u64, 15)","src":27,"more_decls":null}{"pl":"const get_current_comm = @intToPtr(fn (buf: ?*c_void, size_of_buf: u32) c_long, 16)","src":28,"more_decls":null}{"pl":"const get_cgroup_classid = @intToPtr(fn (skb: *kern.SkBuff) u32, 17)","src":29,"more_decls":null}{"pl":"const skb_vlan_push = @intToPtr(fn (skb: *kern.SkBuff, vlan_proto: u16, vlan_tci: u16) c_long, 18)","src":31,"more_decls":null}{"pl":"const skb_vlan_pop = @intToPtr(fn (skb: *kern.SkBuff) c_long, 19)","src":32,"more_decls":null}{"pl":"const skb_get_tunnel_key = @intToPtr(fn (skb: *kern.SkBuff, key: *kern.TunnelKey, size: u32, flags: u64) c_long, 20)","src":33,"more_decls":null}{"pl":"const skb_set_tunnel_key = @intToPtr(fn (skb: *kern.SkBuff, key: *kern.TunnelKey, size: u32, flags: u64) c_long, 21)","src":34,"more_decls":null}{"pl":"const perf_event_read = @intToPtr(fn (map: *const kern.MapDef, flags: u64) u64, 22)","src":35,"more_decls":null}{"pl":"const redirect = @intToPtr(fn (ifindex: u32, flags: u64) c_long, 23)","src":36,"more_decls":null}{"pl":"const get_route_realm = @intToPtr(fn (skb: *kern.SkBuff) u32, 24)","src":37,"more_decls":null}{"pl":"const perf_event_output = @intToPtr(fn (ctx: ?*c_void, map: *const kern.MapDef, flags: u64, data: ?*c_void, size: u64) c_long, 25)","src":38,"more_decls":null}{"pl":"const skb_load_bytes = @intToPtr(fn (skb: ?*c_void, offset: u32, to: ?*c_void, len: u32) c_long, 26)","src":39,"more_decls":null}{"pl":"const get_stackid = @intToPtr(fn (ctx: ?*c_void, map: *const kern.MapDef, flags: u64) c_long, 27)","src":40,"more_decls":null}{"pl":"const csum_diff = @intToPtr(fn (from: *u32, from_size: u32, to: *u32, to_size: u32, seed: u32) i64, 28)","src":42,"more_decls":null}{"pl":"const skb_get_tunnel_opt = @intToPtr(fn (skb: *kern.SkBuff, opt: ?*c_void, size: u32) c_long, 29)","src":43,"more_decls":null}{"pl":"const skb_set_tunnel_opt = @intToPtr(fn (skb: *kern.SkBuff, opt: ?*c_void, size: u32) c_long, 30)","src":44,"more_decls":null}{"pl":"const skb_change_proto = @intToPtr(fn (skb: *kern.SkBuff, proto: u16, flags: u64) c_long, 31)","src":46,"more_decls":null}{"pl":"const skb_change_type = @intToPtr(fn (skb: *kern.SkBuff, skb_type: u32) c_long, 32)","src":47,"more_decls":null}{"pl":"const skb_under_cgroup = @intToPtr(fn (skb: *kern.SkBuff, map: ?*const c_void, index: u32) c_long, 33)","src":48,"more_decls":null}{"pl":"const get_hash_recalc = @intToPtr(fn (skb: *kern.SkBuff) u32, 34)","src":49,"more_decls":null}{"pl":"const get_current_task = @intToPtr(fn () u64, 35)","src":50,"more_decls":null}{"pl":"const probe_write_user = @intToPtr(fn (dst: ?*c_void, src: ?*const c_void, len: u32) c_long, 36)","src":51,"more_decls":null}{"pl":"const current_task_under_cgroup = @intToPtr(fn (map: *const kern.MapDef, index: u32) c_long, 37)","src":52,"more_decls":null}{"pl":"const skb_change_tail = @intToPtr(fn (skb: *kern.SkBuff, len: u32, flags: u64) c_long, 38)","src":53,"more_decls":null}{"pl":"const skb_pull_data = @intToPtr(fn (skb: *kern.SkBuff, len: u32) c_long, 39)","src":54,"more_decls":null}{"pl":"const csum_update = @intToPtr(fn (skb: *kern.SkBuff, csum: u32) i64, 40)","src":55,"more_decls":null}{"pl":"const set_hash_invalid = @intToPtr(fn (skb: *kern.SkBuff) void, 41)","src":56,"more_decls":null}{"pl":"const get_numa_node_id = @intToPtr(fn () c_long, 42)","src":57,"more_decls":null}{"pl":"const skb_change_head = @intToPtr(fn (skb: *kern.SkBuff, len: u32, flags: u64) c_long, 43)","src":58,"more_decls":null}{"pl":"const xdp_adjust_head = @intToPtr(fn (xdp_md: *kern.XdpMd, delta: c_int) c_long, 44)","src":59,"more_decls":null}{"pl":"const probe_read_str = @intToPtr(fn (dst: ?*c_void, size: u32, unsafe_ptr: ?*const c_void) c_long, 45)","src":60,"more_decls":null}{"pl":"const get_socket_cookie = @intToPtr(fn (ctx: ?*c_void) u64, 46)","src":61,"more_decls":null}{"pl":"const get_socket_uid = @intToPtr(fn (skb: *kern.SkBuff) u32, 47)","src":62,"more_decls":null}{"pl":"const set_hash = @intToPtr(fn (skb: *kern.SkBuff, hash: u32) c_long, 48)","src":63,"more_decls":null}{"pl":"const setsockopt = @intToPtr(fn (bpf_socket: *kern.SockOps, level: c_int, optname: c_int, optval: ?*c_void, optlen: c_int) c_long, 49)","src":64,"more_decls":null}{"pl":"const skb_adjust_room = @intToPtr(fn (skb: *kern.SkBuff, len_diff: i32, mode: u32, flags: u64) c_long, 50)","src":65,"more_decls":null}{"pl":"const redirect_map = @intToPtr(fn (map: *const kern.MapDef, key: u32, flags: u64) c_long, 51)","src":66,"more_decls":null}{"pl":"const sk_redirect_map = @intToPtr(fn (skb: *kern.SkBuff, map: *const kern.MapDef, key: u32, flags: u64) c_long, 52)","src":67,"more_decls":null}{"pl":"const sock_map_update = @intToPtr(fn (skops: *kern.SockOps, map: *const kern.MapDef, key: ?*c_void, flags: u64) c_long, 53)","src":68,"more_decls":null}{"pl":"const xdp_adjust_meta = @intToPtr(fn (xdp_md: *kern.XdpMd, delta: c_int) c_long, 54)","src":69,"more_decls":null}{"pl":"const perf_event_read_value = @intToPtr(fn (map: *const kern.MapDef, flags: u64, buf: *kern.PerfEventValue, buf_size: u32) c_long, 55)","src":70,"more_decls":null}{"pl":"const perf_prog_read_value = @intToPtr(fn (ctx: *kern.PerfEventData, buf: *kern.PerfEventValue, buf_size: u32) c_long, 56)","src":71,"more_decls":null}{"pl":"const getsockopt = @intToPtr(fn (bpf_socket: ?*c_void, level: c_int, optname: c_int, optval: ?*c_void, optlen: c_int) c_long, 57)","src":72,"more_decls":null}{"pl":"const override_return = @intToPtr(fn (regs: *PtRegs, rc: u64) c_long, 58)","src":73,"more_decls":null}{"pl":"const sock_ops_cb_flags_set = @intToPtr(fn (bpf_sock: *kern.SockOps, argval: c_int) c_long, 59)","src":74,"more_decls":null}{"pl":"const msg_redirect_map = @intToPtr(fn (msg: *kern.SkMsgMd, map: *const kern.MapDef, key: u32, flags: u64) c_long, 60)","src":75,"more_decls":null}{"pl":"const msg_apply_bytes = @intToPtr(fn (msg: *kern.SkMsgMd, bytes: u32) c_long, 61)","src":76,"more_decls":null}{"pl":"const msg_cork_bytes = @intToPtr(fn (msg: *kern.SkMsgMd, bytes: u32) c_long, 62)","src":77,"more_decls":null}{"pl":"const msg_pull_data = @intToPtr(fn (msg: *kern.SkMsgMd, start: u32, end: u32, flags: u64) c_long, 63)","src":78,"more_decls":null}{"pl":"const bind = @intToPtr(fn (ctx: *kern.BpfSockAddr, addr: *kern.SockAddr, addr_len: c_int) c_long, 64)","src":79,"more_decls":null}{"pl":"const xdp_adjust_tail = @intToPtr(fn (xdp_md: *kern.XdpMd, delta: c_int) c_long, 65)","src":80,"more_decls":null}{"pl":"const skb_get_xfrm_state = @intToPtr(fn (skb: *kern.SkBuff, index: u32, xfrm_state: *kern.XfrmState, size: u32, flags: u64) c_long, 66)","src":81,"more_decls":null}{"pl":"const get_stack = @intToPtr(fn (ctx: ?*c_void, buf: ?*c_void, size: u32, flags: u64) c_long, 67)","src":82,"more_decls":null}{"pl":"const skb_load_bytes_relative = @intToPtr(fn (skb: ?*const c_void, offset: u32, to: ?*c_void, len: u32, start_header: u32) c_long, 68)","src":83,"more_decls":null}{"pl":"const fib_lookup = @intToPtr(fn (ctx: ?*c_void, params: *kern.FibLookup, plen: c_int, flags: u32) c_long, 69)","src":84,"more_decls":null}{"pl":"const sock_hash_update = @intToPtr(fn (skops: *kern.SockOps, map: *const kern.MapDef, key: ?*c_void, flags: u64) c_long, 70)","src":85,"more_decls":null}{"pl":"const msg_redirect_hash = @intToPtr(fn (msg: *kern.SkMsgMd, map: *const kern.MapDef, key: ?*c_void, flags: u64) c_long, 71)","src":86,"more_decls":null}{"pl":"const sk_redirect_hash = @intToPtr(fn (skb: *kern.SkBuff, map: *const kern.MapDef, key: ?*c_void, flags: u64) c_long, 72)","src":87,"more_decls":null}{"pl":"const lwt_push_encap = @intToPtr(fn (skb: *kern.SkBuff, typ: u32, hdr: ?*c_void, len: u32) c_long, 73)","src":88,"more_decls":null}{"pl":"const lwt_seg6_store_bytes = @intToPtr(fn (skb: *kern.SkBuff, offset: u32, from: ?*const c_void, len: u32) c_long, 74)","src":89,"more_decls":null}{"pl":"const lwt_seg6_adjust_srh = @intToPtr(fn (skb: *kern.SkBuff, offset: u32, delta: i32) c_long, 75)","src":90,"more_decls":null}{"pl":"const lwt_seg6_action = @intToPtr(fn (skb: *kern.SkBuff, action: u32, param: ?*c_void, param_len: u32) c_long, 76)","src":91,"more_decls":null}{"pl":"const rc_repeat = @intToPtr(fn (ctx: ?*c_void) c_long, 77)","src":92,"more_decls":null}{"pl":"const rc_keydown = @intToPtr(fn (ctx: ?*c_void, protocol: u32, scancode: u64, toggle: u32) c_long, 78)","src":93,"more_decls":null}{"pl":"const skb_cgroup_id = @intToPtr(fn (skb: *kern.SkBuff) u64, 79)","src":94,"more_decls":null}{"pl":"const get_current_cgroup_id = @intToPtr(fn () u64, 80)","src":95,"more_decls":null}{"pl":"const get_local_storage = @intToPtr(fn (map: ?*c_void, flags: u64) ?*c_void, 81)","src":96,"more_decls":null}{"pl":"const sk_select_reuseport = @intToPtr(fn (reuse: *kern.SkReusePortMd, map: *const kern.MapDef, key: ?*c_void, flags: u64) c_long, 82)","src":97,"more_decls":null}{"pl":"const skb_ancestor_cgroup_id = @intToPtr(fn (skb: *kern.SkBuff, ancestor_level: c_int) u64, 83)","src":98,"more_decls":null}{"pl":"const sk_lookup_tcp = @intToPtr(fn (ctx: ?*c_void, tuple: *kern.SockTuple, tuple_size: u32, netns: u64, flags: u64) ?*kern.Sock, 84)","src":99,"more_decls":null}{"pl":"const sk_lookup_udp = @intToPtr(fn (ctx: ?*c_void, tuple: *kern.SockTuple, tuple_size: u32, netns: u64, flags: u64) ?*kern.Sock, 85)","src":100,"more_decls":null}{"pl":"const sk_release = @intToPtr(fn (sock: *kern.Sock) c_long, 86)","src":101,"more_decls":null}{"pl":"const map_push_elem = @intToPtr(fn (map: *const kern.MapDef, value: ?*const c_void, flags: u64) c_long, 87)","src":102,"more_decls":null}{"pl":"const map_pop_elem = @intToPtr(fn (map: *const kern.MapDef, value: ?*c_void) c_long, 88)","src":103,"more_decls":null}{"pl":"const map_peek_elem = @intToPtr(fn (map: *const kern.MapDef, value: ?*c_void) c_long, 89)","src":104,"more_decls":null}{"pl":"const msg_push_data = @intToPtr(fn (msg: *kern.SkMsgMd, start: u32, len: u32, flags: u64) c_long, 90)","src":105,"more_decls":null}{"pl":"const msg_pop_data = @intToPtr(fn (msg: *kern.SkMsgMd, start: u32, len: u32, flags: u64) c_long, 91)","src":106,"more_decls":null}{"pl":"const rc_pointer_rel = @intToPtr(fn (ctx: ?*c_void, rel_x: i32, rel_y: i32) c_long, 92)","src":107,"more_decls":null}{"pl":"const spin_lock = @intToPtr(fn (lock: *kern.SpinLock) c_long, 93)","src":108,"more_decls":null}{"pl":"const spin_unlock = @intToPtr(fn (lock: *kern.SpinLock) c_long, 94)","src":109,"more_decls":null}{"pl":"const sk_fullsock = @intToPtr(fn (sk: *kern.Sock) ?*SkFullSock, 95)","src":110,"more_decls":null}{"pl":"const tcp_sock = @intToPtr(fn (sk: *kern.Sock) ?*kern.TcpSock, 96)","src":111,"more_decls":null}{"pl":"const skb_ecn_set_ce = @intToPtr(fn (skb: *kern.SkBuff) c_long, 97)","src":112,"more_decls":null}{"pl":"const get_listener_sock = @intToPtr(fn (sk: *kern.Sock) ?*kern.Sock, 98)","src":113,"more_decls":null}{"pl":"const skc_lookup_tcp = @intToPtr(fn (ctx: ?*c_void, tuple: *kern.SockTuple, tuple_size: u32, netns: u64, flags: u64) ?*kern.Sock, 99)","src":114,"more_decls":null}{"pl":"const tcp_check_syncookie = @intToPtr(fn (sk: *kern.Sock, iph: ?*c_void, iph_len: u32, th: *TcpHdr, th_len: u32) c_long, 100)","src":115,"more_decls":null}{"pl":"const sysctl_get_name = @intToPtr(fn (ctx: *kern.SysCtl, buf: ?*u8, buf_len: c_ulong, flags: u64) c_long, 101)","src":116,"more_decls":null}{"pl":"const sysctl_get_current_value = @intToPtr(fn (ctx: *kern.SysCtl, buf: ?*u8, buf_len: c_ulong) c_long, 102)","src":117,"more_decls":null}{"pl":"const sysctl_get_new_value = @intToPtr(fn (ctx: *kern.SysCtl, buf: ?*u8, buf_len: c_ulong) c_long, 103)","src":118,"more_decls":null}{"pl":"const sysctl_set_new_value = @intToPtr(fn (ctx: *kern.SysCtl, buf: ?*const u8, buf_len: c_ulong) c_long, 104)","src":119,"more_decls":null}{"pl":"const strtol = @intToPtr(fn (buf: *const u8, buf_len: c_ulong, flags: u64, res: *c_long) c_long, 105)","src":120,"more_decls":null}{"pl":"const strtoul = @intToPtr(fn (buf: *const u8, buf_len: c_ulong, flags: u64, res: *c_ulong) c_long, 106)","src":121,"more_decls":null}{"pl":"const sk_storage_get = @intToPtr(fn (map: *const kern.MapDef, sk: *kern.Sock, value: ?*c_void, flags: u64) ?*c_void, 107)","src":122,"more_decls":null}{"pl":"const sk_storage_delete = @intToPtr(fn (map: *const kern.MapDef, sk: *kern.Sock) c_long, 108)","src":123,"more_decls":null}{"pl":"const send_signal = @intToPtr(fn (sig: u32) c_long, 109)","src":124,"more_decls":null}{"pl":"const tcp_gen_syncookie = @intToPtr(fn (sk: *kern.Sock, iph: ?*c_void, iph_len: u32, th: *TcpHdr, th_len: u32) i64, 110)","src":125,"more_decls":null}{"pl":"const skb_output = @intToPtr(fn (ctx: ?*c_void, map: *const kern.MapDef, flags: u64, data: ?*c_void, size: u64) c_long, 111)","src":126,"more_decls":null}{"pl":"const probe_read_user = @intToPtr(fn (dst: ?*c_void, size: u32, unsafe_ptr: ?*const c_void) c_long, 112)","src":127,"more_decls":null}{"pl":"const probe_read_kernel = @intToPtr(fn (dst: ?*c_void, size: u32, unsafe_ptr: ?*const c_void) c_long, 113)","src":128,"more_decls":null}{"pl":"const probe_read_user_str = @intToPtr(fn (dst: ?*c_void, size: u32, unsafe_ptr: ?*const c_void) c_long, 114)","src":129,"more_decls":null}{"pl":"const probe_read_kernel_str = @intToPtr(fn (dst: ?*c_void, size: u32, unsafe_ptr: ?*const c_void) c_long, 115)","src":130,"more_decls":null}{"pl":"const tcp_send_ack = @intToPtr(fn (tp: ?*c_void, rcv_nxt: u32) c_long, 116)","src":131,"more_decls":null}{"pl":"const send_signal_thread = @intToPtr(fn (sig: u32) c_long, 117)","src":132,"more_decls":null}{"pl":"const jiffies64 = @intToPtr(fn () u64, 118)","src":133,"more_decls":null}{"pl":"const read_branch_records = @intToPtr(fn (ctx: *kern.PerfEventData, buf: ?*c_void, size: u32, flags: u64) c_long, 119)","src":134,"more_decls":null}{"pl":"const get_ns_current_pid_tgid = @intToPtr(fn (dev: u64, ino: u64, nsdata: *kern.PidNsInfo, size: u32) c_long, 120)","src":135,"more_decls":null}{"pl":"const xdp_output = @intToPtr(fn (ctx: ?*c_void, map: *const kern.MapDef, flags: u64, data: ?*c_void, size: u64) c_long, 121)","src":136,"more_decls":null}{"pl":"const get_netns_cookie = @intToPtr(fn (ctx: ?*c_void) u64, 122)","src":137,"more_decls":null}{"pl":"const get_current_ancestor_cgroup_id = @intToPtr(fn (ancestor_level: c_int) u64, 123)","src":138,"more_decls":null}{"pl":"const sk_assign = @intToPtr(fn (skb: *kern.SkBuff, sk: *kern.Sock, flags: u64) c_long, 124)","src":139,"more_decls":null}{"pl":"const ktime_get_boot_ns = @intToPtr(fn () u64, 125)","src":140,"more_decls":null}{"pl":"const seq_printf = @intToPtr(fn (m: *kern.SeqFile, fmt: ?*const u8, fmt_size: u32, data: ?*const c_void, data_len: u32) c_long, 126)","src":141,"more_decls":null}{"pl":"const seq_write = @intToPtr(fn (m: *kern.SeqFile, data: ?*const u8, len: u32) c_long, 127)","src":142,"more_decls":null}{"pl":"const sk_cgroup_id = @intToPtr(fn (sk: *kern.BpfSock) u64, 128)","src":143,"more_decls":null}{"pl":"const sk_ancestor_cgroup_id = @intToPtr(fn (sk: *kern.BpfSock, ancestor_level: c_long) u64, 129)","src":144,"more_decls":null}{"pl":"const ringbuf_output = @intToPtr(fn (ringbuf: ?*c_void, data: ?*c_void, size: u64, flags: u64) ?*c_void, 130)","src":145,"more_decls":null}{"pl":"const ringbuf_reserve = @intToPtr(fn (ringbuf: ?*c_void, size: u64, flags: u64) ?*c_void, 131)","src":146,"more_decls":null}{"pl":"const ringbuf_submit = @intToPtr(fn (data: ?*c_void, flags: u64) void, 132)","src":147,"more_decls":null}{"pl":"const ringbuf_discard = @intToPtr(fn (data: ?*c_void, flags: u64) void, 133)","src":148,"more_decls":null}{"pl":"const ringbuf_query = @intToPtr(fn (ringbuf: ?*c_void, flags: u64) u64, 134)","src":149,"more_decls":null}{"pl":"const csum_level = @intToPtr(fn (skb: *kern.SkBuff, level: u64) c_long, 134)","src":150,"more_decls":null}{"pl":"const skc_to_tcp6_sock = @intToPtr(fn (sk: ?*c_void) ?*kern.Tcp6Sock, 135)","src":151,"more_decls":null}{"pl":"const skc_to_tcp_sock = @intToPtr(fn (sk: ?*c_void) ?*kern.TcpSock, 136)","src":152,"more_decls":null}{"pl":"const skc_to_tcp_timewait_sock = @intToPtr(fn (sk: ?*c_void) ?*kern.TcpTimewaitSock, 137)","src":153,"more_decls":null}{"pl":"const skc_to_tcp_request_sock = @intToPtr(fn (sk: ?*c_void) ?*kern.TcpRequestSock, 138)","src":154,"more_decls":null}{"pl":"const skc_to_udp6_sock = @intToPtr(fn (sk: ?*c_void) ?*kern.Udp6Sock, 139)","src":155,"more_decls":null}{"pl":"const get_task_stack = @intToPtr(fn (task: ?*c_void, buf: ?*c_void, size: u32, flags: u64) c_long, 140)","src":156,"more_decls":null}]