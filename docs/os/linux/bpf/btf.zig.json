[{"doc_comment":"All offsets are in bytes relative to the end of this header","pl":"pub const Header = packed struct ","src":11,"more_decls":{"pl":"magic: u16","src":12,"more_decls":null}{"pl":"version: u8","src":13,"more_decls":null}{"pl":"flags: u8","src":14,"more_decls":null}{"pl":"hdr_len: u32","src":15,"more_decls":null}{"doc_comment":"offset of type section","pl":"type_off: u32","src":18,"more_decls":null}{"doc_comment":"length of type section","pl":"type_len: u32","src":21,"more_decls":null}{"doc_comment":"offset of string section","pl":"str_off: u32","src":24,"more_decls":null}{"doc_comment":"length of string section","pl":"str_len: u32","src":27,"more_decls":null}}{"pl":"pub const Type = packed struct ","src":39,"more_decls":{"pl":"name_off: u32","src":40,"more_decls":null}{"pl":"info: packed struct {\n        /// number of struct's members\n        vlen: u16,\n\n        unused_1: u8,\n        kind: Kind,\n        unused_2: u3,\n\n        /// used by Struct, Union, and Fwd\n        kind_flag: bool,\n    }","src":41,"more_decls":null}{"doc_comment":"size is used by Int, Enum, Struct, Union, and DataSec, it tells the size\nof the type it is describing\n\ntype is used by Ptr, Typedef, Volatile, Const, Restrict, Func,\nFuncProto, and Var. It is a type_id referring to another type","pl":"size_type: union { size: u32, typ: u32 }","src":58,"more_decls":null}}{"doc_comment":"For some kinds, Type is immediately followed by extra data","pl":"pub const Kind = enum","src":62,"more_decls":{"pl":"unknown","src":63,"more_decls":null}{"pl":"int","src":64,"more_decls":null}{"pl":"ptr","src":65,"more_decls":null}{"pl":"array","src":66,"more_decls":null}{"pl":"structure","src":67,"more_decls":null}{"pl":"kind_union","src":68,"more_decls":null}{"pl":"enumeration","src":69,"more_decls":null}{"pl":"fwd","src":70,"more_decls":null}{"pl":"typedef","src":71,"more_decls":null}{"pl":"kind_volatile","src":72,"more_decls":null}{"pl":"constant","src":73,"more_decls":null}{"pl":"restrict","src":74,"more_decls":null}{"pl":"func","src":75,"more_decls":null}{"pl":"funcProto","src":76,"more_decls":null}{"pl":"variable","src":77,"more_decls":null}{"pl":"dataSec","src":78,"more_decls":null}}{"doc_comment":"Int kind is followed by this struct","pl":"pub const IntInfo = packed struct ","src":82,"more_decls":{"pl":"bits: u8","src":83,"more_decls":null}{"pl":"unused: u8","src":84,"more_decls":null}{"pl":"offset: u8","src":85,"more_decls":null}{"pl":"encoding: enum(u4) {\n        signed = 1 << 0,\n        char = 1 << 1,\n        boolean = 1 << 2,\n    }","src":86,"more_decls":null}}{"doc_comment":"Enum kind is followed by this struct","pl":"pub const Enum = packed struct ","src":98,"more_decls":{"pl":"name_off: u32","src":99,"more_decls":null}{"pl":"val: i32","src":100,"more_decls":null}}{"doc_comment":"Array kind is followd by this struct","pl":"pub const Array = packed struct ","src":104,"more_decls":{"pl":"typ: u32","src":105,"more_decls":null}{"pl":"index_type: u32","src":106,"more_decls":null}{"pl":"nelems: u32","src":107,"more_decls":null}}{"doc_comment":"Struct and Union kinds are followed by multiple Member structs. The exact\nnumber is stored in vlen","pl":"pub const Member = packed struct ","src":112,"more_decls":{"pl":"name_off: u32","src":113,"more_decls":null}{"pl":"typ: u32","src":114,"more_decls":null}{"doc_comment":"if the kind_flag is set, offset contains both member bitfield size and\nbit offset, the bitfield size is set for bitfield members. If the type\ninfo kind_flag is not set, the offset contains only bit offset","pl":"offset: packed struct {\n        bit: u24,\n        bitfield_size: u8,\n    }","src":119,"more_decls":null}}{"doc_comment":"FuncProto is followed by multiple Params, the exact number is stored in vlen","pl":"pub const Param = packed struct ","src":126,"more_decls":{"pl":"name_off: u32","src":127,"more_decls":null}{"pl":"typ: u32","src":128,"more_decls":null}}{"pl":"pub const VarLinkage = enum ","src":131,"more_decls":{"pl":"static","src":132,"more_decls":null}{"pl":"global_allocated","src":133,"more_decls":null}{"pl":"global_extern","src":134,"more_decls":null}}{"pl":"pub const FuncLinkage = enum ","src":137,"more_decls":{"pl":"static","src":138,"more_decls":null}{"pl":"global","src":139,"more_decls":null}{"pl":"external","src":140,"more_decls":null}}{"doc_comment":"Var kind is followd by a single Var struct to describe additional\ninformation related to the variable such as its linkage","pl":"pub const Var = packed struct ","src":145,"more_decls":{"pl":"linkage: u32","src":146,"more_decls":null}}{"doc_comment":"Datasec kind is followed by multible VarSecInfo to describe all Var kind\ntypes it contains along with it's in-section offset as well as size.","pl":"pub const VarSecInfo = packed struct ","src":151,"more_decls":{"pl":"typ: u32","src":152,"more_decls":null}{"pl":"offset: u32","src":153,"more_decls":null}{"pl":"size: u32","src":154,"more_decls":null}}{"pl":"const ext = @import(\"ext.zig\")","src":8,"more_decls":null}{"doc_comment":"Max number of type identifiers","pl":"const max_type = 0xfffff","src":31,"more_decls":null}{"doc_comment":"Max offset into string section","pl":"const max_name_offset = 0xffffff","src":34,"more_decls":null}{"doc_comment":"Max number of struct/union/enum member of func args","pl":"const max_vlen = 0xffff","src":37,"more_decls":null}]