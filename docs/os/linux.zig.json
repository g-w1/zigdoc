[{"pl":"pub const itimerspec = extern struct ","src":1259,"more_decls":{"pl":"it_interval: timespec","src":1260,"more_decls":null}{"pl":"it_value: timespec","src":1261,"more_decls":null}}{"doc_comment":"See `std.elf` for the constants.","pl":"fn getauxval(index: usize) usize","src":40,"more_decls":null}{"doc_comment":"Get the errno from a syscall return value, or 0 for no error.","pl":"pub fn getErrno(r: usize) u12 {\n    const signed_r = @bitCast(isize, r);\n    return if (signed_r > -4096 and signed_r < 0) @intCast(u12, -signed_r) else 0;\n}","src":72,"more_decls":null}{"pl":"fn dup2(old: i32, new: i32) usize","src":77,"more_decls":null}{"pl":"pub fn dup3(old: i32, new: i32, flags: u32) usize {\n    return syscall3(.dup3, @bitCast(usize, @as(isize, old)), @bitCast(usize, @as(isize, new)), flags);\n}","src":93,"more_decls":null}{"pl":"pub fn chdir(path: [*:0]const u8) usize {\n    return syscall1(.chdir, @ptrToInt(path));\n}","src":97,"more_decls":null}{"pl":"pub fn fchdir(fd: fd_t) usize {\n    return syscall1(.fchdir, @bitCast(usize, @as(isize, fd)));\n}","src":101,"more_decls":null}{"pl":"pub fn chroot(path: [*:0]const u8) usize {\n    return syscall1(.chroot, @ptrToInt(path));\n}","src":105,"more_decls":null}{"pl":"pub fn execve(path: [*:0]const u8, argv: [*:null]const ?[*:0]const u8, envp: [*:null]const ?[*:0]const u8) usize {\n    return syscall3(.execve, @ptrToInt(path), @ptrToInt(argv), @ptrToInt(envp));\n}","src":109,"more_decls":null}{"pl":"fn fork() usize","src":113,"more_decls":null}{"doc_comment":"This must be inline, and inline call the syscall function, because if the\nchild does a return it will clobber the parent's stack.\nIt is advised to avoid this function and use clone instead, because\nthe compiler is not aware of how vfork affects control flow and you may\nsee different results in optimized builds.","pl":"pub fn vfork() callconv(.Inline) usize {\n    return @call(.{ .modifier = .always_inline }, syscall0, .{.vfork});\n}","src":128,"more_decls":null}{"pl":"pub fn futimens(fd: i32, times: *const [2]timespec) usize {\n    return utimensat(fd, null, times, 0);\n}","src":132,"more_decls":null}{"pl":"pub fn utimensat(dirfd: i32, path: ?[*:0]const u8, times: *const [2]timespec, flags: u32) usize {\n    return syscall4(.utimensat, @bitCast(usize, @as(isize, dirfd)), @ptrToInt(path), @ptrToInt(times), flags);\n}","src":136,"more_decls":null}{"pl":"fn fallocate(fd: i32, mode: i32, offset: u64, length: u64) usize","src":140,"more_decls":null}{"pl":"pub fn futex_wait(uaddr: *const i32, futex_op: u32, val: i32, timeout: ?*timespec) usize {\n    return syscall4(.futex, @ptrToInt(uaddr), futex_op, @bitCast(u32, val), @ptrToInt(timeout));\n}","src":164,"more_decls":null}{"pl":"pub fn futex_wake(uaddr: *const i32, futex_op: u32, val: i32) usize {\n    return syscall3(.futex, @ptrToInt(uaddr), futex_op, @bitCast(u32, val));\n}","src":168,"more_decls":null}{"pl":"pub fn getcwd(buf: [*]u8, size: usize) usize {\n    return syscall2(.getcwd, @ptrToInt(buf), size);\n}","src":172,"more_decls":null}{"pl":"fn getdents(fd: i32, dirp: [*]u8, len: usize) usize","src":176,"more_decls":null}{"pl":"fn getdents64(fd: i32, dirp: [*]u8, len: usize) usize","src":185,"more_decls":null}{"pl":"pub fn inotify_init1(flags: u32) usize {\n    return syscall1(.inotify_init1, flags);\n}","src":194,"more_decls":null}{"pl":"pub fn inotify_add_watch(fd: i32, pathname: [*:0]const u8, mask: u32) usize {\n    return syscall3(.inotify_add_watch, @bitCast(usize, @as(isize, fd)), @ptrToInt(pathname), mask);\n}","src":198,"more_decls":null}{"pl":"pub fn inotify_rm_watch(fd: i32, wd: i32) usize {\n    return syscall2(.inotify_rm_watch, @bitCast(usize, @as(isize, fd)), @bitCast(usize, @as(isize, wd)));\n}","src":202,"more_decls":null}{"pl":"fn readlink(noalias path: [*:0]const u8, noalias buf_ptr: [*]u8, buf_len: usize) usize","src":206,"more_decls":null}{"pl":"pub fn readlinkat(dirfd: i32, noalias path: [*:0]const u8, noalias buf_ptr: [*]u8, buf_len: usize) usize {\n    return syscall4(.readlinkat, @bitCast(usize, @as(isize, dirfd)), @ptrToInt(path), @ptrToInt(buf_ptr), buf_len);\n}","src":214,"more_decls":null}{"pl":"fn mkdir(path: [*:0]const u8, mode: u32) usize","src":218,"more_decls":null}{"pl":"pub fn mkdirat(dirfd: i32, path: [*:0]const u8, mode: u32) usize {\n    return syscall3(.mkdirat, @bitCast(usize, @as(isize, dirfd)), @ptrToInt(path), mode);\n}","src":226,"more_decls":null}{"pl":"pub fn mount(special: [*:0]const u8, dir: [*:0]const u8, fstype: [*:0]const u8, flags: u32, data: usize) usize {\n    return syscall5(.mount, @ptrToInt(special), @ptrToInt(dir), @ptrToInt(fstype), flags, data);\n}","src":230,"more_decls":null}{"pl":"pub fn umount(special: [*:0]const u8) usize {\n    return syscall2(.umount2, @ptrToInt(special), 0);\n}","src":234,"more_decls":null}{"pl":"pub fn umount2(special: [*:0]const u8, flags: u32) usize {\n    return syscall2(.umount2, @ptrToInt(special), flags);\n}","src":238,"more_decls":null}{"pl":"fn mmap(address: ?[*]u8, length: usize, prot: usize, flags: u32, fd: i32, offset: u64) usize","src":242,"more_decls":null}{"pl":"pub fn mprotect(address: [*]const u8, length: usize, protection: usize) usize {\n    return syscall3(.mprotect, @ptrToInt(address), length, protection);\n}","src":270,"more_decls":null}{"pl":"pub fn munmap(address: [*]const u8, length: usize) usize {\n    return syscall2(.munmap, @ptrToInt(address), length);\n}","src":274,"more_decls":null}{"pl":"fn poll(fds: [*]pollfd, n: nfds_t, timeout: i32) usize","src":278,"more_decls":null}{"pl":"pub fn ppoll(fds: [*]pollfd, n: nfds_t, timeout: ?*timespec, sigmask: ?*const sigset_t) usize {\n    return syscall5(.ppoll, @ptrToInt(fds), n, @ptrToInt(timeout), @ptrToInt(sigmask), NSIG / 8);\n}","src":299,"more_decls":null}{"pl":"pub fn read(fd: i32, buf: [*]u8, count: usize) usize {\n    return syscall3(.read, @bitCast(usize, @as(isize, fd)), @ptrToInt(buf), count);\n}","src":303,"more_decls":null}{"pl":"fn preadv(fd: i32, iov: [*]const iovec, count: usize, offset: u64) usize","src":307,"more_decls":null}{"pl":"fn preadv2(fd: i32, iov: [*]const iovec, count: usize, offset: u64, flags: kernel_rwf) usize","src":319,"more_decls":null}{"pl":"pub fn readv(fd: i32, iov: [*]const iovec, count: usize) usize {\n    return syscall3(.readv, @bitCast(usize, @as(isize, fd)), @ptrToInt(iov), count);\n}","src":332,"more_decls":null}{"pl":"pub fn writev(fd: i32, iov: [*]const iovec_const, count: usize) usize {\n    return syscall3(.writev, @bitCast(usize, @as(isize, fd)), @ptrToInt(iov), count);\n}","src":336,"more_decls":null}{"pl":"fn pwritev(fd: i32, iov: [*]const iovec_const, count: usize, offset: u64) usize","src":340,"more_decls":null}{"pl":"fn pwritev2(fd: i32, iov: [*]const iovec_const, count: usize, offset: u64, flags: kernel_rwf) usize","src":352,"more_decls":null}{"pl":"fn rmdir(path: [*:0]const u8) usize","src":365,"more_decls":null}{"pl":"fn symlink(existing: [*:0]const u8, new: [*:0]const u8) usize","src":373,"more_decls":null}{"pl":"pub fn symlinkat(existing: [*:0]const u8, newfd: i32, newpath: [*:0]const u8) usize {\n    return syscall3(.symlinkat, @ptrToInt(existing), @bitCast(usize, @as(isize, newfd)), @ptrToInt(newpath));\n}","src":381,"more_decls":null}{"pl":"fn pread(fd: i32, buf: [*]u8, count: usize, offset: u64) usize","src":385,"more_decls":null}{"pl":"fn access(path: [*:0]const u8, mode: u32) usize","src":419,"more_decls":null}{"pl":"pub fn faccessat(dirfd: i32, path: [*:0]const u8, mode: u32, flags: u32) usize {\n    return syscall4(.faccessat, @bitCast(usize, @as(isize, dirfd)), @ptrToInt(path), mode, flags);\n}","src":427,"more_decls":null}{"pl":"fn pipe(fd: *[2]i32) usize","src":431,"more_decls":null}{"pl":"pub fn pipe2(fd: *[2]i32, flags: u32) usize {\n    return syscall2(.pipe2, @ptrToInt(fd), flags);\n}","src":441,"more_decls":null}{"pl":"pub fn write(fd: i32, buf: [*]const u8, count: usize) usize {\n    return syscall3(.write, @bitCast(usize, @as(isize, fd)), @ptrToInt(buf), count);\n}","src":445,"more_decls":null}{"pl":"fn ftruncate(fd: i32, length: u64) usize","src":449,"more_decls":null}{"pl":"fn pwrite(fd: i32, buf: [*]const u8, count: usize, offset: u64) usize","src":477,"more_decls":null}{"pl":"fn rename(old: [*:0]const u8, new: [*:0]const u8) usize","src":512,"more_decls":null}{"pl":"fn renameat(oldfd: i32, oldpath: [*]const u8, newfd: i32, newpath: [*]const u8) usize","src":522,"more_decls":null}{"pl":"fn renameat2(oldfd: i32, oldpath: [*:0]const u8, newfd: i32, newpath: [*:0]const u8, flags: u32) usize","src":543,"more_decls":null}{"pl":"fn open(path: [*:0]const u8, flags: u32, perm: mode_t) usize","src":554,"more_decls":null}{"pl":"pub fn create(path: [*:0]const u8, perm: mode_t) usize {\n    return syscall2(.creat, @ptrToInt(path), perm);\n}","src":568,"more_decls":null}{"pl":"pub fn openat(dirfd: i32, path: [*:0]const u8, flags: u32, mode: mode_t) usize {\n    // dirfd could be negative, for example AT_FDCWD is -100\n    return syscall4(.openat, @bitCast(usize, @as(isize, dirfd)), @ptrToInt(path), flags, mode);\n}","src":572,"more_decls":null}{"doc_comment":"See also `clone` (from the arch-specific include)","pl":"pub fn clone5(flags: usize, child_stack_ptr: usize, parent_tid: *i32, child_tid: *i32, newtls: usize) usize {\n    return syscall5(.clone, flags, child_stack_ptr, @ptrToInt(parent_tid), @ptrToInt(child_tid), newtls);\n}","src":578,"more_decls":null}{"doc_comment":"See also `clone` (from the arch-specific include)","pl":"pub fn clone2(flags: u32, child_stack_ptr: usize) usize {\n    return syscall2(.clone, flags, child_stack_ptr);\n}","src":583,"more_decls":null}{"pl":"pub fn close(fd: i32) usize {\n    return syscall1(.close, @bitCast(usize, @as(isize, fd)));\n}","src":587,"more_decls":null}{"doc_comment":"Can only be called on 32 bit systems. For 64 bit see `lseek`.","pl":"fn llseek(fd: i32, offset: u64, result: ?*u64, whence: usize) usize","src":592,"more_decls":null}{"doc_comment":"Can only be called on 64 bit systems. For 32 bit see `llseek`.","pl":"pub fn lseek(fd: i32, offset: i64, whence: usize) usize {\n    return syscall3(.lseek, @bitCast(usize, @as(isize, fd)), @bitCast(usize, offset), whence);\n}","src":606,"more_decls":null}{"pl":"pub fn exit(status: i32) noreturn {\n    _ = syscall1(.exit, @bitCast(usize, @as(isize, status)));\n    unreachable;\n}","src":610,"more_decls":null}{"pl":"pub fn exit_group(status: i32) noreturn {\n    _ = syscall1(.exit_group, @bitCast(usize, @as(isize, status)));\n    unreachable;\n}","src":615,"more_decls":null}{"pl":"pub fn getrandom(buf: [*]u8, count: usize, flags: u32) usize {\n    return syscall3(.getrandom, @ptrToInt(buf), count, flags);\n}","src":620,"more_decls":null}{"pl":"pub fn kill(pid: pid_t, sig: i32) usize {\n    return syscall2(.kill, @bitCast(usize, @as(isize, pid)), @bitCast(usize, @as(isize, sig)));\n}","src":624,"more_decls":null}{"pl":"pub fn tkill(tid: pid_t, sig: i32) usize {\n    return syscall2(.tkill, @bitCast(usize, @as(isize, tid)), @bitCast(usize, @as(isize, sig)));\n}","src":628,"more_decls":null}{"pl":"pub fn tgkill(tgid: pid_t, tid: pid_t, sig: i32) usize {\n    return syscall2(.tgkill, @bitCast(usize, @as(isize, tgid)), @bitCast(usize, @as(isize, tid)), @bitCast(usize, @as(isize, sig)));\n}","src":632,"more_decls":null}{"pl":"fn link(oldpath: [*:0]const u8, newpath: [*:0]const u8, flags: i32) usize","src":636,"more_decls":null}{"pl":"fn linkat(oldfd: fd_t, oldpath: [*:0]const u8, newfd: fd_t, newpath: [*:0]const u8, flags: i32) usize","src":656,"more_decls":null}{"pl":"fn unlink(path: [*:0]const u8) usize","src":667,"more_decls":null}{"pl":"pub fn unlinkat(dirfd: i32, path: [*:0]const u8, flags: u32) usize {\n    return syscall3(.unlinkat, @bitCast(usize, @as(isize, dirfd)), @ptrToInt(path), flags);\n}","src":675,"more_decls":null}{"pl":"pub fn waitpid(pid: pid_t, status: *u32, flags: u32) usize {\n    return syscall4(.wait4, @bitCast(usize, @as(isize, pid)), @ptrToInt(status), flags, 0);\n}","src":679,"more_decls":null}{"pl":"pub fn fcntl(fd: fd_t, cmd: i32, arg: usize) usize {\n    return syscall3(.fcntl, @bitCast(usize, @as(isize, fd)), @bitCast(usize, @as(isize, cmd)), arg);\n}","src":683,"more_decls":null}{"pl":"pub fn flock(fd: fd_t, operation: i32) usize {\n    return syscall2(.flock, @bitCast(usize, @as(isize, fd)), @bitCast(usize, @as(isize, operation)));\n}","src":687,"more_decls":null}{"pl":"fn clock_gettime(clk_id: i32, tp: *timespec) usize","src":696,"more_decls":null}{"pl":"pub fn clock_getres(clk_id: i32, tp: *timespec) usize {\n    return syscall2(.clock_getres, @bitCast(usize, @as(isize, clk_id)), @ptrToInt(tp));\n}","src":724,"more_decls":null}{"pl":"pub fn clock_settime(clk_id: i32, tp: *const timespec) usize {\n    return syscall2(.clock_settime, @bitCast(usize, @as(isize, clk_id)), @ptrToInt(tp));\n}","src":728,"more_decls":null}{"pl":"pub fn gettimeofday(tv: *timeval, tz: *timezone) usize {\n    return syscall2(.gettimeofday, @ptrToInt(tv), @ptrToInt(tz));\n}","src":732,"more_decls":null}{"pl":"pub fn settimeofday(tv: *const timeval, tz: *const timezone) usize {\n    return syscall2(.settimeofday, @ptrToInt(tv), @ptrToInt(tz));\n}","src":736,"more_decls":null}{"pl":"pub fn nanosleep(req: *const timespec, rem: ?*timespec) usize {\n    return syscall2(.nanosleep, @ptrToInt(req), @ptrToInt(rem));\n}","src":740,"more_decls":null}{"pl":"fn setuid(uid: uid_t) usize","src":744,"more_decls":null}{"pl":"fn setgid(gid: gid_t) usize","src":752,"more_decls":null}{"pl":"fn setreuid(ruid: uid_t, euid: uid_t) usize","src":760,"more_decls":null}{"pl":"fn setregid(rgid: gid_t, egid: gid_t) usize","src":768,"more_decls":null}{"pl":"fn getuid() uid_t","src":776,"more_decls":null}{"pl":"fn getgid() gid_t","src":784,"more_decls":null}{"pl":"fn geteuid() uid_t","src":792,"more_decls":null}{"pl":"fn getegid() gid_t","src":800,"more_decls":null}{"pl":"fn seteuid(euid: uid_t) usize","src":808,"more_decls":null}{"pl":"fn setegid(egid: gid_t) usize","src":819,"more_decls":null}{"pl":"fn getresuid(ruid: *uid_t, euid: *uid_t, suid: *uid_t) usize","src":830,"more_decls":null}{"pl":"fn getresgid(rgid: *gid_t, egid: *gid_t, sgid: *gid_t) usize","src":838,"more_decls":null}{"pl":"fn setresuid(ruid: uid_t, euid: uid_t, suid: uid_t) usize","src":846,"more_decls":null}{"pl":"fn setresgid(rgid: gid_t, egid: gid_t, sgid: gid_t) usize","src":854,"more_decls":null}{"pl":"fn getgroups(size: usize, list: *gid_t) usize","src":862,"more_decls":null}{"pl":"fn setgroups(size: usize, list: *const gid_t) usize","src":870,"more_decls":null}{"pl":"pub fn getpid() pid_t {\n    return @bitCast(pid_t, @truncate(u32, syscall0(.getpid)));\n}","src":878,"more_decls":null}{"pl":"pub fn gettid() pid_t {\n    return @bitCast(pid_t, @truncate(u32, syscall0(.gettid)));\n}","src":882,"more_decls":null}{"pl":"pub fn sigprocmask(flags: u32, noalias set: ?*const sigset_t, noalias oldset: ?*sigset_t) usize {\n    return syscall4(.rt_sigprocmask, flags, @ptrToInt(set), @ptrToInt(oldset), NSIG / 8);\n}","src":886,"more_decls":null}{"pl":"fn sigaction(sig: u6, noalias act: ?*const Sigaction, noalias oact: ?*Sigaction) usize","src":890,"more_decls":null}{"pl":"fn sigaddset(set: *sigset_t, sig: u6) void","src":931,"more_decls":null}{"pl":"pub fn sigismember(set: *const sigset_t, sig: u6) bool {\n    const s = sig - 1;\n    return ((set.*)[@intCast(usize, s) / usize_bits] & (@intCast(usize, 1) << (s & (usize_bits - 1)))) != 0;\n}","src":939,"more_decls":null}{"pl":"pub fn getsockname(fd: i32, noalias addr: *sockaddr, noalias len: *socklen_t) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_getsockname, &[3]usize{ @bitCast(usize, @as(isize, fd)), @ptrToInt(addr), @ptrToInt(len) });\n    }\n    return syscall3(.getsockname, @bitCast(usize, @as(isize, fd)), @ptrToInt(addr), @ptrToInt(len));\n}","src":944,"more_decls":null}{"pl":"pub fn getpeername(fd: i32, noalias addr: *sockaddr, noalias len: *socklen_t) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_getpeername, &[3]usize{ @bitCast(usize, @as(isize, fd)), @ptrToInt(addr), @ptrToInt(len) });\n    }\n    return syscall3(.getpeername, @bitCast(usize, @as(isize, fd)), @ptrToInt(addr), @ptrToInt(len));\n}","src":951,"more_decls":null}{"pl":"pub fn socket(domain: u32, socket_type: u32, protocol: u32) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_socket, &[3]usize{ domain, socket_type, protocol });\n    }\n    return syscall3(.socket, domain, socket_type, protocol);\n}","src":958,"more_decls":null}{"pl":"pub fn setsockopt(fd: i32, level: u32, optname: u32, optval: [*]const u8, optlen: socklen_t) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_setsockopt, &[5]usize{ @bitCast(usize, @as(isize, fd)), level, optname, @ptrToInt(optval), @intCast(usize, optlen) });\n    }\n    return syscall5(.setsockopt, @bitCast(usize, @as(isize, fd)), level, optname, @ptrToInt(optval), @intCast(usize, optlen));\n}","src":965,"more_decls":null}{"pl":"pub fn getsockopt(fd: i32, level: u32, optname: u32, noalias optval: [*]u8, noalias optlen: *socklen_t) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_getsockopt, &[5]usize{ @bitCast(usize, @as(isize, fd)), level, optname, @ptrToInt(optval), @ptrToInt(optlen) });\n    }\n    return syscall5(.getsockopt, @bitCast(usize, @as(isize, fd)), level, optname, @ptrToInt(optval), @ptrToInt(optlen));\n}","src":972,"more_decls":null}{"pl":"pub fn sendmsg(fd: i32, msg: *const msghdr_const, flags: u32) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_sendmsg, &[3]usize{ @bitCast(usize, @as(isize, fd)), @ptrToInt(msg), flags });\n    }\n    return syscall3(.sendmsg, @bitCast(usize, @as(isize, fd)), @ptrToInt(msg), flags);\n}","src":979,"more_decls":null}{"pl":"fn sendmmsg(fd: i32, msgvec: [*]mmsghdr_const, vlen: u32, flags: u32) usize","src":986,"more_decls":null}{"pl":"pub fn connect(fd: i32, addr: *const c_void, len: socklen_t) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_connect, &[3]usize{ @bitCast(usize, @as(isize, fd)), @ptrToInt(addr), len });\n    }\n    return syscall3(.connect, @bitCast(usize, @as(isize, fd)), @ptrToInt(addr), len);\n}","src":1026,"more_decls":null}{"pl":"pub fn recvmsg(fd: i32, msg: *msghdr, flags: u32) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_recvmsg, &[3]usize{ @bitCast(usize, @as(isize, fd)), @ptrToInt(msg), flags });\n    }\n    return syscall3(.recvmsg, @bitCast(usize, @as(isize, fd)), @ptrToInt(msg), flags);\n}","src":1033,"more_decls":null}{"pl":"pub fn recvfrom(fd: i32, noalias buf: [*]u8, len: usize, flags: u32, noalias addr: ?*sockaddr, noalias alen: ?*socklen_t) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_recvfrom, &[6]usize{ @bitCast(usize, @as(isize, fd)), @ptrToInt(buf), len, flags, @ptrToInt(addr), @ptrToInt(alen) });\n    }\n    return syscall6(.recvfrom, @bitCast(usize, @as(isize, fd)), @ptrToInt(buf), len, flags, @ptrToInt(addr), @ptrToInt(alen));\n}","src":1040,"more_decls":null}{"pl":"pub fn shutdown(fd: i32, how: i32) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_shutdown, &[2]usize{ @bitCast(usize, @as(isize, fd)), @bitCast(usize, @as(isize, how)) });\n    }\n    return syscall2(.shutdown, @bitCast(usize, @as(isize, fd)), @bitCast(usize, @as(isize, how)));\n}","src":1047,"more_decls":null}{"pl":"pub fn bind(fd: i32, addr: *const sockaddr, len: socklen_t) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_bind, &[3]usize{ @bitCast(usize, @as(isize, fd)), @ptrToInt(addr), @intCast(usize, len) });\n    }\n    return syscall3(.bind, @bitCast(usize, @as(isize, fd)), @ptrToInt(addr), @intCast(usize, len));\n}","src":1054,"more_decls":null}{"pl":"pub fn listen(fd: i32, backlog: u32) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_listen, &[2]usize{ @bitCast(usize, @as(isize, fd)), backlog });\n    }\n    return syscall2(.listen, @bitCast(usize, @as(isize, fd)), backlog);\n}","src":1061,"more_decls":null}{"pl":"pub fn sendto(fd: i32, buf: [*]const u8, len: usize, flags: u32, addr: ?*const sockaddr, alen: socklen_t) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_sendto, &[6]usize{ @bitCast(usize, @as(isize, fd)), @ptrToInt(buf), len, flags, @ptrToInt(addr), @intCast(usize, alen) });\n    }\n    return syscall6(.sendto, @bitCast(usize, @as(isize, fd)), @ptrToInt(buf), len, flags, @ptrToInt(addr), @intCast(usize, alen));\n}","src":1068,"more_decls":null}{"pl":"fn sendfile(outfd: i32, infd: i32, offset: ?*i64, count: usize) usize","src":1075,"more_decls":null}{"pl":"pub fn socketpair(domain: i32, socket_type: i32, protocol: i32, fd: [2]i32) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_socketpair, &[4]usize{ @intCast(usize, domain), @intCast(usize, socket_type), @intCast(usize, protocol), @ptrToInt(&fd[0]) });\n    }\n    return syscall4(.socketpair, @intCast(usize, domain), @intCast(usize, socket_type), @intCast(usize, protocol), @ptrToInt(&fd[0]));\n}","src":1095,"more_decls":null}{"pl":"pub fn accept(fd: i32, noalias addr: ?*sockaddr, noalias len: ?*socklen_t) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_accept, &[4]usize{ fd, addr, len, 0 });\n    }\n    return accept4(fd, addr, len, 0);\n}","src":1102,"more_decls":null}{"pl":"pub fn accept4(fd: i32, noalias addr: ?*sockaddr, noalias len: ?*socklen_t, flags: u32) usize {\n    if (builtin.arch == .i386) {\n        return socketcall(SC_accept4, &[4]usize{ @bitCast(usize, @as(isize, fd)), @ptrToInt(addr), @ptrToInt(len), flags });\n    }\n    return syscall4(.accept4, @bitCast(usize, @as(isize, fd)), @ptrToInt(addr), @ptrToInt(len), flags);\n}","src":1109,"more_decls":null}{"pl":"fn fstat(fd: i32, stat_buf: *kernel_stat) usize","src":1116,"more_decls":null}{"pl":"fn stat(pathname: [*:0]const u8, statbuf: *kernel_stat) usize","src":1124,"more_decls":null}{"pl":"fn lstat(pathname: [*:0]const u8, statbuf: *kernel_stat) usize","src":1132,"more_decls":null}{"pl":"fn fstatat(dirfd: i32, path: [*:0]const u8, stat_buf: *kernel_stat, flags: u32) usize","src":1140,"more_decls":null}{"pl":"fn statx(dirfd: i32, path: [*]const u8, flags: u32, mask: u32, statx_buf: *Statx) usize","src":1150,"more_decls":null}{"pl":"pub fn listxattr(path: [*:0]const u8, list: [*]u8, size: usize) usize {\n    return syscall3(.listxattr, @ptrToInt(path), @ptrToInt(list), size);\n}","src":1164,"more_decls":null}{"pl":"pub fn llistxattr(path: [*:0]const u8, list: [*]u8, size: usize) usize {\n    return syscall3(.llistxattr, @ptrToInt(path), @ptrToInt(list), size);\n}","src":1168,"more_decls":null}{"pl":"pub fn flistxattr(fd: usize, list: [*]u8, size: usize) usize {\n    return syscall3(.flistxattr, fd, @ptrToInt(list), size);\n}","src":1172,"more_decls":null}{"pl":"pub fn getxattr(path: [*:0]const u8, name: [*:0]const u8, value: [*]u8, size: usize) usize {\n    return syscall4(.getxattr, @ptrToInt(path), @ptrToInt(name), @ptrToInt(value), size);\n}","src":1176,"more_decls":null}{"pl":"pub fn lgetxattr(path: [*:0]const u8, name: [*:0]const u8, value: [*]u8, size: usize) usize {\n    return syscall4(.lgetxattr, @ptrToInt(path), @ptrToInt(name), @ptrToInt(value), size);\n}","src":1180,"more_decls":null}{"pl":"pub fn fgetxattr(fd: usize, name: [*:0]const u8, value: [*]u8, size: usize) usize {\n    return syscall4(.lgetxattr, fd, @ptrToInt(name), @ptrToInt(value), size);\n}","src":1184,"more_decls":null}{"pl":"pub fn setxattr(path: [*:0]const u8, name: [*:0]const u8, value: *const void, size: usize, flags: usize) usize {\n    return syscall5(.setxattr, @ptrToInt(path), @ptrToInt(name), @ptrToInt(value), size, flags);\n}","src":1188,"more_decls":null}{"pl":"pub fn lsetxattr(path: [*:0]const u8, name: [*:0]const u8, value: *const void, size: usize, flags: usize) usize {\n    return syscall5(.lsetxattr, @ptrToInt(path), @ptrToInt(name), @ptrToInt(value), size, flags);\n}","src":1192,"more_decls":null}{"pl":"pub fn fsetxattr(fd: usize, name: [*:0]const u8, value: *const void, size: usize, flags: usize) usize {\n    return syscall5(.fsetxattr, fd, @ptrToInt(name), @ptrToInt(value), size, flags);\n}","src":1196,"more_decls":null}{"pl":"pub fn removexattr(path: [*:0]const u8, name: [*:0]const u8) usize {\n    return syscall2(.removexattr, @ptrToInt(path), @ptrToInt(name));\n}","src":1200,"more_decls":null}{"pl":"pub fn lremovexattr(path: [*:0]const u8, name: [*:0]const u8) usize {\n    return syscall2(.lremovexattr, @ptrToInt(path), @ptrToInt(name));\n}","src":1204,"more_decls":null}{"pl":"pub fn fremovexattr(fd: usize, name: [*:0]const u8) usize {\n    return syscall2(.fremovexattr, fd, @ptrToInt(name));\n}","src":1208,"more_decls":null}{"pl":"pub fn sched_yield() usize {\n    return syscall0(.sched_yield);\n}","src":1212,"more_decls":null}{"pl":"pub fn sched_getaffinity(pid: pid_t, size: usize, set: *cpu_set_t) usize {\n    const rc = syscall3(.sched_getaffinity, @bitCast(usize, @as(isize, pid)), size, @ptrToInt(set));\n    if (@bitCast(isize, rc) < 0) return rc;\n    if (rc < size) @memset(@ptrCast([*]u8, set) + rc, 0, size - rc);\n    return 0;\n}","src":1216,"more_decls":null}{"pl":"pub fn epoll_create() usize {\n    return epoll_create1(0);\n}","src":1223,"more_decls":null}{"pl":"pub fn epoll_create1(flags: usize) usize {\n    return syscall1(.epoll_create1, flags);\n}","src":1227,"more_decls":null}{"pl":"pub fn epoll_ctl(epoll_fd: i32, op: u32, fd: i32, ev: ?*epoll_event) usize {\n    return syscall4(.epoll_ctl, @bitCast(usize, @as(isize, epoll_fd)), @intCast(usize, op), @bitCast(usize, @as(isize, fd)), @ptrToInt(ev));\n}","src":1231,"more_decls":null}{"pl":"pub fn epoll_wait(epoll_fd: i32, events: [*]epoll_event, maxevents: u32, timeout: i32) usize {\n    return epoll_pwait(epoll_fd, events, maxevents, timeout, null);\n}","src":1235,"more_decls":null}{"pl":"fn epoll_pwait(epoll_fd: i32, events: [*]epoll_event, maxevents: u32, timeout: i32, sigmask: ?*const sigset_t) usize","src":1239,"more_decls":null}{"pl":"pub fn eventfd(count: u32, flags: u32) usize {\n    return syscall2(.eventfd2, count, flags);\n}","src":1251,"more_decls":null}{"pl":"pub fn timerfd_create(clockid: i32, flags: u32) usize {\n    return syscall2(.timerfd_create, @bitCast(usize, @as(isize, clockid)), flags);\n}","src":1255,"more_decls":null}{"pl":"pub fn timerfd_gettime(fd: i32, curr_value: *itimerspec) usize {\n    return syscall2(.timerfd_gettime, @bitCast(usize, @as(isize, fd)), @ptrToInt(curr_value));\n}","src":1264,"more_decls":null}{"pl":"pub fn timerfd_settime(fd: i32, flags: u32, new_value: *const itimerspec, old_value: ?*itimerspec) usize {\n    return syscall4(.timerfd_settime, @bitCast(usize, @as(isize, fd)), flags, @ptrToInt(new_value), @ptrToInt(old_value));\n}","src":1268,"more_decls":null}{"pl":"pub fn unshare(flags: usize) usize {\n    return syscall1(.unshare, flags);\n}","src":1272,"more_decls":null}{"pl":"pub fn capget(hdrp: *cap_user_header_t, datap: *cap_user_data_t) usize {\n    return syscall2(.capget, @ptrToInt(hdrp), @ptrToInt(datap));\n}","src":1276,"more_decls":null}{"pl":"pub fn capset(hdrp: *cap_user_header_t, datap: *const cap_user_data_t) usize {\n    return syscall2(.capset, @ptrToInt(hdrp), @ptrToInt(datap));\n}","src":1280,"more_decls":null}{"pl":"pub fn sigaltstack(ss: ?*stack_t, old_ss: ?*stack_t) usize {\n    return syscall2(.sigaltstack, @ptrToInt(ss), @ptrToInt(old_ss));\n}","src":1284,"more_decls":null}{"pl":"pub fn uname(uts: *utsname) usize {\n    return syscall1(.uname, @ptrToInt(uts));\n}","src":1288,"more_decls":null}{"pl":"pub fn io_uring_setup(entries: u32, p: *io_uring_params) usize {\n    return syscall2(.io_uring_setup, entries, @ptrToInt(p));\n}","src":1292,"more_decls":null}{"pl":"pub fn io_uring_enter(fd: i32, to_submit: u32, min_complete: u32, flags: u32, sig: ?*sigset_t) usize {\n    return syscall6(.io_uring_enter, @bitCast(usize, @as(isize, fd)), to_submit, min_complete, flags, @ptrToInt(sig), NSIG / 8);\n}","src":1296,"more_decls":null}{"pl":"pub fn io_uring_register(fd: i32, opcode: IORING_REGISTER, arg: ?*const c_void, nr_args: u32) usize {\n    return syscall4(.io_uring_register, @bitCast(usize, @as(isize, fd)), @enumToInt(opcode), @ptrToInt(arg), nr_args);\n}","src":1300,"more_decls":null}{"pl":"pub fn memfd_create(name: [*:0]const u8, flags: u32) usize {\n    return syscall2(.memfd_create, @ptrToInt(name), flags);\n}","src":1304,"more_decls":null}{"pl":"pub fn getrusage(who: i32, usage: *rusage) usize {\n    return syscall2(.getrusage, @bitCast(usize, @as(isize, who)), @ptrToInt(usage));\n}","src":1308,"more_decls":null}{"pl":"pub fn tcgetattr(fd: fd_t, termios_p: *termios) usize {\n    return syscall3(.ioctl, @bitCast(usize, @as(isize, fd)), TCGETS, @ptrToInt(termios_p));\n}","src":1312,"more_decls":null}{"pl":"pub fn tcsetattr(fd: fd_t, optional_action: TCSA, termios_p: *const termios) usize {\n    return syscall3(.ioctl, @bitCast(usize, @as(isize, fd)), TCSETS + @enumToInt(optional_action), @ptrToInt(termios_p));\n}","src":1316,"more_decls":null}{"pl":"pub fn ioctl(fd: fd_t, request: u32, arg: usize) usize {\n    return syscall3(.ioctl, @bitCast(usize, @as(isize, fd)), request, arg);\n}","src":1320,"more_decls":null}{"pl":"pub fn signalfd(fd: fd_t, mask: *const sigset_t, flags: u32) usize {\n    return syscall4(.signalfd4, @bitCast(usize, @as(isize, fd)), @ptrToInt(mask), NSIG / 8, flags);\n}","src":1324,"more_decls":null}{"pl":"fn copy_file_range(fd_in: fd_t, off_in: ?*i64, fd_out: fd_t, off_out: ?*i64, len: usize, flags: u32) usize","src":1328,"more_decls":null}{"pl":"pub fn bpf(cmd: BPF.Cmd, attr: *BPF.Attr, size: u32) usize {\n    return syscall3(.bpf, @enumToInt(cmd), @ptrToInt(attr), size);\n}","src":1340,"more_decls":null}{"pl":"pub fn sync() void {\n    _ = syscall0(.sync);\n}","src":1344,"more_decls":null}{"pl":"pub fn syncfs(fd: fd_t) usize {\n    return syscall1(.syncfs, @bitCast(usize, @as(isize, fd)));\n}","src":1348,"more_decls":null}{"pl":"pub fn fsync(fd: fd_t) usize {\n    return syscall1(.fsync, @bitCast(usize, @as(isize, fd)));\n}","src":1352,"more_decls":null}{"pl":"pub fn fdatasync(fd: fd_t) usize {\n    return syscall1(.fdatasync, @bitCast(usize, @as(isize, fd)));\n}","src":1356,"more_decls":null}{"pl":"pub fn prctl(option: i32, arg2: usize, arg3: usize, arg4: usize, arg5: usize) usize {\n    return syscall5(.prctl, @bitCast(usize, @as(isize, option)), arg2, arg3, arg4, arg5);\n}","src":1360,"more_decls":null}{"pl":"pub fn getrlimit(resource: rlimit_resource, rlim: *rlimit) usize {\n    // use prlimit64 to have 64 bit limits on 32 bit platforms\n    return prlimit(0, resource, null, rlim);\n}","src":1364,"more_decls":null}{"pl":"pub fn setrlimit(resource: rlimit_resource, rlim: *const rlimit) usize {\n    // use prlimit64 to have 64 bit limits on 32 bit platforms\n    return prlimit(0, resource, rlim, null);\n}","src":1369,"more_decls":null}{"pl":"fn prlimit(pid: pid_t, resource: rlimit_resource, new_limit: ?*const rlimit, old_limit: ?*rlimit) usize","src":1374,"more_decls":null}{"pl":"pub fn madvise(address: [*]u8, len: usize, advice: u32) usize {\n    return syscall3(.madvise, @ptrToInt(address), len, advice);\n}","src":1384,"more_decls":null}{"pl":"const tls = @import(\"linux/tls.zig\")","src":32,"more_decls":null}{"pl":"const BPF = @import(\"linux/bpf.zig\")","src":33,"more_decls":null}{"doc_comment":"Set by startup code, used by `getauxval`.","pl":"var elf_aux_maybe: ?[*]std.elf.Auxv = null","src":37,"more_decls":null}]