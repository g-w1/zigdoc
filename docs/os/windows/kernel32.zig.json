[{"pl":"extern \"kernel32\" fn AddVectoredExceptionHandler(First: c_ulong, Handler: ?VECTORED_EXCEPTION_HANDLER) callconv(WINAPI) ?*c_void","src":7,"more_decls":null}{"pl":"extern \"kernel32\" fn RemoveVectoredExceptionHandler(Handle: HANDLE) callconv(WINAPI) c_ulong","src":8,"more_decls":null}{"pl":"extern \"kernel32\" fn CancelIoEx(hFile: HANDLE, lpOverlapped: ?LPOVERLAPPED) callconv(WINAPI) BOOL","src":10,"more_decls":null}{"pl":"extern \"kernel32\" fn CloseHandle(hObject: HANDLE) callconv(WINAPI) BOOL","src":12,"more_decls":null}{"pl":"extern \"kernel32\" fn CreateDirectoryW(lpPathName: [*:0]const u16, lpSecurityAttributes: ?*SECURITY_ATTRIBUTES) callconv(WINAPI) BOOL","src":14,"more_decls":null}{"pl":"extern \"kernel32\" fn SetEndOfFile(hFile: HANDLE) callconv(WINAPI) BOOL","src":15,"more_decls":null}{"pl":"extern \"kernel32\" fn CreateEventExW(\n    lpEventAttributes: ?*SECURITY_ATTRIBUTES,\n    lpName: [*:0]const u16,\n    dwFlags: DWORD,\n    dwDesiredAccess: DWORD,\n) callconv(WINAPI) ?HANDLE","src":17,"more_decls":null}{"pl":"extern \"kernel32\" fn CreateFileW(\n    lpFileName: [*:0]const u16,\n    dwDesiredAccess: DWORD,\n    dwShareMode: DWORD,\n    lpSecurityAttributes: ?LPSECURITY_ATTRIBUTES,\n    dwCreationDisposition: DWORD,\n    dwFlagsAndAttributes: DWORD,\n    hTemplateFile: ?HANDLE,\n) callconv(WINAPI) HANDLE","src":24,"more_decls":null}{"pl":"extern \"kernel32\" fn CreatePipe(\n    hReadPipe: *HANDLE,\n    hWritePipe: *HANDLE,\n    lpPipeAttributes: *const SECURITY_ATTRIBUTES,\n    nSize: DWORD,\n) callconv(WINAPI) BOOL","src":34,"more_decls":null}{"pl":"extern \"kernel32\" fn CreateProcessW(\n    lpApplicationName: ?LPWSTR,\n    lpCommandLine: LPWSTR,\n    lpProcessAttributes: ?*SECURITY_ATTRIBUTES,\n    lpThreadAttributes: ?*SECURITY_ATTRIBUTES,\n    bInheritHandles: BOOL,\n    dwCreationFlags: DWORD,\n    lpEnvironment: ?*c_void,\n    lpCurrentDirectory: ?LPWSTR,\n    lpStartupInfo: *STARTUPINFOW,\n    lpProcessInformation: *PROCESS_INFORMATION,\n) callconv(WINAPI) BOOL","src":41,"more_decls":null}{"pl":"extern \"kernel32\" fn CreateSymbolicLinkW(lpSymlinkFileName: [*:0]const u16, lpTargetFileName: [*:0]const u16, dwFlags: DWORD) callconv(WINAPI) BOOLEAN","src":54,"more_decls":null}{"pl":"extern \"kernel32\" fn CreateIoCompletionPort(FileHandle: HANDLE, ExistingCompletionPort: ?HANDLE, CompletionKey: ULONG_PTR, NumberOfConcurrentThreads: DWORD) callconv(WINAPI) ?HANDLE","src":56,"more_decls":null}{"pl":"extern \"kernel32\" fn CreateThread(lpThreadAttributes: ?LPSECURITY_ATTRIBUTES, dwStackSize: SIZE_T, lpStartAddress: LPTHREAD_START_ROUTINE, lpParameter: ?LPVOID, dwCreationFlags: DWORD, lpThreadId: ?LPDWORD) callconv(WINAPI) ?HANDLE","src":58,"more_decls":null}{"pl":"extern \"kernel32\" fn DeviceIoControl(\n    h: HANDLE,\n    dwIoControlCode: DWORD,\n    lpInBuffer: ?*const c_void,\n    nInBufferSize: DWORD,\n    lpOutBuffer: ?LPVOID,\n    nOutBufferSize: DWORD,\n    lpBytesReturned: ?*DWORD,\n    lpOverlapped: ?*OVERLAPPED,\n) callconv(WINAPI) BOOL","src":60,"more_decls":null}{"pl":"extern \"kernel32\" fn DeleteFileW(lpFileName: [*:0]const u16) callconv(WINAPI) BOOL","src":71,"more_decls":null}{"pl":"extern \"kernel32\" fn DuplicateHandle(hSourceProcessHandle: HANDLE, hSourceHandle: HANDLE, hTargetProcessHandle: HANDLE, lpTargetHandle: *HANDLE, dwDesiredAccess: DWORD, bInheritHandle: BOOL, dwOptions: DWORD) callconv(WINAPI) BOOL","src":73,"more_decls":null}{"pl":"extern \"kernel32\" fn ExitProcess(exit_code: UINT) callconv(WINAPI) noreturn","src":75,"more_decls":null}{"pl":"extern \"kernel32\" fn FindFirstFileW(lpFileName: [*:0]const u16, lpFindFileData: *WIN32_FIND_DATAW) callconv(WINAPI) HANDLE","src":77,"more_decls":null}{"pl":"extern \"kernel32\" fn FindClose(hFindFile: HANDLE) callconv(WINAPI) BOOL","src":78,"more_decls":null}{"pl":"extern \"kernel32\" fn FindNextFileW(hFindFile: HANDLE, lpFindFileData: *WIN32_FIND_DATAW) callconv(WINAPI) BOOL","src":79,"more_decls":null}{"pl":"extern \"kernel32\" fn FormatMessageW(dwFlags: DWORD, lpSource: ?LPVOID, dwMessageId: Win32Error, dwLanguageId: DWORD, lpBuffer: [*]u16, nSize: DWORD, Arguments: ?*va_list) callconv(WINAPI) DWORD","src":81,"more_decls":null}{"pl":"extern \"kernel32\" fn FreeEnvironmentStringsW(penv: [*:0]u16) callconv(WINAPI) BOOL","src":83,"more_decls":null}{"pl":"extern \"kernel32\" fn GetCommandLineA() callconv(WINAPI) LPSTR","src":85,"more_decls":null}{"pl":"extern \"kernel32\" fn GetCommandLineW() callconv(WINAPI) LPWSTR","src":86,"more_decls":null}{"pl":"extern \"kernel32\" fn GetConsoleMode(in_hConsoleHandle: HANDLE, out_lpMode: *DWORD) callconv(WINAPI) BOOL","src":88,"more_decls":null}{"pl":"extern \"kernel32\" fn GetConsoleScreenBufferInfo(hConsoleOutput: HANDLE, lpConsoleScreenBufferInfo: *CONSOLE_SCREEN_BUFFER_INFO) callconv(WINAPI) BOOL","src":90,"more_decls":null}{"pl":"extern \"kernel32\" fn FillConsoleOutputCharacterA(hConsoleOutput: HANDLE, cCharacter: TCHAR, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfCharsWritten: LPDWORD) callconv(WINAPI) BOOL","src":91,"more_decls":null}{"pl":"extern \"kernel32\" fn FillConsoleOutputAttribute(hConsoleOutput: HANDLE, wAttribute: WORD, nLength: DWORD, dwWriteCoord: COORD, lpNumberOfAttrsWritten: LPDWORD) callconv(WINAPI) BOOL","src":92,"more_decls":null}{"pl":"extern \"kernel32\" fn SetConsoleCursorPosition(hConsoleOutput: HANDLE, dwCursorPosition: COORD) callconv(WINAPI) BOOL","src":93,"more_decls":null}{"pl":"extern \"kernel32\" fn GetCurrentDirectoryW(nBufferLength: DWORD, lpBuffer: ?[*]WCHAR) callconv(WINAPI) DWORD","src":95,"more_decls":null}{"pl":"extern \"kernel32\" fn GetCurrentThread() callconv(WINAPI) HANDLE","src":97,"more_decls":null}{"pl":"extern \"kernel32\" fn GetCurrentThreadId() callconv(WINAPI) DWORD","src":98,"more_decls":null}{"pl":"extern \"kernel32\" fn GetCurrentProcess() callconv(WINAPI) HANDLE","src":100,"more_decls":null}{"pl":"extern \"kernel32\" fn GetEnvironmentStringsW() callconv(WINAPI) ?[*:0]u16","src":102,"more_decls":null}{"pl":"extern \"kernel32\" fn GetEnvironmentVariableW(lpName: LPWSTR, lpBuffer: [*]u16, nSize: DWORD) callconv(WINAPI) DWORD","src":104,"more_decls":null}{"pl":"extern \"kernel32\" fn GetExitCodeProcess(hProcess: HANDLE, lpExitCode: *DWORD) callconv(WINAPI) BOOL","src":106,"more_decls":null}{"pl":"extern \"kernel32\" fn GetFileSizeEx(hFile: HANDLE, lpFileSize: *LARGE_INTEGER) callconv(WINAPI) BOOL","src":108,"more_decls":null}{"pl":"extern \"kernel32\" fn GetFileAttributesW(lpFileName: [*]const WCHAR) callconv(WINAPI) DWORD","src":110,"more_decls":null}{"pl":"extern \"kernel32\" fn GetModuleFileNameW(hModule: ?HMODULE, lpFilename: [*]u16, nSize: DWORD) callconv(WINAPI) DWORD","src":112,"more_decls":null}{"pl":"extern \"kernel32\" fn GetModuleHandleW(lpModuleName: ?[*:0]const WCHAR) callconv(WINAPI) ?HMODULE","src":114,"more_decls":null}{"pl":"extern \"kernel32\" fn GetLastError() callconv(WINAPI) Win32Error","src":116,"more_decls":null}{"pl":"extern \"kernel32\" fn SetLastError(dwErrCode: Win32Error) callconv(WINAPI) void","src":117,"more_decls":null}{"pl":"extern \"kernel32\" fn GetFileInformationByHandle(\n    hFile: HANDLE,\n    lpFileInformation: *BY_HANDLE_FILE_INFORMATION,\n) callconv(WINAPI) BOOL","src":119,"more_decls":null}{"pl":"extern \"kernel32\" fn GetFileInformationByHandleEx(\n    in_hFile: HANDLE,\n    in_FileInformationClass: FILE_INFO_BY_HANDLE_CLASS,\n    out_lpFileInformation: *c_void,\n    in_dwBufferSize: DWORD,\n) callconv(WINAPI) BOOL","src":124,"more_decls":null}{"pl":"extern \"kernel32\" fn GetFinalPathNameByHandleW(\n    hFile: HANDLE,\n    lpszFilePath: [*]u16,\n    cchFilePath: DWORD,\n    dwFlags: DWORD,\n) callconv(WINAPI) DWORD","src":131,"more_decls":null}{"pl":"extern \"kernel32\" fn GetOverlappedResult(hFile: HANDLE, lpOverlapped: *OVERLAPPED, lpNumberOfBytesTransferred: *DWORD, bWait: BOOL) callconv(WINAPI) BOOL","src":138,"more_decls":null}{"pl":"extern \"kernel32\" fn GetProcessHeap() callconv(WINAPI) ?HANDLE","src":140,"more_decls":null}{"pl":"extern \"kernel32\" fn GetQueuedCompletionStatus(CompletionPort: HANDLE, lpNumberOfBytesTransferred: LPDWORD, lpCompletionKey: *ULONG_PTR, lpOverlapped: *?*OVERLAPPED, dwMilliseconds: DWORD) callconv(WINAPI) BOOL","src":141,"more_decls":null}{"pl":"extern \"kernel32\" fn GetSystemInfo(lpSystemInfo: *SYSTEM_INFO) callconv(WINAPI) void","src":143,"more_decls":null}{"pl":"extern \"kernel32\" fn GetSystemTimeAsFileTime(*FILETIME) callconv(WINAPI) void","src":144,"more_decls":null}{"pl":"extern \"kernel32\" fn HeapCreate(flOptions: DWORD, dwInitialSize: SIZE_T, dwMaximumSize: SIZE_T) callconv(WINAPI) ?HANDLE","src":146,"more_decls":null}{"pl":"extern \"kernel32\" fn HeapDestroy(hHeap: HANDLE) callconv(WINAPI) BOOL","src":147,"more_decls":null}{"pl":"extern \"kernel32\" fn HeapReAlloc(hHeap: HANDLE, dwFlags: DWORD, lpMem: *c_void, dwBytes: SIZE_T) callconv(WINAPI) ?*c_void","src":148,"more_decls":null}{"pl":"extern \"kernel32\" fn HeapSize(hHeap: HANDLE, dwFlags: DWORD, lpMem: *const c_void) callconv(WINAPI) SIZE_T","src":149,"more_decls":null}{"pl":"extern \"kernel32\" fn HeapCompact(hHeap: HANDLE, dwFlags: DWORD) callconv(WINAPI) SIZE_T","src":150,"more_decls":null}{"pl":"extern \"kernel32\" fn HeapSummary(hHeap: HANDLE, dwFlags: DWORD, lpSummary: LPHEAP_SUMMARY) callconv(WINAPI) BOOL","src":151,"more_decls":null}{"pl":"extern \"kernel32\" fn GetStdHandle(in_nStdHandle: DWORD) callconv(WINAPI) ?HANDLE","src":153,"more_decls":null}{"pl":"extern \"kernel32\" fn HeapAlloc(hHeap: HANDLE, dwFlags: DWORD, dwBytes: SIZE_T) callconv(WINAPI) ?*c_void","src":155,"more_decls":null}{"pl":"extern \"kernel32\" fn HeapFree(hHeap: HANDLE, dwFlags: DWORD, lpMem: *c_void) callconv(WINAPI) BOOL","src":157,"more_decls":null}{"pl":"extern \"kernel32\" fn HeapValidate(hHeap: HANDLE, dwFlags: DWORD, lpMem: ?*const c_void) callconv(WINAPI) BOOL","src":159,"more_decls":null}{"pl":"extern \"kernel32\" fn VirtualAlloc(lpAddress: ?LPVOID, dwSize: SIZE_T, flAllocationType: DWORD, flProtect: DWORD) callconv(WINAPI) ?LPVOID","src":161,"more_decls":null}{"pl":"extern \"kernel32\" fn VirtualFree(lpAddress: ?LPVOID, dwSize: SIZE_T, dwFreeType: DWORD) callconv(WINAPI) BOOL","src":162,"more_decls":null}{"pl":"extern \"kernel32\" fn MoveFileExW(\n    lpExistingFileName: [*:0]const u16,\n    lpNewFileName: [*:0]const u16,\n    dwFlags: DWORD,\n) callconv(WINAPI) BOOL","src":164,"more_decls":null}{"pl":"extern \"kernel32\" fn PostQueuedCompletionStatus(CompletionPort: HANDLE, dwNumberOfBytesTransferred: DWORD, dwCompletionKey: ULONG_PTR, lpOverlapped: ?*OVERLAPPED) callconv(WINAPI) BOOL","src":170,"more_decls":null}{"pl":"extern \"kernel32\" fn QueryPerformanceCounter(lpPerformanceCount: *LARGE_INTEGER) callconv(WINAPI) BOOL","src":172,"more_decls":null}{"pl":"extern \"kernel32\" fn QueryPerformanceFrequency(lpFrequency: *LARGE_INTEGER) callconv(WINAPI) BOOL","src":174,"more_decls":null}{"pl":"extern \"kernel32\" fn ReadDirectoryChangesW(\n    hDirectory: HANDLE,\n    lpBuffer: [*]align(@alignOf(FILE_NOTIFY_INFORMATION)) u8,\n    nBufferLength: DWORD,\n    bWatchSubtree: BOOL,\n    dwNotifyFilter: DWORD,\n    lpBytesReturned: ?*DWORD,\n    lpOverlapped: ?*OVERLAPPED,\n    lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE,\n) callconv(WINAPI) BOOL","src":176,"more_decls":null}{"pl":"extern \"kernel32\" fn ReadFile(\n    in_hFile: HANDLE,\n    out_lpBuffer: [*]u8,\n    in_nNumberOfBytesToRead: DWORD,\n    out_lpNumberOfBytesRead: ?*DWORD,\n    in_out_lpOverlapped: ?*OVERLAPPED,\n) callconv(WINAPI) BOOL","src":187,"more_decls":null}{"pl":"extern \"kernel32\" fn RemoveDirectoryW(lpPathName: [*:0]const u16) callconv(WINAPI) BOOL","src":195,"more_decls":null}{"pl":"extern \"kernel32\" fn SetConsoleTextAttribute(hConsoleOutput: HANDLE, wAttributes: WORD) callconv(WINAPI) BOOL","src":197,"more_decls":null}{"pl":"extern \"kernel32\" fn SetFilePointerEx(\n    in_fFile: HANDLE,\n    in_liDistanceToMove: LARGE_INTEGER,\n    out_opt_ldNewFilePointer: ?*LARGE_INTEGER,\n    in_dwMoveMethod: DWORD,\n) callconv(WINAPI) BOOL","src":199,"more_decls":null}{"pl":"extern \"kernel32\" fn SetFileTime(\n    hFile: HANDLE,\n    lpCreationTime: ?*const FILETIME,\n    lpLastAccessTime: ?*const FILETIME,\n    lpLastWriteTime: ?*const FILETIME,\n) callconv(WINAPI) BOOL","src":206,"more_decls":null}{"pl":"extern \"kernel32\" fn SetHandleInformation(hObject: HANDLE, dwMask: DWORD, dwFlags: DWORD) callconv(WINAPI) BOOL","src":213,"more_decls":null}{"pl":"extern \"kernel32\" fn Sleep(dwMilliseconds: DWORD) callconv(WINAPI) void","src":215,"more_decls":null}{"pl":"extern \"kernel32\" fn SwitchToThread() callconv(WINAPI) BOOL","src":217,"more_decls":null}{"pl":"extern \"kernel32\" fn TerminateProcess(hProcess: HANDLE, uExitCode: UINT) callconv(WINAPI) BOOL","src":219,"more_decls":null}{"pl":"extern \"kernel32\" fn TlsAlloc() callconv(WINAPI) DWORD","src":221,"more_decls":null}{"pl":"extern \"kernel32\" fn TlsFree(dwTlsIndex: DWORD) callconv(WINAPI) BOOL","src":223,"more_decls":null}{"pl":"extern \"kernel32\" fn WaitForSingleObject(hHandle: HANDLE, dwMilliseconds: DWORD) callconv(WINAPI) DWORD","src":225,"more_decls":null}{"pl":"extern \"kernel32\" fn WaitForSingleObjectEx(hHandle: HANDLE, dwMilliseconds: DWORD, bAlertable: BOOL) callconv(WINAPI) DWORD","src":227,"more_decls":null}{"pl":"extern \"kernel32\" fn WaitForMultipleObjects(nCount: DWORD, lpHandle: [*]const HANDLE, bWaitAll: BOOL, dwMilliseconds: DWORD) callconv(WINAPI) DWORD","src":229,"more_decls":null}{"pl":"extern \"kernel32\" fn WaitForMultipleObjectsEx(\n    nCount: DWORD,\n    lpHandle: [*]const HANDLE,\n    bWaitAll: BOOL,\n    dwMilliseconds: DWORD,\n    bAlertable: BOOL,\n) callconv(WINAPI) DWORD","src":231,"more_decls":null}{"pl":"extern \"kernel32\" fn WriteFile(\n    in_hFile: HANDLE,\n    in_lpBuffer: [*]const u8,\n    in_nNumberOfBytesToWrite: DWORD,\n    out_lpNumberOfBytesWritten: ?*DWORD,\n    in_out_lpOverlapped: ?*OVERLAPPED,\n) callconv(WINAPI) BOOL","src":239,"more_decls":null}{"pl":"extern \"kernel32\" fn WriteFileEx(hFile: HANDLE, lpBuffer: [*]const u8, nNumberOfBytesToWrite: DWORD, lpOverlapped: LPOVERLAPPED, lpCompletionRoutine: LPOVERLAPPED_COMPLETION_ROUTINE) callconv(WINAPI) BOOL","src":247,"more_decls":null}{"pl":"extern \"kernel32\" fn LoadLibraryW(lpLibFileName: [*:0]const u16) callconv(WINAPI) ?HMODULE","src":249,"more_decls":null}{"pl":"extern \"kernel32\" fn GetProcAddress(hModule: HMODULE, lpProcName: [*]const u8) callconv(WINAPI) ?FARPROC","src":251,"more_decls":null}{"pl":"extern \"kernel32\" fn FreeLibrary(hModule: HMODULE) callconv(WINAPI) BOOL","src":253,"more_decls":null}{"pl":"extern \"kernel32\" fn InitializeCriticalSection(lpCriticalSection: *CRITICAL_SECTION) callconv(WINAPI) void","src":255,"more_decls":null}{"pl":"extern \"kernel32\" fn EnterCriticalSection(lpCriticalSection: *CRITICAL_SECTION) callconv(WINAPI) void","src":256,"more_decls":null}{"pl":"extern \"kernel32\" fn LeaveCriticalSection(lpCriticalSection: *CRITICAL_SECTION) callconv(WINAPI) void","src":257,"more_decls":null}{"pl":"extern \"kernel32\" fn DeleteCriticalSection(lpCriticalSection: *CRITICAL_SECTION) callconv(WINAPI) void","src":258,"more_decls":null}{"pl":"extern \"kernel32\" fn InitOnceExecuteOnce(InitOnce: *INIT_ONCE, InitFn: INIT_ONCE_FN, Parameter: ?*c_void, Context: ?*c_void) callconv(WINAPI) BOOL","src":260,"more_decls":null}{"pl":"extern \"kernel32\" fn K32EmptyWorkingSet(hProcess: HANDLE) callconv(WINAPI) BOOL","src":262,"more_decls":null}{"pl":"extern \"kernel32\" fn K32EnumDeviceDrivers(lpImageBase: [*]LPVOID, cb: DWORD, lpcbNeeded: LPDWORD) callconv(WINAPI) BOOL","src":263,"more_decls":null}{"pl":"extern \"kernel32\" fn K32EnumPageFilesA(pCallBackRoutine: PENUM_PAGE_FILE_CALLBACKA, pContext: LPVOID) callconv(WINAPI) BOOL","src":264,"more_decls":null}{"pl":"extern \"kernel32\" fn K32EnumPageFilesW(pCallBackRoutine: PENUM_PAGE_FILE_CALLBACKW, pContext: LPVOID) callconv(WINAPI) BOOL","src":265,"more_decls":null}{"pl":"extern \"kernel32\" fn K32EnumProcessModules(hProcess: HANDLE, lphModule: [*]HMODULE, cb: DWORD, lpcbNeeded: LPDWORD) callconv(WINAPI) BOOL","src":266,"more_decls":null}{"pl":"extern \"kernel32\" fn K32EnumProcessModulesEx(hProcess: HANDLE, lphModule: [*]HMODULE, cb: DWORD, lpcbNeeded: LPDWORD, dwFilterFlag: DWORD) callconv(WINAPI) BOOL","src":267,"more_decls":null}{"pl":"extern \"kernel32\" fn K32EnumProcesses(lpidProcess: [*]DWORD, cb: DWORD, cbNeeded: LPDWORD) callconv(WINAPI) BOOL","src":268,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetDeviceDriverBaseNameA(ImageBase: LPVOID, lpBaseName: LPSTR, nSize: DWORD) callconv(WINAPI) DWORD","src":269,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetDeviceDriverBaseNameW(ImageBase: LPVOID, lpBaseName: LPWSTR, nSize: DWORD) callconv(WINAPI) DWORD","src":270,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetDeviceDriverFileNameA(ImageBase: LPVOID, lpFilename: LPSTR, nSize: DWORD) callconv(WINAPI) DWORD","src":271,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetDeviceDriverFileNameW(ImageBase: LPVOID, lpFilename: LPWSTR, nSize: DWORD) callconv(WINAPI) DWORD","src":272,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetMappedFileNameA(hProcess: HANDLE, lpv: ?LPVOID, lpFilename: LPSTR, nSize: DWORD) callconv(WINAPI) DWORD","src":273,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetMappedFileNameW(hProcess: HANDLE, lpv: ?LPVOID, lpFilename: LPWSTR, nSize: DWORD) callconv(WINAPI) DWORD","src":274,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetModuleBaseNameA(hProcess: HANDLE, hModule: ?HMODULE, lpBaseName: LPSTR, nSize: DWORD) callconv(WINAPI) DWORD","src":275,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetModuleBaseNameW(hProcess: HANDLE, hModule: ?HMODULE, lpBaseName: LPWSTR, nSize: DWORD) callconv(WINAPI) DWORD","src":276,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetModuleFileNameExA(hProcess: HANDLE, hModule: ?HMODULE, lpFilename: LPSTR, nSize: DWORD) callconv(WINAPI) DWORD","src":277,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetModuleFileNameExW(hProcess: HANDLE, hModule: ?HMODULE, lpFilename: LPWSTR, nSize: DWORD) callconv(WINAPI) DWORD","src":278,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetModuleInformation(hProcess: HANDLE, hModule: HMODULE, lpmodinfo: LPMODULEINFO, cb: DWORD) callconv(WINAPI) BOOL","src":279,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetPerformanceInfo(pPerformanceInformation: PPERFORMACE_INFORMATION, cb: DWORD) callconv(WINAPI) BOOL","src":280,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetProcessImageFileNameA(hProcess: HANDLE, lpImageFileName: LPSTR, nSize: DWORD) callconv(WINAPI) DWORD","src":281,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetProcessImageFileNameW(hProcess: HANDLE, lpImageFileName: LPWSTR, nSize: DWORD) callconv(WINAPI) DWORD","src":282,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetProcessMemoryInfo(Process: HANDLE, ppsmemCounters: PPROCESS_MEMORY_COUNTERS, cb: DWORD) callconv(WINAPI) BOOL","src":283,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetWsChanges(hProcess: HANDLE, lpWatchInfo: PPSAPI_WS_WATCH_INFORMATION, cb: DWORD) callconv(WINAPI) BOOL","src":284,"more_decls":null}{"pl":"extern \"kernel32\" fn K32GetWsChangesEx(hProcess: HANDLE, lpWatchInfoEx: PPSAPI_WS_WATCH_INFORMATION_EX, cb: DWORD) callconv(WINAPI) BOOL","src":285,"more_decls":null}{"pl":"extern \"kernel32\" fn K32InitializeProcessForWsWatch(hProcess: HANDLE) callconv(WINAPI) BOOL","src":286,"more_decls":null}{"pl":"extern \"kernel32\" fn K32QueryWorkingSet(hProcess: HANDLE, pv: PVOID, cb: DWORD) callconv(WINAPI) BOOL","src":287,"more_decls":null}{"pl":"extern \"kernel32\" fn K32QueryWorkingSetEx(hProcess: HANDLE, pv: PVOID, cb: DWORD) callconv(WINAPI) BOOL","src":288,"more_decls":null}{"pl":"extern \"kernel32\" fn FlushFileBuffers(hFile: HANDLE) callconv(WINAPI) BOOL","src":290,"more_decls":null}{"pl":"extern \"kernel32\" fn WakeAllConditionVariable(c: *CONDITION_VARIABLE) callconv(WINAPI) void","src":292,"more_decls":null}{"pl":"extern \"kernel32\" fn WakeConditionVariable(c: *CONDITION_VARIABLE) callconv(WINAPI) void","src":293,"more_decls":null}{"pl":"extern \"kernel32\" fn SleepConditionVariableSRW(\n    c: *CONDITION_VARIABLE,\n    s: *SRWLOCK,\n    t: DWORD,\n    f: ULONG,\n) callconv(WINAPI) BOOL","src":294,"more_decls":null}{"pl":"extern \"kernel32\" fn TryAcquireSRWLockExclusive(s: *SRWLOCK) callconv(WINAPI) BOOLEAN","src":301,"more_decls":null}{"pl":"extern \"kernel32\" fn AcquireSRWLockExclusive(s: *SRWLOCK) callconv(WINAPI) void","src":302,"more_decls":null}{"pl":"extern \"kernel32\" fn ReleaseSRWLockExclusive(s: *SRWLOCK) callconv(WINAPI) void","src":303,"more_decls":null}]