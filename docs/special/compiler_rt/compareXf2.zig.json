[{"pl":"fn cmp(comptime T: type, comptime RT: type, a: T, b: T) RT","src":26,"more_decls":null}{"pl":"fn unordcmp(comptime T: type, a: T, b: T) i32","src":73,"more_decls":null}{"pl":"pub fn __lesf2(a: f32, b: f32) callconv(.C) i32 {\n    @setRuntimeSafety(builtin.is_test);\n    return @bitCast(i32, @call(.{ .modifier = .always_inline }, cmp, .{ f32, LE, a, b }));\n}","src":92,"more_decls":null}{"pl":"pub fn __gesf2(a: f32, b: f32) callconv(.C) i32 {\n    @setRuntimeSafety(builtin.is_test);\n    return @bitCast(i32, @call(.{ .modifier = .always_inline }, cmp, .{ f32, GE, a, b }));\n}","src":97,"more_decls":null}{"pl":"pub fn __eqsf2(a: f32, b: f32) callconv(.C) i32 {\n    return __lesf2(a, b);\n}","src":102,"more_decls":null}{"pl":"pub fn __ltsf2(a: f32, b: f32) callconv(.C) i32 {\n    return __lesf2(a, b);\n}","src":106,"more_decls":null}{"pl":"pub fn __nesf2(a: f32, b: f32) callconv(.C) i32 {\n    return __lesf2(a, b);\n}","src":110,"more_decls":null}{"pl":"pub fn __gtsf2(a: f32, b: f32) callconv(.C) i32 {\n    return __gesf2(a, b);\n}","src":114,"more_decls":null}{"pl":"pub fn __ledf2(a: f64, b: f64) callconv(.C) i32 {\n    @setRuntimeSafety(builtin.is_test);\n    return @bitCast(i32, @call(.{ .modifier = .always_inline }, cmp, .{ f64, LE, a, b }));\n}","src":120,"more_decls":null}{"pl":"pub fn __gedf2(a: f64, b: f64) callconv(.C) i32 {\n    @setRuntimeSafety(builtin.is_test);\n    return @bitCast(i32, @call(.{ .modifier = .always_inline }, cmp, .{ f64, GE, a, b }));\n}","src":125,"more_decls":null}{"pl":"pub fn __eqdf2(a: f64, b: f64) callconv(.C) i32 {\n    return __ledf2(a, b);\n}","src":130,"more_decls":null}{"pl":"pub fn __ltdf2(a: f64, b: f64) callconv(.C) i32 {\n    return __ledf2(a, b);\n}","src":134,"more_decls":null}{"pl":"pub fn __nedf2(a: f64, b: f64) callconv(.C) i32 {\n    return __ledf2(a, b);\n}","src":138,"more_decls":null}{"pl":"pub fn __gtdf2(a: f64, b: f64) callconv(.C) i32 {\n    return __gedf2(a, b);\n}","src":142,"more_decls":null}{"pl":"pub fn __letf2(a: f128, b: f128) callconv(.C) i32 {\n    @setRuntimeSafety(builtin.is_test);\n    return @bitCast(i32, @call(.{ .modifier = .always_inline }, cmp, .{ f128, LE, a, b }));\n}","src":148,"more_decls":null}{"pl":"pub fn __getf2(a: f128, b: f128) callconv(.C) i32 {\n    @setRuntimeSafety(builtin.is_test);\n    return @bitCast(i32, @call(.{ .modifier = .always_inline }, cmp, .{ f128, GE, a, b }));\n}","src":153,"more_decls":null}{"pl":"pub fn __eqtf2(a: f128, b: f128) callconv(.C) i32 {\n    return __letf2(a, b);\n}","src":158,"more_decls":null}{"pl":"pub fn __lttf2(a: f128, b: f128) callconv(.C) i32 {\n    return __letf2(a, b);\n}","src":162,"more_decls":null}{"pl":"pub fn __netf2(a: f128, b: f128) callconv(.C) i32 {\n    return __letf2(a, b);\n}","src":166,"more_decls":null}{"pl":"pub fn __gttf2(a: f128, b: f128) callconv(.C) i32 {\n    return __getf2(a, b);\n}","src":170,"more_decls":null}{"pl":"pub fn __unordsf2(a: f32, b: f32) callconv(.C) i32 {\n    @setRuntimeSafety(builtin.is_test);\n    return @call(.{ .modifier = .always_inline }, unordcmp, .{ f32, a, b });\n}","src":176,"more_decls":null}{"pl":"pub fn __unorddf2(a: f64, b: f64) callconv(.C) i32 {\n    @setRuntimeSafety(builtin.is_test);\n    return @call(.{ .modifier = .always_inline }, unordcmp, .{ f64, a, b });\n}","src":181,"more_decls":null}{"pl":"pub fn __unordtf2(a: f128, b: f128) callconv(.C) i32 {\n    @setRuntimeSafety(builtin.is_test);\n    return @call(.{ .modifier = .always_inline }, unordcmp, .{ f128, a, b });\n}","src":186,"more_decls":null}{"pl":"pub fn __aeabi_fcmpeq(a: f32, b: f32) callconv(.AAPCS) i32 {\n    @setRuntimeSafety(false);\n    return @boolToInt(@call(.{ .modifier = .always_inline }, __eqsf2, .{ a, b }) == 0);\n}","src":193,"more_decls":null}{"pl":"pub fn __aeabi_fcmplt(a: f32, b: f32) callconv(.AAPCS) i32 {\n    @setRuntimeSafety(false);\n    return @boolToInt(@call(.{ .modifier = .always_inline }, __ltsf2, .{ a, b }) < 0);\n}","src":198,"more_decls":null}{"pl":"pub fn __aeabi_fcmple(a: f32, b: f32) callconv(.AAPCS) i32 {\n    @setRuntimeSafety(false);\n    return @boolToInt(@call(.{ .modifier = .always_inline }, __lesf2, .{ a, b }) <= 0);\n}","src":203,"more_decls":null}{"pl":"pub fn __aeabi_fcmpge(a: f32, b: f32) callconv(.AAPCS) i32 {\n    @setRuntimeSafety(false);\n    return @boolToInt(@call(.{ .modifier = .always_inline }, __gesf2, .{ a, b }) >= 0);\n}","src":208,"more_decls":null}{"pl":"pub fn __aeabi_fcmpgt(a: f32, b: f32) callconv(.AAPCS) i32 {\n    @setRuntimeSafety(false);\n    return @boolToInt(@call(.{ .modifier = .always_inline }, __gtsf2, .{ a, b }) > 0);\n}","src":213,"more_decls":null}{"pl":"pub fn __aeabi_fcmpun(a: f32, b: f32) callconv(.AAPCS) i32 {\n    @setRuntimeSafety(false);\n    return @call(.{ .modifier = .always_inline }, __unordsf2, .{ a, b });\n}","src":218,"more_decls":null}{"pl":"pub fn __aeabi_dcmpeq(a: f64, b: f64) callconv(.AAPCS) i32 {\n    @setRuntimeSafety(false);\n    return @boolToInt(@call(.{ .modifier = .always_inline }, __eqdf2, .{ a, b }) == 0);\n}","src":223,"more_decls":null}{"pl":"pub fn __aeabi_dcmplt(a: f64, b: f64) callconv(.AAPCS) i32 {\n    @setRuntimeSafety(false);\n    return @boolToInt(@call(.{ .modifier = .always_inline }, __ltdf2, .{ a, b }) < 0);\n}","src":228,"more_decls":null}{"pl":"pub fn __aeabi_dcmple(a: f64, b: f64) callconv(.AAPCS) i32 {\n    @setRuntimeSafety(false);\n    return @boolToInt(@call(.{ .modifier = .always_inline }, __ledf2, .{ a, b }) <= 0);\n}","src":233,"more_decls":null}{"pl":"pub fn __aeabi_dcmpge(a: f64, b: f64) callconv(.AAPCS) i32 {\n    @setRuntimeSafety(false);\n    return @boolToInt(@call(.{ .modifier = .always_inline }, __gedf2, .{ a, b }) >= 0);\n}","src":238,"more_decls":null}{"pl":"pub fn __aeabi_dcmpgt(a: f64, b: f64) callconv(.AAPCS) i32 {\n    @setRuntimeSafety(false);\n    return @boolToInt(@call(.{ .modifier = .always_inline }, __gtdf2, .{ a, b }) > 0);\n}","src":243,"more_decls":null}{"pl":"pub fn __aeabi_dcmpun(a: f64, b: f64) callconv(.AAPCS) i32 {\n    @setRuntimeSafety(false);\n    return @call(.{ .modifier = .always_inline }, __unorddf2, .{ a, b });\n}","src":248,"more_decls":null}]