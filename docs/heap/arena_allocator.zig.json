[{"doc_comment":"This allocator takes an existing allocator, wraps it, and provides an interface\nwhere you can allocate without freeing, and then free it all together.","pl":"pub const ArenaAllocator = struct ","src":12,"more_decls":{"pl":"allocator: Allocator","src":13,"more_decls":null}{"pl":"child_allocator: *Allocator","src":15,"more_decls":null}{"pl":"state: State","src":16,"more_decls":null}{"doc_comment":"Inner state of ArenaAllocator. Can be stored rather than the entire ArenaAllocator\nas a memory-saving optimization.","pl":"pub const State = struct ","src":20,"more_decls":{"pl":"buffer_list: std.SinglyLinkedList([]u8) = @as(std.SinglyLinkedList([]u8), .{})","src":21,"more_decls":null}{"pl":"end_index: usize = 0","src":22,"more_decls":null}{"pl":"fn promote(self: State, child_allocator: *Allocator) ArenaAllocator","src":24,"more_decls":null}}{"pl":"pub fn init(child_allocator: *Allocator) ArenaAllocator {\n    return (State{}).promote(child_allocator);\n}","src":38,"more_decls":null}{"pl":"fn deinit(self: ArenaAllocator) void","src":42,"more_decls":null}}]