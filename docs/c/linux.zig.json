[{"pl":"pub const EAI = extern enum","src":39,"more_decls":{"pl":"BADFLAGS = -1","src":40,"more_decls":null}{"pl":"NONAME = -2","src":41,"more_decls":null}{"pl":"AGAIN = -3","src":42,"more_decls":null}{"pl":"FAIL = -4","src":43,"more_decls":null}{"pl":"FAMILY = -6","src":44,"more_decls":null}{"pl":"SOCKTYPE = -7","src":45,"more_decls":null}{"pl":"SERVICE = -8","src":46,"more_decls":null}{"pl":"MEMORY = -10","src":47,"more_decls":null}{"pl":"SYSTEM = -11","src":48,"more_decls":null}{"pl":"OVERFLOW = -12","src":49,"more_decls":null}{"pl":"NODATA = -5","src":51,"more_decls":null}{"pl":"ADDRFAMILY = -9","src":52,"more_decls":null}{"pl":"INPROGRESS = -100","src":53,"more_decls":null}{"pl":"CANCELED = -101","src":54,"more_decls":null}{"pl":"NOTCANCELED = -102","src":55,"more_decls":null}{"pl":"ALLDONE = -103","src":56,"more_decls":null}{"pl":"INTR = -104","src":57,"more_decls":null}{"pl":"IDN_ENCODE = -105","src":58,"more_decls":null}{"pl":"_","src":60,"more_decls":null}}{"pl":"extern \"c\" fn getrandom(buf_ptr: [*]u8, buf_len: usize, flags: c_uint) isize","src":63,"more_decls":null}{"pl":"extern \"c\" fn sched_getaffinity(pid: c_int, size: usize, set: *cpu_set_t) c_int","src":64,"more_decls":null}{"pl":"extern \"c\" fn eventfd(initval: c_uint, flags: c_uint) c_int","src":65,"more_decls":null}{"pl":"extern \"c\" fn epoll_ctl(epfd: fd_t, op: c_uint, fd: fd_t, event: ?*epoll_event) c_int","src":66,"more_decls":null}{"pl":"extern \"c\" fn epoll_create1(flags: c_uint) c_int","src":67,"more_decls":null}{"pl":"extern \"c\" fn epoll_wait(epfd: fd_t, events: [*]epoll_event, maxevents: c_uint, timeout: c_int) c_int","src":68,"more_decls":null}{"pl":"extern \"c\" fn epoll_pwait(\n    epfd: fd_t,\n    events: [*]epoll_event,\n    maxevents: c_int,\n    timeout: c_int,\n    sigmask: *const sigset_t,\n) c_int","src":69,"more_decls":null}{"pl":"extern \"c\" fn inotify_init1(flags: c_uint) c_int","src":76,"more_decls":null}{"pl":"extern \"c\" fn inotify_add_watch(fd: fd_t, pathname: [*]const u8, mask: u32) c_int","src":77,"more_decls":null}{"pl":"extern \"c\" fn getauxval(__type: c_ulong) c_ulong","src":80,"more_decls":null}{"pl":"extern \"c\" fn dl_iterate_phdr(callback: dl_iterate_phdr_callback, data: ?*c_void) c_int","src":83,"more_decls":null}{"pl":"extern \"c\" fn sigaltstack(ss: ?*stack_t, old_ss: ?*stack_t) c_int","src":85,"more_decls":null}{"pl":"extern \"c\" fn memfd_create(name: [*:0]const u8, flags: c_uint) c_int","src":87,"more_decls":null}{"pl":"extern \"c\" fn pipe2(fds: *[2]fd_t, flags: u32) c_int","src":88,"more_decls":null}{"pl":"extern \"c\" fn fallocate(fd: fd_t, mode: c_int, offset: off_t, len: off_t) c_int","src":90,"more_decls":null}{"pl":"extern \"c\" fn ftruncate64(fd: c_int, length: off_t) c_int","src":92,"more_decls":null}{"pl":"extern \"c\" fn sendfile(\n    out_fd: fd_t,\n    in_fd: fd_t,\n    offset: ?*off_t,\n    count: usize,\n) isize","src":94,"more_decls":null}{"pl":"extern \"c\" fn copy_file_range(fd_in: fd_t, off_in: ?*i64, fd_out: fd_t, off_out: ?*i64, len: usize, flags: c_uint) isize","src":101,"more_decls":null}{"pl":"extern \"c\" fn signalfd(fd: fd_t, mask: *const sigset_t, flags: c_uint) c_int","src":103,"more_decls":null}{"pl":"extern \"c\" fn prlimit(pid: pid_t, resource: rlimit_resource, new_limit: *const rlimit, old_limit: *rlimit) c_int","src":105,"more_decls":null}{"pl":"extern \"c\" fn posix_memalign(memptr: *?*c_void, alignment: usize, size: usize) c_int","src":106,"more_decls":null}{"pl":"extern \"c\" fn malloc_usable_size(?*const c_void) usize","src":107,"more_decls":null}{"pl":"extern \"c\" fn madvise(\n    addr: *align(std.mem.page_size) c_void,\n    length: usize,\n    advice: c_uint,\n) c_int","src":109,"more_decls":null}{"pl":"pub const pthread_attr_t = extern struct ","src":115,"more_decls":{"pl":"__size: [56]u8","src":116,"more_decls":null}{"pl":"__align: c_long","src":117,"more_decls":null}}{"pl":"pub const pthread_mutex_t = extern struct ","src":120,"more_decls":{"pl":"size: [__SIZEOF_PTHREAD_MUTEX_T]u8 align(@alignOf(usize)) = [_]u8{0} ** __SIZEOF_PTHREAD_MUTEX_T","src":121,"more_decls":null}}{"pl":"pub const pthread_cond_t = extern struct ","src":123,"more_decls":{"pl":"size: [__SIZEOF_PTHREAD_COND_T]u8 align(@alignOf(usize)) = [_]u8{0} ** __SIZEOF_PTHREAD_COND_T","src":124,"more_decls":null}}{"pl":"pub const sem_t = extern struct ","src":152,"more_decls":{"pl":"__size: [__SIZEOF_SEM_T]u8 align(@alignOf(usize))","src":153,"more_decls":null}}{"pl":"const _errno = switch (builtin.abi) {\n    .android => struct {\n        extern \"c\" var __errno: c_int;\n        fn getErrno() *c_int {\n            return &__errno;\n        }\n    }.getErrno,\n    else => struct {\n        extern \"c\" fn __errno_location() *c_int;\n    }.__errno_location,\n}","src":10,"more_decls":null}{"pl":"const MAP_FAILED = @intToPtr(*c_void, maxInt(usize))","src":22,"more_decls":null}{"pl":"const AI_PASSIVE = 0x01","src":24,"more_decls":null}{"pl":"const AI_CANONNAME = 0x02","src":25,"more_decls":null}{"pl":"const AI_NUMERICHOST = 0x04","src":26,"more_decls":null}{"pl":"const AI_V4MAPPED = 0x08","src":27,"more_decls":null}{"pl":"const AI_ALL = 0x10","src":28,"more_decls":null}{"pl":"const AI_ADDRCONFIG = 0x20","src":29,"more_decls":null}{"pl":"const AI_NUMERICSERV = 0x400","src":30,"more_decls":null}{"pl":"const NI_NUMERICHOST = 0x01","src":32,"more_decls":null}{"pl":"const NI_NUMERICSERV = 0x02","src":33,"more_decls":null}{"pl":"const NI_NOFQDN = 0x04","src":34,"more_decls":null}{"pl":"const NI_NAMEREQD = 0x08","src":35,"more_decls":null}{"pl":"const NI_DGRAM = 0x10","src":36,"more_decls":null}{"pl":"const NI_NUMERICSCOPE = 0x100","src":37,"more_decls":null}{"pl":"const dl_iterate_phdr_callback = fn (info: *dl_phdr_info, size: usize, data: ?*c_void) callconv(.C) c_int","src":82,"more_decls":null}{"pl":"const pthread_rwlock_t = switch (std.builtin.abi) {\n    .android => switch (@sizeOf(usize)) {\n        4 => extern struct {\n            lock: std.c.pthread_mutex_t = std.c.PTHREAD_MUTEX_INITIALIZER,\n            cond: std.c.pthread_cond_t = std.c.PTHREAD_COND_INITIALIZER,\n            numLocks: c_int = 0,\n            writerThreadId: c_int = 0,\n            pendingReaders: c_int = 0,\n            pendingWriters: c_int = 0,\n            attr: i32 = 0,\n            __reserved: [12]u8 = [_]u8{0} ** 2,\n        },\n        8 => extern struct {\n            numLocks: c_int = 0,\n            writerThreadId: c_int = 0,\n            pendingReaders: c_int = 0,\n            pendingWriters: c_int = 0,\n            attr: i32 = 0,\n            __reserved: [36]u8 = [_]u8{0} ** 36,\n        },\n        else => unreachable,\n    },\n    else => extern struct {\n        size: [56]u8 align(@alignOf(usize)) = [_]u8{0} ** 56,\n    },\n}","src":126,"more_decls":null}{"pl":"const RTLD_LAZY = 1","src":169,"more_decls":null}{"pl":"const RTLD_NOW = 2","src":170,"more_decls":null}{"pl":"const RTLD_NOLOAD = 4","src":171,"more_decls":null}{"pl":"const RTLD_NODELETE = 4096","src":172,"more_decls":null}{"pl":"const RTLD_GLOBAL = 256","src":173,"more_decls":null}{"pl":"const RTLD_LOCAL = 0","src":174,"more_decls":null}]