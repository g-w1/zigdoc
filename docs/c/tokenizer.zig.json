[{"pl":"pub const Token = struct ","src":8,"more_decls":{"pl":"id: Id","src":9,"more_decls":null}{"pl":"start: usize","src":10,"more_decls":null}{"pl":"end: usize","src":11,"more_decls":null}{"pl":"pub const Id = union(enum) ","src":13,"more_decls":{"pl":"Invalid","src":14,"more_decls":null}{"pl":"Eof","src":15,"more_decls":null}{"pl":"Nl","src":16,"more_decls":null}{"pl":"Identifier","src":17,"more_decls":null}{"doc_comment":"special case for #include <...>","pl":"MacroString","src":20,"more_decls":null}{"pl":"StringLiteral: StrKind","src":21,"more_decls":null}{"pl":"CharLiteral: StrKind","src":22,"more_decls":null}{"pl":"IntegerLiteral: NumSuffix","src":23,"more_decls":null}{"pl":"FloatLiteral: NumSuffix","src":24,"more_decls":null}{"pl":"Bang","src":25,"more_decls":null}{"pl":"BangEqual","src":26,"more_decls":null}{"pl":"Pipe","src":27,"more_decls":null}{"pl":"PipePipe","src":28,"more_decls":null}{"pl":"PipeEqual","src":29,"more_decls":null}{"pl":"Equal","src":30,"more_decls":null}{"pl":"EqualEqual","src":31,"more_decls":null}{"pl":"LParen","src":32,"more_decls":null}{"pl":"RParen","src":33,"more_decls":null}{"pl":"LBrace","src":34,"more_decls":null}{"pl":"RBrace","src":35,"more_decls":null}{"pl":"LBracket","src":36,"more_decls":null}{"pl":"RBracket","src":37,"more_decls":null}{"pl":"Period","src":38,"more_decls":null}{"pl":"Ellipsis","src":39,"more_decls":null}{"pl":"Caret","src":40,"more_decls":null}{"pl":"CaretEqual","src":41,"more_decls":null}{"pl":"Plus","src":42,"more_decls":null}{"pl":"PlusPlus","src":43,"more_decls":null}{"pl":"PlusEqual","src":44,"more_decls":null}{"pl":"Minus","src":45,"more_decls":null}{"pl":"MinusMinus","src":46,"more_decls":null}{"pl":"MinusEqual","src":47,"more_decls":null}{"pl":"Asterisk","src":48,"more_decls":null}{"pl":"AsteriskEqual","src":49,"more_decls":null}{"pl":"Percent","src":50,"more_decls":null}{"pl":"PercentEqual","src":51,"more_decls":null}{"pl":"Arrow","src":52,"more_decls":null}{"pl":"Colon","src":53,"more_decls":null}{"pl":"Semicolon","src":54,"more_decls":null}{"pl":"Slash","src":55,"more_decls":null}{"pl":"SlashEqual","src":56,"more_decls":null}{"pl":"Comma","src":57,"more_decls":null}{"pl":"Ampersand","src":58,"more_decls":null}{"pl":"AmpersandAmpersand","src":59,"more_decls":null}{"pl":"AmpersandEqual","src":60,"more_decls":null}{"pl":"QuestionMark","src":61,"more_decls":null}{"pl":"AngleBracketLeft","src":62,"more_decls":null}{"pl":"AngleBracketLeftEqual","src":63,"more_decls":null}{"pl":"AngleBracketAngleBracketLeft","src":64,"more_decls":null}{"pl":"AngleBracketAngleBracketLeftEqual","src":65,"more_decls":null}{"pl":"AngleBracketRight","src":66,"more_decls":null}{"pl":"AngleBracketRightEqual","src":67,"more_decls":null}{"pl":"AngleBracketAngleBracketRight","src":68,"more_decls":null}{"pl":"AngleBracketAngleBracketRightEqual","src":69,"more_decls":null}{"pl":"Tilde","src":70,"more_decls":null}{"pl":"LineComment","src":71,"more_decls":null}{"pl":"MultiLineComment","src":72,"more_decls":null}{"pl":"Hash","src":73,"more_decls":null}{"pl":"HashHash","src":74,"more_decls":null}{"pl":"Keyword_auto","src":76,"more_decls":null}{"pl":"Keyword_break","src":77,"more_decls":null}{"pl":"Keyword_case","src":78,"more_decls":null}{"pl":"Keyword_char","src":79,"more_decls":null}{"pl":"Keyword_const","src":80,"more_decls":null}{"pl":"Keyword_continue","src":81,"more_decls":null}{"pl":"Keyword_default","src":82,"more_decls":null}{"pl":"Keyword_do","src":83,"more_decls":null}{"pl":"Keyword_double","src":84,"more_decls":null}{"pl":"Keyword_else","src":85,"more_decls":null}{"pl":"Keyword_enum","src":86,"more_decls":null}{"pl":"Keyword_extern","src":87,"more_decls":null}{"pl":"Keyword_float","src":88,"more_decls":null}{"pl":"Keyword_for","src":89,"more_decls":null}{"pl":"Keyword_goto","src":90,"more_decls":null}{"pl":"Keyword_if","src":91,"more_decls":null}{"pl":"Keyword_int","src":92,"more_decls":null}{"pl":"Keyword_long","src":93,"more_decls":null}{"pl":"Keyword_register","src":94,"more_decls":null}{"pl":"Keyword_return","src":95,"more_decls":null}{"pl":"Keyword_short","src":96,"more_decls":null}{"pl":"Keyword_signed","src":97,"more_decls":null}{"pl":"Keyword_sizeof","src":98,"more_decls":null}{"pl":"Keyword_static","src":99,"more_decls":null}{"pl":"Keyword_struct","src":100,"more_decls":null}{"pl":"Keyword_switch","src":101,"more_decls":null}{"pl":"Keyword_typedef","src":102,"more_decls":null}{"pl":"Keyword_union","src":103,"more_decls":null}{"pl":"Keyword_unsigned","src":104,"more_decls":null}{"pl":"Keyword_void","src":105,"more_decls":null}{"pl":"Keyword_volatile","src":106,"more_decls":null}{"pl":"Keyword_while","src":107,"more_decls":null}{"pl":"Keyword_bool","src":110,"more_decls":null}{"pl":"Keyword_complex","src":111,"more_decls":null}{"pl":"Keyword_imaginary","src":112,"more_decls":null}{"pl":"Keyword_inline","src":113,"more_decls":null}{"pl":"Keyword_restrict","src":114,"more_decls":null}{"pl":"Keyword_alignas","src":117,"more_decls":null}{"pl":"Keyword_alignof","src":118,"more_decls":null}{"pl":"Keyword_atomic","src":119,"more_decls":null}{"pl":"Keyword_generic","src":120,"more_decls":null}{"pl":"Keyword_noreturn","src":121,"more_decls":null}{"pl":"Keyword_static_assert","src":122,"more_decls":null}{"pl":"Keyword_thread_local","src":123,"more_decls":null}{"pl":"Keyword_include","src":126,"more_decls":null}{"pl":"Keyword_define","src":127,"more_decls":null}{"pl":"Keyword_ifdef","src":128,"more_decls":null}{"pl":"Keyword_ifndef","src":129,"more_decls":null}{"pl":"Keyword_error","src":130,"more_decls":null}{"pl":"Keyword_pragma","src":131,"more_decls":null}{"pl":"fn symbol(id: std.meta.TagType(Id)) []const u8","src":133,"more_decls":null}}{"pl":"pub const NumSuffix = enum ","src":327,"more_decls":{"pl":"none","src":328,"more_decls":null}{"pl":"f","src":329,"more_decls":null}{"pl":"l","src":330,"more_decls":null}{"pl":"u","src":331,"more_decls":null}{"pl":"lu","src":332,"more_decls":null}{"pl":"ll","src":333,"more_decls":null}{"pl":"llu","src":334,"more_decls":null}}{"pl":"pub const StrKind = enum ","src":337,"more_decls":{"pl":"none","src":338,"more_decls":null}{"pl":"wide","src":339,"more_decls":null}{"pl":"utf_8","src":340,"more_decls":null}{"pl":"utf_16","src":341,"more_decls":null}{"pl":"utf_32","src":342,"more_decls":null}}{"pl":"fn getKeyword(bytes: []const u8, pp_directive: bool) ?Id","src":310,"more_decls":null}{"pl":"const keywords = std.ComptimeStringMap(Id, .{\n        .{ \"auto\", .Keyword_auto },\n        .{ \"break\", .Keyword_break },\n        .{ \"case\", .Keyword_case },\n        .{ \"char\", .Keyword_char },\n        .{ \"const\", .Keyword_const },\n        .{ \"continue\", .Keyword_continue },\n        .{ \"default\", .Keyword_default },\n        .{ \"do\", .Keyword_do },\n        .{ \"double\", .Keyword_double },\n        .{ \"else\", .Keyword_else },\n        .{ \"enum\", .Keyword_enum },\n        .{ \"extern\", .Keyword_extern },\n        .{ \"float\", .Keyword_float },\n        .{ \"for\", .Keyword_for },\n        .{ \"goto\", .Keyword_goto },\n        .{ \"if\", .Keyword_if },\n        .{ \"int\", .Keyword_int },\n        .{ \"long\", .Keyword_long },\n        .{ \"register\", .Keyword_register },\n        .{ \"return\", .Keyword_return },\n        .{ \"short\", .Keyword_short },\n        .{ \"signed\", .Keyword_signed },\n        .{ \"sizeof\", .Keyword_sizeof },\n        .{ \"static\", .Keyword_static },\n        .{ \"struct\", .Keyword_struct },\n        .{ \"switch\", .Keyword_switch },\n        .{ \"typedef\", .Keyword_typedef },\n        .{ \"union\", .Keyword_union },\n        .{ \"unsigned\", .Keyword_unsigned },\n        .{ \"void\", .Keyword_void },\n        .{ \"volatile\", .Keyword_volatile },\n        .{ \"while\", .Keyword_while },\n\n        // ISO C99\n        .{ \"_Bool\", .Keyword_bool },\n        .{ \"_Complex\", .Keyword_complex },\n        .{ \"_Imaginary\", .Keyword_imaginary },\n        .{ \"inline\", .Keyword_inline },\n        .{ \"restrict\", .Keyword_restrict },\n\n        // ISO C11\n        .{ \"_Alignas\", .Keyword_alignas },\n        .{ \"_Alignof\", .Keyword_alignof },\n        .{ \"_Atomic\", .Keyword_atomic },\n        .{ \"_Generic\", .Keyword_generic },\n        .{ \"_Noreturn\", .Keyword_noreturn },\n        .{ \"_Static_assert\", .Keyword_static_assert },\n        .{ \"_Thread_local\", .Keyword_thread_local },\n\n        // Preprocessor directives\n        .{ \"include\", .Keyword_include },\n        .{ \"define\", .Keyword_define },\n        .{ \"ifdef\", .Keyword_ifdef },\n        .{ \"ifndef\", .Keyword_ifndef },\n        .{ \"error\", .Keyword_error },\n        .{ \"pragma\", .Keyword_pragma },\n    })","src":250,"more_decls":null}}{"pl":"pub const Tokenizer = struct ","src":346,"more_decls":{"pl":"buffer: []const u8","src":347,"more_decls":null}{"pl":"index: usize = 0","src":348,"more_decls":null}{"pl":"prev_tok_id: std.meta.TagType(Token.Id) = .Invalid","src":349,"more_decls":null}{"pl":"pp_directive: bool = false","src":350,"more_decls":null}{"pl":"fn next(self: *Tokenizer) Token","src":352,"more_decls":null}}]