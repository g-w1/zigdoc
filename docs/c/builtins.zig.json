[{"pl":"pub fn __builtin_bswap16(val: u16) callconv(.Inline) u16 {\n    return @byteSwap(u16, val);\n}","src":8,"more_decls":null}{"pl":"pub fn __builtin_bswap32(val: u32) callconv(.Inline) u32 {\n    return @byteSwap(u32, val);\n}","src":11,"more_decls":null}{"pl":"pub fn __builtin_bswap64(val: u64) callconv(.Inline) u64 {\n    return @byteSwap(u64, val);\n}","src":14,"more_decls":null}{"pl":"pub fn __builtin_signbit(val: f64) callconv(.Inline) c_int {\n    return @boolToInt(std.math.signbit(val));\n}","src":18,"more_decls":null}{"pl":"pub fn __builtin_signbitf(val: f32) callconv(.Inline) c_int {\n    return @boolToInt(std.math.signbit(val));\n}","src":21,"more_decls":null}{"pl":"pub fn __builtin_popcount(val: c_uint) callconv(.Inline) c_int {\n    // popcount of a c_uint will never exceed the capacity of a c_int\n    @setRuntimeSafety(false);\n    return @bitCast(c_int, @as(c_uint, @popCount(c_uint, val)));\n}","src":25,"more_decls":null}{"pl":"pub fn __builtin_ctz(val: c_uint) callconv(.Inline) c_int {\n    // Returns the number of trailing 0-bits in val, starting at the least significant bit position.\n    // In C if `val` is 0, the result is undefined; in zig it's the number of bits in a c_uint\n    @setRuntimeSafety(false);\n    return @bitCast(c_int, @as(c_uint, @ctz(c_uint, val)));\n}","src":30,"more_decls":null}{"pl":"pub fn __builtin_clz(val: c_uint) callconv(.Inline) c_int {\n    // Returns the number of leading 0-bits in x, starting at the most significant bit position.\n    // In C if `val` is 0, the result is undefined; in zig it's the number of bits in a c_uint\n    @setRuntimeSafety(false);\n    return @bitCast(c_int, @as(c_uint, @clz(c_uint, val)));\n}","src":36,"more_decls":null}{"pl":"pub fn __builtin_sqrt(val: f64) callconv(.Inline) f64 {\n    return @sqrt(val);\n}","src":43,"more_decls":null}{"pl":"pub fn __builtin_sqrtf(val: f32) callconv(.Inline) f32 {\n    return @sqrt(val);\n}","src":46,"more_decls":null}{"pl":"pub fn __builtin_sin(val: f64) callconv(.Inline) f64 {\n    return @sin(val);\n}","src":50,"more_decls":null}{"pl":"pub fn __builtin_sinf(val: f32) callconv(.Inline) f32 {\n    return @sin(val);\n}","src":53,"more_decls":null}{"pl":"pub fn __builtin_cos(val: f64) callconv(.Inline) f64 {\n    return @cos(val);\n}","src":56,"more_decls":null}{"pl":"pub fn __builtin_cosf(val: f32) callconv(.Inline) f32 {\n    return @cos(val);\n}","src":59,"more_decls":null}{"pl":"pub fn __builtin_exp(val: f64) callconv(.Inline) f64 {\n    return @exp(val);\n}","src":63,"more_decls":null}{"pl":"pub fn __builtin_expf(val: f32) callconv(.Inline) f32 {\n    return @exp(val);\n}","src":66,"more_decls":null}{"pl":"pub fn __builtin_exp2(val: f64) callconv(.Inline) f64 {\n    return @exp2(val);\n}","src":69,"more_decls":null}{"pl":"pub fn __builtin_exp2f(val: f32) callconv(.Inline) f32 {\n    return @exp2(val);\n}","src":72,"more_decls":null}{"pl":"pub fn __builtin_log(val: f64) callconv(.Inline) f64 {\n    return @log(val);\n}","src":75,"more_decls":null}{"pl":"pub fn __builtin_logf(val: f32) callconv(.Inline) f32 {\n    return @log(val);\n}","src":78,"more_decls":null}{"pl":"pub fn __builtin_log2(val: f64) callconv(.Inline) f64 {\n    return @log2(val);\n}","src":81,"more_decls":null}{"pl":"pub fn __builtin_log2f(val: f32) callconv(.Inline) f32 {\n    return @log2(val);\n}","src":84,"more_decls":null}{"pl":"pub fn __builtin_log10(val: f64) callconv(.Inline) f64 {\n    return @log10(val);\n}","src":87,"more_decls":null}{"pl":"pub fn __builtin_log10f(val: f32) callconv(.Inline) f32 {\n    return @log10(val);\n}","src":90,"more_decls":null}{"pl":"pub fn __builtin_abs(val: c_int) callconv(.Inline) c_int {\n    return std.math.absInt(val) catch std.math.minInt(c_int);\n}","src":95,"more_decls":null}{"pl":"pub fn __builtin_fabs(val: f64) callconv(.Inline) f64 {\n    return @fabs(val);\n}","src":98,"more_decls":null}{"pl":"pub fn __builtin_fabsf(val: f32) callconv(.Inline) f32 {\n    return @fabs(val);\n}","src":101,"more_decls":null}{"pl":"pub fn __builtin_floor(val: f64) callconv(.Inline) f64 {\n    return @floor(val);\n}","src":105,"more_decls":null}{"pl":"pub fn __builtin_floorf(val: f32) callconv(.Inline) f32 {\n    return @floor(val);\n}","src":108,"more_decls":null}{"pl":"pub fn __builtin_ceil(val: f64) callconv(.Inline) f64 {\n    return @ceil(val);\n}","src":111,"more_decls":null}{"pl":"pub fn __builtin_ceilf(val: f32) callconv(.Inline) f32 {\n    return @ceil(val);\n}","src":114,"more_decls":null}{"pl":"pub fn __builtin_trunc(val: f64) callconv(.Inline) f64 {\n    return @trunc(val);\n}","src":117,"more_decls":null}{"pl":"pub fn __builtin_truncf(val: f32) callconv(.Inline) f32 {\n    return @trunc(val);\n}","src":120,"more_decls":null}{"pl":"pub fn __builtin_round(val: f64) callconv(.Inline) f64 {\n    return @round(val);\n}","src":123,"more_decls":null}{"pl":"pub fn __builtin_roundf(val: f32) callconv(.Inline) f32 {\n    return @round(val);\n}","src":126,"more_decls":null}{"pl":"pub fn __builtin_strlen(s: [*c]const u8) callconv(.Inline) usize {\n    return std.mem.lenZ(s);\n}","src":130,"more_decls":null}{"pl":"pub fn __builtin_strcmp(s1: [*c]const u8, s2: [*c]const u8) callconv(.Inline) c_int {\n    return @as(c_int, std.cstr.cmp(s1, s2));\n}","src":133,"more_decls":null}{"pl":"fn __builtin_object_size(ptr: ?*const c_void, ty: c_int) callconv(.Inline) usize","src":137,"more_decls":null}{"pl":"fn __builtin___memset_chk(\n    dst: ?*c_void,\n    val: c_int,\n    len: usize,\n    remaining: usize,\n) callconv(.Inline) ?*c_void","src":147,"more_decls":null}{"pl":"pub fn __builtin_memset(dst: ?*c_void, val: c_int, len: usize) callconv(.Inline) ?*c_void {\n    const dst_cast = @ptrCast([*c]u8, dst);\n    @memset(dst_cast, @bitCast(u8, @truncate(i8, val)), len);\n    return dst;\n}","src":157,"more_decls":null}{"pl":"fn __builtin___memcpy_chk(\n    noalias dst: ?*c_void,\n    noalias src: ?*const c_void,\n    len: usize,\n    remaining: usize,\n) callconv(.Inline) ?*c_void","src":163,"more_decls":null}{"pl":"fn __builtin_memcpy(\n    noalias dst: ?*c_void,\n    noalias src: ?*const c_void,\n    len: usize,\n) callconv(.Inline) ?*c_void","src":173,"more_decls":null}{"doc_comment":"The return value of __builtin_expect is `expr`. `c` is the expected value\nof `expr` and is used as a hint to the compiler in C. Here it is unused.","pl":"pub fn __builtin_expect(expr: c_long, c: c_long) callconv(.Inline) c_long {\n    return expr;\n}","src":187,"more_decls":null}]