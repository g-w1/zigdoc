[{"doc_comment":"Authenticated Encryption with Associated Data","pl":"pub const aead = struct ","src":7,"more_decls":{"pl":"pub const aegis = struct ","src":8,"more_decls":{"pl":"const Aegis128L = @import(\"crypto/aegis.zig\").Aegis128L","src":9,"more_decls":null}{"pl":"const Aegis256 = @import(\"crypto/aegis.zig\").Aegis256","src":10,"more_decls":null}}{"pl":"pub const aes_gcm = struct ","src":13,"more_decls":{"pl":"const Aes128Gcm = @import(\"crypto/aes_gcm.zig\").Aes128Gcm","src":14,"more_decls":null}{"pl":"const Aes256Gcm = @import(\"crypto/aes_gcm.zig\").Aes256Gcm","src":15,"more_decls":null}}{"pl":"pub const aes_ocb = struct ","src":18,"more_decls":{"pl":"const Aes128Ocb = @import(\"crypto/aes_ocb.zig\").Aes128Ocb","src":19,"more_decls":null}{"pl":"const Aes256Ocb = @import(\"crypto/aes_ocb.zig\").Aes256Ocb","src":20,"more_decls":null}}{"pl":"pub const chacha_poly = struct ","src":25,"more_decls":{"pl":"const ChaCha20Poly1305 = @import(\"crypto/chacha20.zig\").ChaCha20Poly1305","src":26,"more_decls":null}{"pl":"const ChaCha12Poly1305 = @import(\"crypto/chacha20.zig\").ChaCha12Poly1305","src":27,"more_decls":null}{"pl":"const ChaCha8Poly1305 = @import(\"crypto/chacha20.zig\").ChaCha8Poly1305","src":28,"more_decls":null}{"pl":"const XChaCha20Poly1305 = @import(\"crypto/chacha20.zig\").XChaCha20Poly1305","src":29,"more_decls":null}{"pl":"const XChaCha12Poly1305 = @import(\"crypto/chacha20.zig\").XChaCha12Poly1305","src":30,"more_decls":null}{"pl":"const XChaCha8Poly1305 = @import(\"crypto/chacha20.zig\").XChaCha8Poly1305","src":31,"more_decls":null}}{"pl":"pub const salsa_poly = struct ","src":36,"more_decls":{"pl":"const XSalsa20Poly1305 = @import(\"crypto/salsa20.zig\").XSalsa20Poly1305","src":37,"more_decls":null}}{"pl":"const Gimli = @import(\"crypto/gimli.zig\").Aead","src":23,"more_decls":null}{"pl":"const isap = @import(\"crypto/isap.zig\")","src":34,"more_decls":null}}{"doc_comment":"Authentication (MAC) functions.","pl":"pub const auth = struct ","src":42,"more_decls":{"pl":"const hmac = @import(\"crypto/hmac.zig\")","src":43,"more_decls":null}{"pl":"const siphash = @import(\"crypto/siphash.zig\")","src":44,"more_decls":null}}{"doc_comment":"Core functions, that should rarely be used directly by applications.","pl":"pub const core = struct ","src":48,"more_decls":{"pl":"const aes = @import(\"crypto/aes.zig\")","src":49,"more_decls":null}{"pl":"const Gimli = @import(\"crypto/gimli.zig\").State","src":50,"more_decls":null}{"doc_comment":"Modes are generic compositions to construct encryption/decryption functions from block ciphers and permutations.\n\nThese modes are designed to be building blocks for higher-level constructions, and should generally not be used directly by applications, as they may not provide the expected properties and security guarantees.\n\nMost applications may want to use AEADs instead.","pl":"const modes = @import(\"crypto/modes.zig\")","src":57,"more_decls":null}}{"doc_comment":"Diffie-Hellman key exchange functions.","pl":"pub const dh = struct ","src":61,"more_decls":{"pl":"const X25519 = @import(\"crypto/25519/x25519.zig\").X25519","src":62,"more_decls":null}}{"doc_comment":"Elliptic-curve arithmetic.","pl":"pub const ecc = struct ","src":66,"more_decls":{"pl":"const Curve25519 = @import(\"crypto/25519/curve25519.zig\").Curve25519","src":67,"more_decls":null}{"pl":"const Edwards25519 = @import(\"crypto/25519/edwards25519.zig\").Edwards25519","src":68,"more_decls":null}{"pl":"const Ristretto255 = @import(\"crypto/25519/ristretto255.zig\").Ristretto255","src":69,"more_decls":null}}{"doc_comment":"Hash functions.","pl":"pub const hash = struct ","src":73,"more_decls":{"pl":"const blake2 = @import(\"crypto/blake2.zig\")","src":74,"more_decls":null}{"pl":"const Blake3 = @import(\"crypto/blake3.zig\").Blake3","src":75,"more_decls":null}{"pl":"const Gimli = @import(\"crypto/gimli.zig\").Hash","src":76,"more_decls":null}{"pl":"const Md5 = @import(\"crypto/md5.zig\").Md5","src":77,"more_decls":null}{"pl":"const Sha1 = @import(\"crypto/sha1.zig\").Sha1","src":78,"more_decls":null}{"pl":"const sha2 = @import(\"crypto/sha2.zig\")","src":79,"more_decls":null}{"pl":"const sha3 = @import(\"crypto/sha3.zig\")","src":80,"more_decls":null}}{"doc_comment":"Key derivation functions.","pl":"pub const kdf = struct ","src":84,"more_decls":{"pl":"const hkdf = @import(\"crypto/hkdf.zig\")","src":85,"more_decls":null}}{"doc_comment":"MAC functions requiring single-use secret keys.","pl":"pub const onetimeauth = struct ","src":89,"more_decls":{"pl":"const Ghash = @import(\"crypto/ghash.zig\").Ghash","src":90,"more_decls":null}{"pl":"const Poly1305 = @import(\"crypto/poly1305.zig\").Poly1305","src":91,"more_decls":null}}{"doc_comment":"A password hashing function derives a uniform key from low-entropy input material such as passwords.\nIt is intentionally slow or expensive.\n\nWith the standard definition of a key derivation function, if a key space is small, an exhaustive search may be practical.\nPassword hashing functions make exhaustive searches way slower or way more expensive, even when implemented on GPUs and ASICs, by using different, optionally combined strategies:\n\n- Requiring a lot of computation cycles to complete\n- Requiring a lot of memory to complete\n- Requiring multiple CPU cores to complete\n- Requiring cache-local data to complete in reasonable time\n- Requiring large static tables\n- Avoiding precomputations and time/memory tradeoffs\n- Requiring multi-party computations\n- Combining the input material with random per-entry data (salts), application-specific contexts and keys\n\nPassword hashing functions must be used whenever sensitive data has to be directly derived from a password.","pl":"pub const pwhash = struct ","src":110,"more_decls":{"pl":"const bcrypt = @import(\"crypto/bcrypt.zig\")","src":111,"more_decls":null}{"pl":"const pbkdf2 = @import(\"crypto/pbkdf2.zig\").pbkdf2","src":112,"more_decls":null}}{"doc_comment":"Digital signature functions.","pl":"pub const sign = struct ","src":116,"more_decls":{"pl":"const Ed25519 = @import(\"crypto/25519/ed25519.zig\").Ed25519","src":117,"more_decls":null}}{"doc_comment":"Stream ciphers. These do not provide any kind of authentication.\nMost applications should be using AEAD constructions instead of stream ciphers directly.","pl":"pub const stream = struct ","src":122,"more_decls":{"pl":"pub const chacha = struct ","src":123,"more_decls":{"pl":"const ChaCha20IETF = @import(\"crypto/chacha20.zig\").ChaCha20IETF","src":124,"more_decls":null}{"pl":"const ChaCha12IETF = @import(\"crypto/chacha20.zig\").ChaCha12IETF","src":125,"more_decls":null}{"pl":"const ChaCha8IETF = @import(\"crypto/chacha20.zig\").ChaCha8IETF","src":126,"more_decls":null}{"pl":"const ChaCha20With64BitNonce = @import(\"crypto/chacha20.zig\").ChaCha20With64BitNonce","src":127,"more_decls":null}{"pl":"const ChaCha12With64BitNonce = @import(\"crypto/chacha20.zig\").ChaCha12With64BitNonce","src":128,"more_decls":null}{"pl":"const ChaCha8With64BitNonce = @import(\"crypto/chacha20.zig\").ChaCha8With64BitNonce","src":129,"more_decls":null}{"pl":"const XChaCha20IETF = @import(\"crypto/chacha20.zig\").XChaCha20IETF","src":130,"more_decls":null}{"pl":"const XChaCha12IETF = @import(\"crypto/chacha20.zig\").XChaCha12IETF","src":131,"more_decls":null}{"pl":"const XChaCha8IETF = @import(\"crypto/chacha20.zig\").XChaCha8IETF","src":132,"more_decls":null}}{"pl":"pub const salsa = struct ","src":135,"more_decls":{"pl":"const Salsa20 = @import(\"crypto/salsa20.zig\").Salsa20","src":136,"more_decls":null}{"pl":"const XSalsa20 = @import(\"crypto/salsa20.zig\").XSalsa20","src":137,"more_decls":null}}}{"pl":"pub const nacl = struct ","src":141,"more_decls":{"pl":"const Box = salsa20.Box","src":144,"more_decls":null}{"pl":"const SecretBox = salsa20.SecretBox","src":145,"more_decls":null}{"pl":"const SealedBox = salsa20.SealedBox","src":146,"more_decls":null}}{"pl":"const utils = @import(\"crypto/utils.zig\")","src":149,"more_decls":null}{"doc_comment":"This is a thread-local, cryptographically secure pseudo random number generator.","pl":"const random = &@import(\"crypto/tlcsprng.zig\").interface","src":152,"more_decls":null}{"pl":"const Error = @import(\"crypto/error.zig\").Error","src":156,"more_decls":null}]