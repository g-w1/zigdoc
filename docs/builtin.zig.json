[{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const StackTrace = struct ","src":56,"more_decls":{"pl":"index: usize","src":57,"more_decls":null}{"pl":"instruction_addresses: []usize","src":58,"more_decls":null}{"pl":"fn format(\n    self: StackTrace,\n    comptime fmt: []const u8,\n    options: std.fmt.FormatOptions,\n    writer: anytype,\n) !void","src":60,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const GlobalLinkage = enum ","src":82,"more_decls":{"pl":"Internal","src":83,"more_decls":null}{"pl":"Strong","src":84,"more_decls":null}{"pl":"Weak","src":85,"more_decls":null}{"pl":"LinkOnce","src":86,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const AtomicOrder = enum ","src":91,"more_decls":{"pl":"Unordered","src":92,"more_decls":null}{"pl":"Monotonic","src":93,"more_decls":null}{"pl":"Acquire","src":94,"more_decls":null}{"pl":"Release","src":95,"more_decls":null}{"pl":"AcqRel","src":96,"more_decls":null}{"pl":"SeqCst","src":97,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const ReduceOp = enum ","src":102,"more_decls":{"pl":"And","src":103,"more_decls":null}{"pl":"Or","src":104,"more_decls":null}{"pl":"Xor","src":105,"more_decls":null}{"pl":"Min","src":106,"more_decls":null}{"pl":"Max","src":107,"more_decls":null}{"pl":"Add","src":108,"more_decls":null}{"pl":"Mul","src":109,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const AtomicRmwOp = enum ","src":114,"more_decls":{"pl":"Xchg","src":115,"more_decls":null}{"pl":"Add","src":116,"more_decls":null}{"pl":"Sub","src":117,"more_decls":null}{"pl":"And","src":118,"more_decls":null}{"pl":"Nand","src":119,"more_decls":null}{"pl":"Or","src":120,"more_decls":null}{"pl":"Xor","src":121,"more_decls":null}{"pl":"Max","src":122,"more_decls":null}{"pl":"Min","src":123,"more_decls":null}}{"doc_comment":"The code model puts constraints on the location of symbols and the size of code and data.\nThe selection of a code model is a trade off on speed and restrictions that needs to be selected on a per application basis to meet its requirements.\nA slightly more detailed explanation can be found in (for example) the [System V Application Binary Interface (x86_64)](https://github.com/hjl-tools/x86-psABI/wiki/x86-64-psABI-1.0.pdf) 3.5.1.\n\nThis data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const CodeModel = enum ","src":132,"more_decls":{"pl":"default","src":133,"more_decls":null}{"pl":"tiny","src":134,"more_decls":null}{"pl":"small","src":135,"more_decls":null}{"pl":"kernel","src":136,"more_decls":null}{"pl":"medium","src":137,"more_decls":null}{"pl":"large","src":138,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Mode = enum ","src":143,"more_decls":{"pl":"Debug","src":144,"more_decls":null}{"pl":"ReleaseSafe","src":145,"more_decls":null}{"pl":"ReleaseFast","src":146,"more_decls":null}{"pl":"ReleaseSmall","src":147,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const CallingConvention = enum ","src":152,"more_decls":{"pl":"Unspecified","src":153,"more_decls":null}{"pl":"C","src":154,"more_decls":null}{"pl":"Naked","src":155,"more_decls":null}{"pl":"Async","src":156,"more_decls":null}{"pl":"Inline","src":157,"more_decls":null}{"pl":"Interrupt","src":158,"more_decls":null}{"pl":"Signal","src":159,"more_decls":null}{"pl":"Stdcall","src":160,"more_decls":null}{"pl":"Fastcall","src":161,"more_decls":null}{"pl":"Vectorcall","src":162,"more_decls":null}{"pl":"Thiscall","src":163,"more_decls":null}{"pl":"APCS","src":164,"more_decls":null}{"pl":"AAPCS","src":165,"more_decls":null}{"pl":"AAPCSVFP","src":166,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const SourceLocation = struct ","src":171,"more_decls":{"pl":"file: [:0]const u8","src":172,"more_decls":null}{"pl":"fn_name: [:0]const u8","src":173,"more_decls":null}{"pl":"line: u32","src":174,"more_decls":null}{"pl":"column: u32","src":175,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const TypeInfo = union(enum) ","src":182,"more_decls":{"pl":"Type: void","src":183,"more_decls":null}{"pl":"Void: void","src":184,"more_decls":null}{"pl":"Bool: void","src":185,"more_decls":null}{"pl":"NoReturn: void","src":186,"more_decls":null}{"pl":"Int: Int","src":187,"more_decls":null}{"pl":"Float: Float","src":188,"more_decls":null}{"pl":"Pointer: Pointer","src":189,"more_decls":null}{"pl":"Array: Array","src":190,"more_decls":null}{"pl":"Struct: Struct","src":191,"more_decls":null}{"pl":"ComptimeFloat: void","src":192,"more_decls":null}{"pl":"ComptimeInt: void","src":193,"more_decls":null}{"pl":"Undefined: void","src":194,"more_decls":null}{"pl":"Null: void","src":195,"more_decls":null}{"pl":"Optional: Optional","src":196,"more_decls":null}{"pl":"ErrorUnion: ErrorUnion","src":197,"more_decls":null}{"pl":"ErrorSet: ErrorSet","src":198,"more_decls":null}{"pl":"Enum: Enum","src":199,"more_decls":null}{"pl":"Union: Union","src":200,"more_decls":null}{"pl":"Fn: Fn","src":201,"more_decls":null}{"pl":"BoundFn: Fn","src":202,"more_decls":null}{"pl":"Opaque: Opaque","src":203,"more_decls":null}{"pl":"Frame: Frame","src":204,"more_decls":null}{"pl":"AnyFrame: AnyFrame","src":205,"more_decls":null}{"pl":"Vector: Vector","src":206,"more_decls":null}{"pl":"EnumLiteral: void","src":207,"more_decls":null}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Int = struct ","src":211,"more_decls":{"pl":"signedness: Signedness","src":212,"more_decls":null}{"pl":"bits: comptime_int","src":213,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Float = struct ","src":218,"more_decls":{"pl":"bits: comptime_int","src":219,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Pointer = struct ","src":224,"more_decls":{"pl":"size: Size","src":225,"more_decls":null}{"pl":"is_const: bool","src":226,"more_decls":null}{"pl":"is_volatile: bool","src":227,"more_decls":null}{"pl":"alignment: comptime_int","src":228,"more_decls":null}{"pl":"child: type","src":229,"more_decls":null}{"pl":"is_allowzero: bool","src":230,"more_decls":null}{"doc_comment":"This field is an optional type.\nThe type of the sentinel is the element type of the pointer, which is\nthe value of the `child` field in this struct. However there is no way\nto refer to that type here, so we use `var`.","pl":"sentinel: anytype","src":236,"more_decls":null}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Size = enum ","src":240,"more_decls":{"pl":"One","src":241,"more_decls":null}{"pl":"Many","src":242,"more_decls":null}{"pl":"Slice","src":243,"more_decls":null}{"pl":"C","src":244,"more_decls":null}}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Array = struct ","src":250,"more_decls":{"pl":"len: comptime_int","src":251,"more_decls":null}{"pl":"child: type","src":252,"more_decls":null}{"doc_comment":"This field is an optional type.\nThe type of the sentinel is the element type of the array, which is\nthe value of the `child` field in this struct. However there is no way\nto refer to that type here, so we use `var`.","pl":"sentinel: anytype","src":258,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const ContainerLayout = enum ","src":263,"more_decls":{"pl":"Auto","src":264,"more_decls":null}{"pl":"Extern","src":265,"more_decls":null}{"pl":"Packed","src":266,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const StructField = struct ","src":271,"more_decls":{"pl":"name: []const u8","src":272,"more_decls":null}{"pl":"field_type: type","src":273,"more_decls":null}{"pl":"default_value: anytype","src":274,"more_decls":null}{"pl":"is_comptime: bool","src":275,"more_decls":null}{"pl":"alignment: comptime_int","src":276,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Struct = struct ","src":281,"more_decls":{"pl":"layout: ContainerLayout","src":282,"more_decls":null}{"pl":"fields: []const StructField","src":283,"more_decls":null}{"pl":"decls: []const Declaration","src":284,"more_decls":null}{"pl":"is_tuple: bool","src":285,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Optional = struct ","src":290,"more_decls":{"pl":"child: type","src":291,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const ErrorUnion = struct ","src":296,"more_decls":{"pl":"error_set: type","src":297,"more_decls":null}{"pl":"payload: type","src":298,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Error = struct ","src":303,"more_decls":{"pl":"name: []const u8","src":304,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const EnumField = struct ","src":313,"more_decls":{"pl":"name: []const u8","src":314,"more_decls":null}{"pl":"value: comptime_int","src":315,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Enum = struct ","src":320,"more_decls":{"pl":"layout: ContainerLayout","src":321,"more_decls":null}{"pl":"tag_type: type","src":322,"more_decls":null}{"pl":"fields: []const EnumField","src":323,"more_decls":null}{"pl":"decls: []const Declaration","src":324,"more_decls":null}{"pl":"is_exhaustive: bool","src":325,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const UnionField = struct ","src":330,"more_decls":{"pl":"name: []const u8","src":331,"more_decls":null}{"pl":"field_type: type","src":332,"more_decls":null}{"pl":"alignment: comptime_int","src":333,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Union = struct ","src":338,"more_decls":{"pl":"layout: ContainerLayout","src":339,"more_decls":null}{"pl":"tag_type: ?type","src":340,"more_decls":null}{"pl":"fields: []const UnionField","src":341,"more_decls":null}{"pl":"decls: []const Declaration","src":342,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const FnArg = struct ","src":347,"more_decls":{"pl":"is_generic: bool","src":348,"more_decls":null}{"pl":"is_noalias: bool","src":349,"more_decls":null}{"pl":"arg_type: ?type","src":350,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Fn = struct ","src":355,"more_decls":{"pl":"calling_convention: CallingConvention","src":356,"more_decls":null}{"pl":"alignment: comptime_int","src":357,"more_decls":null}{"pl":"is_generic: bool","src":358,"more_decls":null}{"pl":"is_var_args: bool","src":359,"more_decls":null}{"pl":"return_type: ?type","src":360,"more_decls":null}{"pl":"args: []const FnArg","src":361,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Opaque = struct ","src":366,"more_decls":{"pl":"decls: []const Declaration","src":367,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Frame = struct ","src":372,"more_decls":{"pl":"function: anytype","src":373,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const AnyFrame = struct ","src":378,"more_decls":{"pl":"child: ?type","src":379,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Vector = struct ","src":384,"more_decls":{"pl":"len: comptime_int","src":385,"more_decls":null}{"pl":"child: type","src":386,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Declaration = struct ","src":391,"more_decls":{"pl":"name: []const u8","src":392,"more_decls":null}{"pl":"is_pub: bool","src":393,"more_decls":null}{"pl":"data: Data","src":394,"more_decls":null}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Data = union(enum) ","src":398,"more_decls":{"pl":"Type: type","src":399,"more_decls":null}{"pl":"Var: type","src":400,"more_decls":null}{"pl":"Fn: FnDecl","src":401,"more_decls":null}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const FnDecl = struct ","src":405,"more_decls":{"pl":"fn_type: type","src":406,"more_decls":null}{"pl":"is_noinline: bool","src":407,"more_decls":null}{"pl":"is_var_args: bool","src":408,"more_decls":null}{"pl":"is_extern: bool","src":409,"more_decls":null}{"pl":"is_export: bool","src":410,"more_decls":null}{"pl":"lib_name: ?[]const u8","src":411,"more_decls":null}{"pl":"return_type: type","src":412,"more_decls":null}{"pl":"arg_names: []const []const u8","src":413,"more_decls":null}}}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"const ErrorSet = ?[]const Error","src":309,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const FloatMode = enum ","src":421,"more_decls":{"pl":"Strict","src":422,"more_decls":null}{"pl":"Optimized","src":423,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Endian = enum ","src":428,"more_decls":{"pl":"Big","src":429,"more_decls":null}{"pl":"Little","src":430,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Signedness = enum ","src":435,"more_decls":{"pl":"signed","src":436,"more_decls":null}{"pl":"unsigned","src":437,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const OutputMode = enum ","src":442,"more_decls":{"pl":"Exe","src":443,"more_decls":null}{"pl":"Lib","src":444,"more_decls":null}{"pl":"Obj","src":445,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const LinkMode = enum ","src":450,"more_decls":{"pl":"Static","src":451,"more_decls":null}{"pl":"Dynamic","src":452,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const Version = struct ","src":457,"more_decls":{"pl":"major: u32","src":458,"more_decls":null}{"pl":"minor: u32","src":459,"more_decls":null}{"pl":"patch: u32 = 0","src":460,"more_decls":null}{"pl":"pub const Range = struct ","src":462,"more_decls":{"pl":"min: Version","src":463,"more_decls":null}{"pl":"max: Version","src":464,"more_decls":null}{"pl":"pub fn includesVersion(self: Range, ver: Version) bool {\n    if (self.min.order(ver) == .gt) return false;\n    if (self.max.order(ver) == .lt) return false;\n    return true;\n}","src":466,"more_decls":null}{"doc_comment":"Checks if system is guaranteed to be at least `version` or older than `version`.\nReturns `null` if a runtime check is required.","pl":"pub fn isAtLeast(self: Range, ver: Version) ?bool {\n    if (self.min.order(ver) != .lt) return true;\n    if (self.max.order(ver) == .lt) return false;\n    return null;\n}","src":474,"more_decls":null}}{"pl":"fn order(lhs: Version, rhs: Version) std.math.Order","src":481,"more_decls":null}{"pl":"fn parse(text: []const u8) !Version","src":491,"more_decls":null}{"pl":"fn format(\n    self: Version,\n    comptime fmt: []const u8,\n    options: std.fmt.FormatOptions,\n    out_stream: anytype,\n) !void","src":515,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const CallOptions = struct ","src":589,"more_decls":{"pl":"modifier: Modifier = .auto","src":590,"more_decls":null}{"doc_comment":"Only valid when `Modifier` is `Modifier.async_kw`.","pl":"stack: ?[]align(std.Target.stack_align) u8 = null","src":593,"more_decls":null}{"pl":"pub const Modifier = enum ","src":595,"more_decls":{"doc_comment":"Equivalent to function call syntax.","pl":"auto","src":597,"more_decls":null}{"doc_comment":"Equivalent to async keyword used with function call syntax.","pl":"async_kw","src":600,"more_decls":null}{"doc_comment":"Prevents tail call optimization. This guarantees that the return\naddress will point to the callsite, as opposed to the callsite's\ncallsite. If the call is otherwise required to be tail-called\nor inlined, a compile error is emitted instead.","pl":"never_tail","src":606,"more_decls":null}{"doc_comment":"Guarantees that the call will not be inlined. If the call is\notherwise required to be inlined, a compile error is emitted instead.","pl":"never_inline","src":610,"more_decls":null}{"doc_comment":"Asserts that the function call will not suspend. This allows a\nnon-async function to call an async function.","pl":"no_async","src":614,"more_decls":null}{"doc_comment":"Guarantees that the call will be generated with tail call optimization.\nIf this is not possible, a compile error is emitted instead.","pl":"always_tail","src":618,"more_decls":null}{"doc_comment":"Guarantees that the call will inlined at the callsite.\nIf this is not possible, a compile error is emitted instead.","pl":"always_inline","src":622,"more_decls":null}{"doc_comment":"Evaluates the call at compile-time. If the call cannot be completed at\ncompile-time, a compile error is emitted instead.","pl":"compile_time","src":626,"more_decls":null}}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const ExportOptions = struct ","src":632,"more_decls":{"pl":"name: []const u8","src":633,"more_decls":null}{"pl":"linkage: GlobalLinkage = .Strong","src":634,"more_decls":null}{"pl":"section: ?[]const u8 = null","src":635,"more_decls":null}}{"doc_comment":"This data structure is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const ExternOptions = struct ","src":640,"more_decls":{"pl":"name: []const u8","src":641,"more_decls":null}{"pl":"library_name: ?[]const u8 = null","src":642,"more_decls":null}{"pl":"linkage: GlobalLinkage = .Strong","src":643,"more_decls":null}{"pl":"is_thread_local: bool = false","src":644,"more_decls":null}}{"doc_comment":"This function type is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"pub const TestFn = struct ","src":649,"more_decls":{"pl":"name: []const u8","src":650,"more_decls":null}{"pl":"func: fn () anyerror!void","src":651,"more_decls":null}{"pl":"async_frame_size: ?usize","src":652,"more_decls":null}}{"pl":"fn testVersionParse() !void","src":543,"more_decls":null}{"doc_comment":"This function is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"fn default_panic(msg: []const u8, error_return_trace: ?*StackTrace) noreturn","src":665,"more_decls":null}{"doc_comment":"Deprecated: use `std.Target`.","pl":"const Target = std.Target","src":8,"more_decls":null}{"doc_comment":"Deprecated: use `std.Target.Os`.","pl":"const Os = std.Target.Os","src":11,"more_decls":null}{"doc_comment":"Deprecated: use `std.Target.Cpu.Arch`.","pl":"const Arch = std.Target.Cpu.Arch","src":14,"more_decls":null}{"doc_comment":"Deprecated: use `std.Target.Abi`.","pl":"const Abi = std.Target.Abi","src":17,"more_decls":null}{"doc_comment":"Deprecated: use `std.Target.ObjectFormat`.","pl":"const ObjectFormat = std.Target.ObjectFormat","src":20,"more_decls":null}{"doc_comment":"Deprecated: use `std.Target.SubSystem`.","pl":"const SubSystem = std.Target.SubSystem","src":23,"more_decls":null}{"doc_comment":"Deprecated: use `std.Target.Cpu`.","pl":"const Cpu = std.Target.Cpu","src":26,"more_decls":null}{"doc_comment":"`explicit_subsystem` is missing when the subsystem is automatically detected,\nso Zig standard library has the subsystem detection logic here. This should generally be\nused rather than `explicit_subsystem`.\nOn non-Windows targets, this is `null`.","pl":"const subsystem: ?SubSystem = blk: {\n    if (@hasDecl(@This(), \"explicit_subsystem\")) break :blk explicit_subsystem;\n    switch (os.tag) {\n        .windows => {\n            if (is_test) {\n                break :blk SubSystem.Console;\n            }\n            if (@hasDecl(root, \"main\") or\n                @hasDecl(root, \"WinMain\") or\n                @hasDecl(root, \"wWinMain\") or\n                @hasDecl(root, \"WinMainCRTStartup\") or\n                @hasDecl(root, \"wWinMainCRTStartup\"))\n            {\n                break :blk SubSystem.Windows;\n            } else {\n                break :blk SubSystem.Console;\n            }\n        },\n        else => break :blk null,\n    }\n}","src":32,"more_decls":null}{"pl":"const TypeId = std.meta.Tag(TypeInfo)","src":178,"more_decls":null}{"doc_comment":"This function type is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"const PanicFn = fn ([]const u8, ?*StackTrace) noreturn","src":657,"more_decls":null}{"doc_comment":"This function is used by the Zig language code generation and\ntherefore must be kept in sync with the compiler implementation.","pl":"const panic: PanicFn = if (@hasDecl(root, \"panic\")) root.panic else default_panic","src":661,"more_decls":null}]