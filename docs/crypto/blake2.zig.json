[{"pl":"fn Blake2s(comptime out_bits: usize) type","sub_container_type":"struct ","src":39,"more_decls":{"pl":"h: [8]u32","src":73,"more_decls":null}{"pl":"t: u64","src":74,"more_decls":null}{"pl":"buf: [64]u8","src":76,"more_decls":null}{"pl":"buf_len: u8","src":77,"more_decls":null}{"pl":"pub const Options = struct ","src":47,"more_decls":{"pl":"key: ?[]const u8 = null","src":47,"more_decls":null}{"pl":"salt: ?[8]u8 = null","src":47,"more_decls":null}{"pl":"context: ?[8]u8 = null","src":47,"more_decls":null}{"pl":"expected_out_bits: usize = out_bits ","src":47,"more_decls":null}}{"pl":"fn init(options: Options) Self","src":79,"more_decls":null}{"pl":"pub fn hash(b: []const u8, out: *[digest_length]u8, options: Options) void {\n    var d = Self.init(options);\n    d.update(b);\n    d.final(out);\n}","src":107,"more_decls":null}{"pl":"fn update(d: *Self, b: []const u8) void","src":113,"more_decls":null}{"pl":"fn final(d: *Self, out: *[digest_length]u8) void","src":136,"more_decls":null}{"pl":"const block_length = 64","src":42,"more_decls":null}{"pl":"const digest_length = out_bits / 8","src":43,"more_decls":null}{"pl":"const key_length_min = 0","src":44,"more_decls":null}{"pl":"const key_length_max = 32","src":45,"more_decls":null}{"pl":"const key_length = 32","src":46,"more_decls":null}}{"pl":"fn Blake2b(comptime out_bits: usize) type","sub_container_type":"struct ","src":460,"more_decls":{"pl":"h: [8]u64","src":496,"more_decls":null}{"pl":"t: u128","src":497,"more_decls":null}{"pl":"buf: [128]u8","src":499,"more_decls":null}{"pl":"buf_len: u8","src":500,"more_decls":null}{"pl":"pub const Options = struct ","src":468,"more_decls":{"pl":"key: ?[]const u8 = null","src":468,"more_decls":null}{"pl":"salt: ?[16]u8 = null","src":468,"more_decls":null}{"pl":"context: ?[16]u8 = null","src":468,"more_decls":null}{"pl":"expected_out_bits: usize = out_bits ","src":468,"more_decls":null}}{"pl":"fn init(options: Options) Self","src":502,"more_decls":null}{"pl":"pub fn hash(b: []const u8, out: *[digest_length]u8, options: Options) void {\n    var d = Self.init(options);\n    d.update(b);\n    d.final(out);\n}","src":530,"more_decls":null}{"pl":"fn update(d: *Self, b: []const u8) void","src":536,"more_decls":null}{"pl":"fn final(d: *Self, out: *[digest_length]u8) void","src":559,"more_decls":null}{"pl":"const block_length = 128","src":463,"more_decls":null}{"pl":"const digest_length = out_bits / 8","src":464,"more_decls":null}{"pl":"const key_length_min = 0","src":465,"more_decls":null}{"pl":"const key_length_max = 64","src":466,"more_decls":null}{"pl":"const key_length = 32","src":467,"more_decls":null}}{"pl":"const Blake2s128 = Blake2s(128)","src":34,"more_decls":null}{"pl":"const Blake2s160 = Blake2s(160)","src":35,"more_decls":null}{"pl":"const Blake2s224 = Blake2s(224)","src":36,"more_decls":null}{"pl":"const Blake2s256 = Blake2s(256)","src":37,"more_decls":null}{"pl":"const Blake2b128 = Blake2b(128)","src":454,"more_decls":null}{"pl":"const Blake2b160 = Blake2b(160)","src":455,"more_decls":null}{"pl":"const Blake2b256 = Blake2b(256)","src":456,"more_decls":null}{"pl":"const Blake2b384 = Blake2b(384)","src":457,"more_decls":null}{"pl":"const Blake2b512 = Blake2b(512)","src":458,"more_decls":null}]