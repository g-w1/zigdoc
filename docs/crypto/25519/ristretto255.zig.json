[{"doc_comment":"Group operations over Edwards25519.","pl":"pub const Ristretto255 = struct ","src":10,"more_decls":{"pl":"p: Curve","src":20,"more_decls":null}{"doc_comment":"Reject the neutral element.","pl":"pub fn rejectIdentity(p: Ristretto255) callconv(.Inline) Error!void {\n    return p.p.rejectIdentity();\n}","src":45,"more_decls":null}{"doc_comment":"Decode a Ristretto255 representative.","pl":"fn fromBytes(s: [encoded_length]u8) Error!Ristretto255","src":53,"more_decls":null}{"doc_comment":"Encode to a Ristretto255 representative.","pl":"fn toBytes(e: Ristretto255) [encoded_length]u8","src":83,"more_decls":null}{"doc_comment":"Map a 64-bit string into a Ristretto255 group element","pl":"pub fn fromUniform(h: [64]u8) Ristretto255 {\n    const p0 = elligator(Fe.fromBytes(h[0..32].*));\n    const p1 = elligator(Fe.fromBytes(h[32..64].*));\n    return Ristretto255{ .p = p0.add(p1) };\n}","src":137,"more_decls":null}{"doc_comment":"Double a Ristretto255 element.","pl":"pub fn dbl(p: Ristretto255) callconv(.Inline) Ristretto255 {\n    return .{ .p = p.p.dbl() };\n}","src":144,"more_decls":null}{"doc_comment":"Add two Ristretto255 elements.","pl":"pub fn add(p: Ristretto255, q: Ristretto255) callconv(.Inline) Ristretto255 {\n    return .{ .p = p.p.add(q.p) };\n}","src":149,"more_decls":null}{"doc_comment":"Multiply a Ristretto255 element with a scalar.\nReturn error.WeakPublicKey if the resulting element is\nthe identity element.","pl":"pub fn mul(p: Ristretto255, s: [encoded_length]u8) callconv(.Inline) Error!Ristretto255 {\n    return Ristretto255{ .p = try p.p.mul(s) };\n}","src":156,"more_decls":null}{"doc_comment":"Return true if two Ristretto255 elements are equivalent","pl":"fn equivalent(p: Ristretto255, q: Ristretto255) bool","src":161,"more_decls":null}{"doc_comment":"The underlying elliptic curve.","pl":"const Curve = @import(\"edwards25519.zig\").Edwards25519","src":12,"more_decls":null}{"doc_comment":"The underlying prime field.","pl":"const Fe = Curve.Fe","src":14,"more_decls":null}{"doc_comment":"Field arithmetic mod the order of the main subgroup.","pl":"const scalar = Curve.scalar","src":16,"more_decls":null}{"doc_comment":"Length in byte of an encoded element.","pl":"const encoded_length: usize = 32","src":18,"more_decls":null}{"doc_comment":"The base point (Ristretto is a curve in desguise).","pl":"const basePoint = Ristretto255{ .p = Curve.basePoint }","src":50,"more_decls":null}}]