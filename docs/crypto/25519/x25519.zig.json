[{"doc_comment":"X25519 DH function.","pl":"pub const X25519 = struct ","src":14,"more_decls":{"doc_comment":"An X25519 key pair.","pl":"pub const KeyPair = struct ","src":27,"more_decls":{"doc_comment":"Public part.","pl":"public_key: [public_length]u8","src":29,"more_decls":null}{"doc_comment":"Secret part.","pl":"secret_key: [secret_length]u8","src":31,"more_decls":null}{"doc_comment":"Create a new key pair using an optional seed.","pl":"fn create(seed: ?[seed_length]u8) Error!KeyPair","src":34,"more_decls":null}{"doc_comment":"Create a key pair from an Ed25519 key pair","pl":"fn fromEd25519(ed25519_key_pair: crypto.sign.Ed25519.KeyPair) Error!KeyPair","src":47,"more_decls":null}}{"doc_comment":"Compute the public key for a given private key.","pl":"pub fn recoverPublicKey(secret_key: [secret_length]u8) Error![public_length]u8 {\n    const q = try Curve.basePoint.clampedMul(secret_key);\n    return q.toBytes();\n}","src":62,"more_decls":null}{"doc_comment":"Compute the X25519 equivalent to an Ed25519 public eky.","pl":"pub fn publicKeyFromEd25519(ed25519_public_key: [crypto.sign.Ed25519.public_length]u8) Error![public_length]u8 {\n    const pk_ed = try crypto.ecc.Edwards25519.fromBytes(ed25519_public_key);\n    const pk = try Curve.fromEdwards25519(pk_ed);\n    return pk.toBytes();\n}","src":68,"more_decls":null}{"doc_comment":"Compute the scalar product of a public key and a secret scalar.\nNote that the output should not be used as a shared secret without\nhashing it first.","pl":"pub fn scalarmult(secret_key: [secret_length]u8, public_key: [public_length]u8) Error![shared_length]u8 {\n    const q = try Curve.fromBytes(public_key).clampedMul(secret_key);\n    return q.toBytes();\n}","src":77,"more_decls":null}{"doc_comment":"The underlying elliptic curve.","pl":"const Curve = @import(\"curve25519.zig\").Curve25519","src":16,"more_decls":null}{"doc_comment":"Length (in bytes) of a secret key.","pl":"const secret_length = 32","src":18,"more_decls":null}{"doc_comment":"Length (in bytes) of a public key.","pl":"const public_length = 32","src":20,"more_decls":null}{"doc_comment":"Length (in bytes) of the output of the DH function.","pl":"const shared_length = 32","src":22,"more_decls":null}{"doc_comment":"Seed (for key pair creation) length in bytes.","pl":"const seed_length = 32","src":24,"more_decls":null}}]