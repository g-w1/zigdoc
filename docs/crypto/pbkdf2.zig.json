[{"doc_comment":"Apply PBKDF2 to generate a key from a password.\n\nPBKDF2 is defined in RFC 2898, and is a recommendation of NIST SP 800-132.\n\ndk: Slice of appropriate size for generated key. Generally 16 or 32 bytes in length.\nMay be uninitialized. All bytes will be overwritten.\nMaximum size is `maxInt(u32) * Hash.digest_length`\nIt is a programming error to pass buffer longer than the maximum size.\n\npassword: Arbitrary sequence of bytes of any length, including empty.\n\nsalt: Arbitrary sequence of bytes of any length, including empty. A common length is 8 bytes.\n\nrounds: Iteration count. Must be greater than 0. Common values range from 1,000 to 100,000.\nLarger iteration counts improve security by increasing the time required to compute\nthe dk. It is common to tune this parameter to achieve approximately 100ms.\n\nPrf: Pseudo-random function to use. A common choice is `std.crypto.auth.hmac.HmacSha256`.","pl":"fn pbkdf2(dk: []u8, password: []const u8, salt: []const u8, rounds: u32, comptime Prf: type) Error!void","src":57,"more_decls":null}]