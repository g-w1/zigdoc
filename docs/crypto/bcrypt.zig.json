[{"doc_comment":"Compute a hash of a password using 2^rounds_log rounds of the bcrypt key stretching function.\nbcrypt is a computationally expensive and cache-hard function, explicitly designed to slow down exhaustive searches.\n\nThe function returns a string that includes all the parameters required for verification.\n\nIMPORTANT: by design, bcrypt silently truncates passwords to 72 bytes.\nIf this is an issue for your application, hash the password first using a function such as SHA-512,\nand then use the resulting hash as the password parameter for bcrypt.","pl":"pub fn strHash(password: []const u8, rounds_log: u6) Error![hash_length]u8 {\n    var salt: [salt_length]u8 = undefined;\n    crypto.random.bytes(&salt);\n    return strHashInternal(password, rounds_log, salt);\n}","src":254,"more_decls":null}{"doc_comment":"Verify that a previously computed hash is valid for a given password.","pl":"fn strVerify(h: [hash_length]u8, password: []const u8) Error!void","src":261,"more_decls":null}{"doc_comment":"Length (in bytes) of a password hash","pl":"const hash_length: usize = 60","src":22,"more_decls":null}]