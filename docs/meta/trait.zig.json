[{"pl":"fn multiTrait(comptime traits: anytype) TraitFn","src":16,"more_decls":null}{"pl":"fn hasFn(comptime name: []const u8) TraitFn","src":51,"more_decls":null}{"pl":"fn hasField(comptime name: []const u8) TraitFn","src":73,"more_decls":null}{"pl":"fn is(comptime id: builtin.TypeId) TraitFn","src":105,"more_decls":null}{"pl":"fn isPtrTo(comptime id: builtin.TypeId) TraitFn","src":122,"more_decls":null}{"pl":"fn isSliceOf(comptime id: builtin.TypeId) TraitFn","src":138,"more_decls":null}{"pl":"fn isExtern(comptime T: type) bool","src":159,"more_decls":null}{"pl":"fn isPacked(comptime T: type) bool","src":177,"more_decls":null}{"pl":"pub fn isUnsignedInt(comptime T: type) bool {\n    return switch (@typeInfo(T)) {\n        .Int => |i| i.signedness == .unsigned,\n        else => false,\n    };\n}","src":195,"more_decls":null}{"pl":"fn isSignedInt(comptime T: type) bool","src":209,"more_decls":null}{"pl":"pub fn isSingleItemPtr(comptime T: type) bool {\n    if (comptime is(.Pointer)(T)) {\n        return @typeInfo(T).Pointer.size == .One;\n    }\n    return false;\n}","src":224,"more_decls":null}{"pl":"pub fn isManyItemPtr(comptime T: type) bool {\n    if (comptime is(.Pointer)(T)) {\n        return @typeInfo(T).Pointer.size == .Many;\n    }\n    return false;\n}","src":239,"more_decls":null}{"pl":"pub fn isSlice(comptime T: type) bool {\n    if (comptime is(.Pointer)(T)) {\n        return @typeInfo(T).Pointer.size == .Slice;\n    }\n    return false;\n}","src":254,"more_decls":null}{"pl":"fn isIndexable(comptime T: type) bool","src":269,"more_decls":null}{"pl":"pub fn isNumber(comptime T: type) bool {\n    return switch (@typeInfo(T)) {\n        .Int, .Float, .ComptimeInt, .ComptimeFloat => true,\n        else => false,\n    };\n}","src":293,"more_decls":null}{"pl":"pub fn isIntegerNumber(comptime T: type) bool {\n    return switch (@typeInfo(T)) {\n        .Int, .ComptimeInt => true,\n        else => false,\n    };\n}","src":300,"more_decls":null}{"pl":"pub fn isFloatingNumber(comptime T: type) bool {\n    return switch (@typeInfo(T)) {\n        .Float, .ComptimeFloat => true,\n        else => false,\n    };\n}","src":307,"more_decls":null}{"pl":"pub fn isIntegral(comptime T: type) bool {\n    return switch (@typeInfo(T)) {\n        .Int, .ComptimeInt => true,\n        else => false,\n    };\n}","src":328,"more_decls":null}{"pl":"pub fn isFloat(comptime T: type) bool {\n    return switch (@typeInfo(T)) {\n        .Float, .ComptimeFloat => true,\n        else => false,\n    };\n}","src":344,"more_decls":null}{"pl":"pub fn isConstPtr(comptime T: type) bool {\n    if (!comptime is(.Pointer)(T)) return false;\n    return @typeInfo(T).Pointer.is_const;\n}","src":360,"more_decls":null}{"pl":"pub fn isContainer(comptime T: type) bool {\n    return switch (@typeInfo(T)) {\n        .Struct, .Union, .Enum => true,\n        else => false,\n    };\n}","src":374,"more_decls":null}{"pl":"pub fn isTuple(comptime T: type) bool {\n    return is(.Struct)(T) and @typeInfo(T).Struct.is_tuple;\n}","src":397,"more_decls":null}{"doc_comment":"Returns true if the passed type will coerce to []const u8.\nAny of the following are considered strings:\n```\n[]const u8, [:S]const u8, *const [N]u8, *const [N:S]u8,\n[]u8, [:S]u8, *[:S]u8, *[N:S]u8.\n```\nThese types are not considered strings:\n```\nu8, [N]u8, [*]const u8, [*:0]const u8,\n[*]const [N]u8, []const u16, []const i8,\n*const u8, ?[]const u8, ?*const [N]u8.\n```","pl":"fn isZigString(comptime T: type) bool","src":422,"more_decls":null}{"pl":"fn hasDecls(comptime T: type, comptime names: anytype) bool","src":488,"more_decls":null}{"pl":"fn hasFields(comptime T: type, comptime names: anytype) bool","src":514,"more_decls":null}{"pl":"fn hasFunctions(comptime T: type, comptime names: anytype) bool","src":540,"more_decls":null}{"doc_comment":"True if every value of the type `T` has a unique bit pattern representing it.\nIn other words, `T` has no unused bits and no padding.","pl":"fn hasUniqueRepresentation(comptime T: type) bool","src":565,"more_decls":null}{"pl":"const TraitFn = fn (type) bool","src":14,"more_decls":null}]