[{"doc_comment":"This is useful for saving memory when allocating an object that has many\noptional components. The optional objects are allocated sequentially in\nmemory, and a single integer is used to represent each optional object\nand whether it is present based on each corresponding bit.","pl":"fn TrailerFlags(comptime Fields: type) type","sub_container_type":"struct ","src":16,"more_decls":{"pl":"bits: Int","src":18,"more_decls":null}{"pl":"pub fn has(self: Self, comptime field: FieldEnum) bool {\n    const field_index = @enumToInt(field);\n    return (self.bits & (1 << field_index)) != 0;\n}","src":51,"more_decls":null}{"pl":"pub fn get(self: Self, p: [*]align(@alignOf(Fields)) const u8, comptime field: FieldEnum) ?Field(field) {\n    if (!self.has(field))\n        return null;\n    return self.ptrConst(p, field).*;\n}","src":56,"more_decls":null}{"pl":"pub fn setFlag(self: *Self, comptime field: FieldEnum) void {\n    const field_index = @enumToInt(field);\n    self.bits |= 1 << field_index;\n}","src":62,"more_decls":null}{"doc_comment":"`fields` is a struct with each field set to an optional value.\nOnly the non-null bits are observed and are used to set the flag bits.","pl":"fn init(fields: InitStruct) Self","src":69,"more_decls":null}{"doc_comment":"`fields` is a struct with each field set to an optional value (same as `init`).","pl":"pub fn setMany(self: Self, p: [*]align(@alignOf(Fields)) u8, fields: InitStruct) void {\n    inline for (@typeInfo(Fields).Struct.fields) |field, i| {\n        if (@field(fields, field.name)) |value|\n            self.set(p, @intToEnum(FieldEnum, i), value);\n    }\n}","src":79,"more_decls":null}{"pl":"fn set(\n    self: Self,\n    p: [*]align(@alignOf(Fields)) u8,\n    comptime field: FieldEnum,\n    value: Field(field),\n) void","src":86,"more_decls":null}{"pl":"pub fn ptr(self: Self, p: [*]align(@alignOf(Fields)) u8, comptime field: FieldEnum) *Field(field) {\n    if (@sizeOf(Field(field)) == 0)\n        return undefined;\n    const off = self.offset(p, field);\n    return @ptrCast(*Field(field), @alignCast(@alignOf(Field(field)), p + off));\n}","src":95,"more_decls":null}{"pl":"pub fn ptrConst(self: Self, p: [*]align(@alignOf(Fields)) const u8, comptime field: FieldEnum) *const Field(field) {\n    if (@sizeOf(Field(field)) == 0)\n        return undefined;\n    const off = self.offset(p, field);\n    return @ptrCast(*const Field(field), @alignCast(@alignOf(Field(field)), p + off));\n}","src":102,"more_decls":null}{"pl":"fn offset(self: Self, p: [*]align(@alignOf(Fields)) const u8, comptime field: FieldEnum) usize","src":109,"more_decls":null}{"pl":"pub fn Field(comptime field: FieldEnum) type {\n    return @typeInfo(Fields).Struct.fields[@enumToInt(field)].field_type;\n}","src":123,"more_decls":null}{"pl":"fn sizeInBytes(self: Self) usize","src":127,"more_decls":null}{"pl":"const Int = meta.Int(.unsigned, bit_count)","src":20,"more_decls":null}{"pl":"const bit_count = @typeInfo(Fields).Struct.fields.len","src":21,"more_decls":null}{"pl":"const FieldEnum = std.meta.FieldEnum(Fields)","src":23,"more_decls":null}{"pl":"const InitStruct = blk: {\n            comptime var fields: [bit_count]TypeInfo.StructField = undefined;\n            inline for (@typeInfo(Fields).Struct.fields) |struct_field, i| {\n                fields[i] = TypeInfo.StructField{\n                    .name = struct_field.name,\n                    .field_type = ?struct_field.field_type,\n                    .default_value = @as(\n                        ??struct_field.field_type,\n                        @as(?struct_field.field_type, null),\n                    ),\n                    .is_comptime = false,\n                    .alignment = @alignOf(?struct_field.field_type),\n                };\n            }\n            break :blk @Type(.{\n                .Struct = .{\n                    .layout = .Auto,\n                    .fields = &fields,\n                    .decls = &[_]TypeInfo.Declaration{},\n                    .is_tuple = false,\n                },\n            });\n        }","src":25,"more_decls":null}{"pl":"const Self = @This()","src":49,"more_decls":null}}]