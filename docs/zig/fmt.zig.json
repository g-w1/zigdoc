[{"doc_comment":"Print the string as a Zig identifier escaping it with @\"\" syntax if needed.","pl":"fn formatId(\n    bytes: []const u8,\n    comptime fmt: []const u8,\n    options: std.fmt.FormatOptions,\n    writer: anytype,\n) !void","src":4,"more_decls":null}{"doc_comment":"Return a Formatter for a Zig identifier","pl":"pub fn fmtId(bytes: []const u8) std.fmt.Formatter(formatId) {\n    return .{ .data = bytes };\n}","src":19,"more_decls":null}{"pl":"fn isValidId(bytes: []const u8) bool","src":23,"more_decls":null}{"doc_comment":"Print the string as escaped contents of a double quoted or single-quoted string.\nFormat `{}` treats contents as a double-quoted string.\nFormat `{'}` treats contents as a single-quoted string.","pl":"fn formatEscapes(\n    bytes: []const u8,\n    comptime fmt: []const u8,\n    options: std.fmt.FormatOptions,\n    writer: anytype,\n) !void","src":37,"more_decls":null}{"doc_comment":"Return a Formatter for Zig Escapes of a double quoted string.\nThe format specifier must be one of:\n* `{}` treats contents as a double-quoted string.\n* `{'}` treats contents as a single-quoted string.","pl":"pub fn fmtEscapes(bytes: []const u8) std.fmt.Formatter(formatEscapes) {\n    return .{ .data = bytes };\n}","src":79,"more_decls":null}]