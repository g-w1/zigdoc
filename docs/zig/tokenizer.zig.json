[{"pl":"pub const Token = struct ","src":8,"more_decls":{"pl":"tag: Tag","src":9,"more_decls":null}{"pl":"loc: Loc","src":10,"more_decls":null}{"pl":"pub const Loc = struct ","src":12,"more_decls":{"pl":"start: usize","src":13,"more_decls":null}{"pl":"end: usize","src":14,"more_decls":null}}{"pl":"pub const Tag = enum ","src":76,"more_decls":{"pl":"invalid","src":77,"more_decls":null}{"pl":"invalid_ampersands","src":78,"more_decls":null}{"pl":"invalid_periodasterisks","src":79,"more_decls":null}{"pl":"identifier","src":80,"more_decls":null}{"pl":"string_literal","src":81,"more_decls":null}{"pl":"multiline_string_literal_line","src":82,"more_decls":null}{"pl":"char_literal","src":83,"more_decls":null}{"pl":"eof","src":84,"more_decls":null}{"pl":"builtin","src":85,"more_decls":null}{"pl":"bang","src":86,"more_decls":null}{"pl":"pipe","src":87,"more_decls":null}{"pl":"pipe_pipe","src":88,"more_decls":null}{"pl":"pipe_equal","src":89,"more_decls":null}{"pl":"equal","src":90,"more_decls":null}{"pl":"equal_equal","src":91,"more_decls":null}{"pl":"equal_angle_bracket_right","src":92,"more_decls":null}{"pl":"bang_equal","src":93,"more_decls":null}{"pl":"l_paren","src":94,"more_decls":null}{"pl":"r_paren","src":95,"more_decls":null}{"pl":"semicolon","src":96,"more_decls":null}{"pl":"percent","src":97,"more_decls":null}{"pl":"percent_equal","src":98,"more_decls":null}{"pl":"l_brace","src":99,"more_decls":null}{"pl":"r_brace","src":100,"more_decls":null}{"pl":"l_bracket","src":101,"more_decls":null}{"pl":"r_bracket","src":102,"more_decls":null}{"pl":"period","src":103,"more_decls":null}{"pl":"period_asterisk","src":104,"more_decls":null}{"pl":"ellipsis2","src":105,"more_decls":null}{"pl":"ellipsis3","src":106,"more_decls":null}{"pl":"caret","src":107,"more_decls":null}{"pl":"caret_equal","src":108,"more_decls":null}{"pl":"plus","src":109,"more_decls":null}{"pl":"plus_plus","src":110,"more_decls":null}{"pl":"plus_equal","src":111,"more_decls":null}{"pl":"plus_percent","src":112,"more_decls":null}{"pl":"plus_percent_equal","src":113,"more_decls":null}{"pl":"minus","src":114,"more_decls":null}{"pl":"minus_equal","src":115,"more_decls":null}{"pl":"minus_percent","src":116,"more_decls":null}{"pl":"minus_percent_equal","src":117,"more_decls":null}{"pl":"asterisk","src":118,"more_decls":null}{"pl":"asterisk_equal","src":119,"more_decls":null}{"pl":"asterisk_asterisk","src":120,"more_decls":null}{"pl":"asterisk_percent","src":121,"more_decls":null}{"pl":"asterisk_percent_equal","src":122,"more_decls":null}{"pl":"arrow","src":123,"more_decls":null}{"pl":"colon","src":124,"more_decls":null}{"pl":"slash","src":125,"more_decls":null}{"pl":"slash_equal","src":126,"more_decls":null}{"pl":"comma","src":127,"more_decls":null}{"pl":"ampersand","src":128,"more_decls":null}{"pl":"ampersand_equal","src":129,"more_decls":null}{"pl":"question_mark","src":130,"more_decls":null}{"pl":"angle_bracket_left","src":131,"more_decls":null}{"pl":"angle_bracket_left_equal","src":132,"more_decls":null}{"pl":"angle_bracket_angle_bracket_left","src":133,"more_decls":null}{"pl":"angle_bracket_angle_bracket_left_equal","src":134,"more_decls":null}{"pl":"angle_bracket_right","src":135,"more_decls":null}{"pl":"angle_bracket_right_equal","src":136,"more_decls":null}{"pl":"angle_bracket_angle_bracket_right","src":137,"more_decls":null}{"pl":"angle_bracket_angle_bracket_right_equal","src":138,"more_decls":null}{"pl":"tilde","src":139,"more_decls":null}{"pl":"integer_literal","src":140,"more_decls":null}{"pl":"float_literal","src":141,"more_decls":null}{"pl":"doc_comment","src":142,"more_decls":null}{"pl":"container_doc_comment","src":143,"more_decls":null}{"pl":"keyword_align","src":144,"more_decls":null}{"pl":"keyword_allowzero","src":145,"more_decls":null}{"pl":"keyword_and","src":146,"more_decls":null}{"pl":"keyword_anyframe","src":147,"more_decls":null}{"pl":"keyword_anytype","src":148,"more_decls":null}{"pl":"keyword_asm","src":149,"more_decls":null}{"pl":"keyword_async","src":150,"more_decls":null}{"pl":"keyword_await","src":151,"more_decls":null}{"pl":"keyword_break","src":152,"more_decls":null}{"pl":"keyword_callconv","src":153,"more_decls":null}{"pl":"keyword_catch","src":154,"more_decls":null}{"pl":"keyword_comptime","src":155,"more_decls":null}{"pl":"keyword_const","src":156,"more_decls":null}{"pl":"keyword_continue","src":157,"more_decls":null}{"pl":"keyword_defer","src":158,"more_decls":null}{"pl":"keyword_else","src":159,"more_decls":null}{"pl":"keyword_enum","src":160,"more_decls":null}{"pl":"keyword_errdefer","src":161,"more_decls":null}{"pl":"keyword_error","src":162,"more_decls":null}{"pl":"keyword_export","src":163,"more_decls":null}{"pl":"keyword_extern","src":164,"more_decls":null}{"pl":"keyword_false","src":165,"more_decls":null}{"pl":"keyword_fn","src":166,"more_decls":null}{"pl":"keyword_for","src":167,"more_decls":null}{"pl":"keyword_if","src":168,"more_decls":null}{"pl":"keyword_inline","src":169,"more_decls":null}{"pl":"keyword_noalias","src":170,"more_decls":null}{"pl":"keyword_noinline","src":171,"more_decls":null}{"pl":"keyword_nosuspend","src":172,"more_decls":null}{"pl":"keyword_null","src":173,"more_decls":null}{"pl":"keyword_opaque","src":174,"more_decls":null}{"pl":"keyword_or","src":175,"more_decls":null}{"pl":"keyword_orelse","src":176,"more_decls":null}{"pl":"keyword_packed","src":177,"more_decls":null}{"pl":"keyword_pub","src":178,"more_decls":null}{"pl":"keyword_resume","src":179,"more_decls":null}{"pl":"keyword_return","src":180,"more_decls":null}{"pl":"keyword_linksection","src":181,"more_decls":null}{"pl":"keyword_struct","src":182,"more_decls":null}{"pl":"keyword_suspend","src":183,"more_decls":null}{"pl":"keyword_switch","src":184,"more_decls":null}{"pl":"keyword_test","src":185,"more_decls":null}{"pl":"keyword_threadlocal","src":186,"more_decls":null}{"pl":"keyword_true","src":187,"more_decls":null}{"pl":"keyword_try","src":188,"more_decls":null}{"pl":"keyword_undefined","src":189,"more_decls":null}{"pl":"keyword_union","src":190,"more_decls":null}{"pl":"keyword_unreachable","src":191,"more_decls":null}{"pl":"keyword_usingnamespace","src":192,"more_decls":null}{"pl":"keyword_var","src":193,"more_decls":null}{"pl":"keyword_volatile","src":194,"more_decls":null}{"pl":"keyword_while","src":195,"more_decls":null}{"pl":"fn lexeme(tag: Tag) ?[]const u8","src":197,"more_decls":null}{"pl":"pub fn symbol(tag: Tag) []const u8 {\n    return tag.lexeme() orelse @tagName(tag);\n}","src":323,"more_decls":null}}{"pl":"pub fn getKeyword(bytes: []const u8) ?Tag {\n    return keywords.get(bytes);\n}","src":72,"more_decls":null}{"pl":"const keywords = std.ComptimeStringMap(Tag, .{\n        .{ \"align\", .keyword_align },\n        .{ \"allowzero\", .keyword_allowzero },\n        .{ \"and\", .keyword_and },\n        .{ \"anyframe\", .keyword_anyframe },\n        .{ \"anytype\", .keyword_anytype },\n        .{ \"asm\", .keyword_asm },\n        .{ \"async\", .keyword_async },\n        .{ \"await\", .keyword_await },\n        .{ \"break\", .keyword_break },\n        .{ \"callconv\", .keyword_callconv },\n        .{ \"catch\", .keyword_catch },\n        .{ \"comptime\", .keyword_comptime },\n        .{ \"const\", .keyword_const },\n        .{ \"continue\", .keyword_continue },\n        .{ \"defer\", .keyword_defer },\n        .{ \"else\", .keyword_else },\n        .{ \"enum\", .keyword_enum },\n        .{ \"errdefer\", .keyword_errdefer },\n        .{ \"error\", .keyword_error },\n        .{ \"export\", .keyword_export },\n        .{ \"extern\", .keyword_extern },\n        .{ \"false\", .keyword_false },\n        .{ \"fn\", .keyword_fn },\n        .{ \"for\", .keyword_for },\n        .{ \"if\", .keyword_if },\n        .{ \"inline\", .keyword_inline },\n        .{ \"noalias\", .keyword_noalias },\n        .{ \"noinline\", .keyword_noinline },\n        .{ \"nosuspend\", .keyword_nosuspend },\n        .{ \"null\", .keyword_null },\n        .{ \"opaque\", .keyword_opaque },\n        .{ \"or\", .keyword_or },\n        .{ \"orelse\", .keyword_orelse },\n        .{ \"packed\", .keyword_packed },\n        .{ \"pub\", .keyword_pub },\n        .{ \"resume\", .keyword_resume },\n        .{ \"return\", .keyword_return },\n        .{ \"linksection\", .keyword_linksection },\n        .{ \"struct\", .keyword_struct },\n        .{ \"suspend\", .keyword_suspend },\n        .{ \"switch\", .keyword_switch },\n        .{ \"test\", .keyword_test },\n        .{ \"threadlocal\", .keyword_threadlocal },\n        .{ \"true\", .keyword_true },\n        .{ \"try\", .keyword_try },\n        .{ \"undefined\", .keyword_undefined },\n        .{ \"union\", .keyword_union },\n        .{ \"unreachable\", .keyword_unreachable },\n        .{ \"usingnamespace\", .keyword_usingnamespace },\n        .{ \"var\", .keyword_var },\n        .{ \"volatile\", .keyword_volatile },\n        .{ \"while\", .keyword_while },\n    })","src":17,"more_decls":null}}{"pl":"pub const Tokenizer = struct ","src":329,"more_decls":{"pl":"buffer: []const u8","src":330,"more_decls":null}{"pl":"index: usize","src":331,"more_decls":null}{"pl":"pending_invalid_token: ?Token","src":332,"more_decls":null}{"doc_comment":"For debugging purposes","pl":"pub fn dump(self: *Tokenizer, token: *const Token) void {\n    std.debug.warn(\"{s} \\\"{s}\\\"\\n\", .{ @tagName(token.tag), self.buffer[token.start..token.end] });\n}","src":335,"more_decls":null}{"pl":"fn init(buffer: []const u8) Tokenizer","src":339,"more_decls":null}{"pl":"fn next(self: *Tokenizer) Token","src":415,"more_decls":null}}]