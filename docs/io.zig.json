[{"pl":"pub const Mode = enum ","src":19,"more_decls":{"doc_comment":"I/O operates normally, waiting for the operating system syscalls to complete.","pl":"blocking","src":21,"more_decls":null}{"doc_comment":"I/O functions are generated async and rely on a global event loop. Event-based I/O.","pl":"evented","src":24,"more_decls":null}}{"doc_comment":"TODO: async stdout on windows without a dedicated thread.\nhttps://github.com/ziglang/zig/pull/4816#issuecomment-604521023","pl":"fn getStdOut() File","src":56,"more_decls":null}{"doc_comment":"This returns a `File` that is configured to block with every write, in order\nto facilitate better debugging. This can be changed by modifying the `intended_io_mode` field.","pl":"fn getStdErr() File","src":78,"more_decls":null}{"doc_comment":"TODO: async stdin on windows without a dedicated thread.\nhttps://github.com/ziglang/zig/pull/4816#issuecomment-604521023","pl":"fn getStdIn() File","src":100,"more_decls":null}{"doc_comment":"The application's chosen I/O mode. This defaults to `Mode.blocking` but can be overridden\nby `root.event_loop`.","pl":"const mode: Mode = if (@hasDecl(root, \"io_mode\"))\n    root.io_mode\nelse if (@hasDecl(root, \"event_loop\"))\n    Mode.evented\nelse\n    Mode.blocking","src":29,"more_decls":null}{"pl":"const is_async = mode != .blocking","src":35,"more_decls":null}{"doc_comment":"This is an enum value to use for I/O mode at runtime, since it takes up zero bytes at runtime,\nand makes expressions comptime-known when `is_async` is `false`.","pl":"const ModeOverride = if (is_async) Mode else enum { blocking }","src":39,"more_decls":null}{"pl":"const default_mode: ModeOverride = if (is_async) Mode.evented else .blocking","src":40,"more_decls":null}{"pl":"const Reader = @import(\"io/reader.zig\").Reader","src":108,"more_decls":null}{"pl":"const Writer = @import(\"io/writer.zig\").Writer","src":109,"more_decls":null}{"pl":"const SeekableStream = @import(\"io/seekable_stream.zig\").SeekableStream","src":110,"more_decls":null}{"pl":"const BufferedWriter = @import(\"io/buffered_writer.zig\").BufferedWriter","src":112,"more_decls":null}{"pl":"const bufferedWriter = @import(\"io/buffered_writer.zig\").bufferedWriter","src":113,"more_decls":null}{"pl":"const BufferedReader = @import(\"io/buffered_reader.zig\").BufferedReader","src":115,"more_decls":null}{"pl":"const bufferedReader = @import(\"io/buffered_reader.zig\").bufferedReader","src":116,"more_decls":null}{"pl":"const PeekStream = @import(\"io/peek_stream.zig\").PeekStream","src":118,"more_decls":null}{"pl":"const peekStream = @import(\"io/peek_stream.zig\").peekStream","src":119,"more_decls":null}{"pl":"const FixedBufferStream = @import(\"io/fixed_buffer_stream.zig\").FixedBufferStream","src":121,"more_decls":null}{"pl":"const fixedBufferStream = @import(\"io/fixed_buffer_stream.zig\").fixedBufferStream","src":122,"more_decls":null}{"pl":"const CWriter = @import(\"io/c_writer.zig\").CWriter","src":124,"more_decls":null}{"pl":"const cWriter = @import(\"io/c_writer.zig\").cWriter","src":125,"more_decls":null}{"pl":"const LimitedReader = @import(\"io/limited_reader.zig\").LimitedReader","src":127,"more_decls":null}{"pl":"const limitedReader = @import(\"io/limited_reader.zig\").limitedReader","src":128,"more_decls":null}{"pl":"const CountingWriter = @import(\"io/counting_writer.zig\").CountingWriter","src":130,"more_decls":null}{"pl":"const countingWriter = @import(\"io/counting_writer.zig\").countingWriter","src":131,"more_decls":null}{"pl":"const CountingReader = @import(\"io/counting_reader.zig\").CountingReader","src":132,"more_decls":null}{"pl":"const countingReader = @import(\"io/counting_reader.zig\").countingReader","src":133,"more_decls":null}{"pl":"const MultiWriter = @import(\"io/multi_writer.zig\").MultiWriter","src":135,"more_decls":null}{"pl":"const multiWriter = @import(\"io/multi_writer.zig\").multiWriter","src":136,"more_decls":null}{"pl":"const BitReader = @import(\"io/bit_reader.zig\").BitReader","src":138,"more_decls":null}{"pl":"const bitReader = @import(\"io/bit_reader.zig\").bitReader","src":139,"more_decls":null}{"pl":"const BitWriter = @import(\"io/bit_writer.zig\").BitWriter","src":141,"more_decls":null}{"pl":"const bitWriter = @import(\"io/bit_writer.zig\").bitWriter","src":142,"more_decls":null}{"pl":"const ChangeDetectionStream = @import(\"io/change_detection_stream.zig\").ChangeDetectionStream","src":144,"more_decls":null}{"pl":"const changeDetectionStream = @import(\"io/change_detection_stream.zig\").changeDetectionStream","src":145,"more_decls":null}{"pl":"const FindByteWriter = @import(\"io/find_byte_writer.zig\").FindByteWriter","src":147,"more_decls":null}{"pl":"const findByteWriter = @import(\"io/find_byte_writer.zig\").findByteWriter","src":148,"more_decls":null}{"doc_comment":"Deprecated: use `FindByteWriter`.","pl":"const FindByteOutStream = FindByteWriter","src":150,"more_decls":null}{"doc_comment":"Deprecated: use `findByteWriter`.","pl":"const findByteOutStream = findByteWriter","src":152,"more_decls":null}{"pl":"const BufferedAtomicFile = @import(\"io/buffered_atomic_file.zig\").BufferedAtomicFile","src":154,"more_decls":null}{"pl":"const StreamSource = @import(\"io/stream_source.zig\").StreamSource","src":156,"more_decls":null}{"doc_comment":"A Writer that doesn't write to anything.","pl":"const null_writer = @as(NullWriter, .{ .context = {} })","src":159,"more_decls":null}{"pl":"const writeFile = @compileError(\"deprecated: use std.fs.Dir.writeFile with math.maxInt(usize)\")","src":188,"more_decls":null}{"pl":"const readFileAlloc = @compileError(\"deprecated: use std.fs.Dir.readFileAlloc\")","src":189,"more_decls":null}]