[{"pl":"extern \"c\" fn fopen(noalias filename: [*:0]const u8, noalias modes: [*:0]const u8) ?*FILE","src":75,"more_decls":null}{"pl":"extern \"c\" fn fclose(stream: *FILE) c_int","src":76,"more_decls":null}{"pl":"extern \"c\" fn fwrite(noalias ptr: [*]const u8, size_of_type: usize, item_count: usize, noalias stream: *FILE) usize","src":77,"more_decls":null}{"pl":"extern \"c\" fn fread(noalias ptr: [*]u8, size_of_type: usize, item_count: usize, noalias stream: *FILE) usize","src":78,"more_decls":null}{"pl":"extern \"c\" fn printf(format: [*:0]const u8, ...) c_int","src":80,"more_decls":null}{"pl":"extern \"c\" fn abort() noreturn","src":81,"more_decls":null}{"pl":"extern \"c\" fn exit(code: c_int) noreturn","src":82,"more_decls":null}{"pl":"extern \"c\" fn _exit(code: c_int) noreturn","src":83,"more_decls":null}{"pl":"extern \"c\" fn isatty(fd: fd_t) c_int","src":84,"more_decls":null}{"pl":"extern \"c\" fn close(fd: fd_t) c_int","src":85,"more_decls":null}{"pl":"extern \"c\" fn lseek(fd: fd_t, offset: off_t, whence: c_int) off_t","src":86,"more_decls":null}{"pl":"extern \"c\" fn open(path: [*:0]const u8, oflag: c_uint, ...) c_int","src":87,"more_decls":null}{"pl":"extern \"c\" fn openat(fd: c_int, path: [*:0]const u8, oflag: c_uint, ...) c_int","src":88,"more_decls":null}{"pl":"extern \"c\" fn ftruncate(fd: c_int, length: off_t) c_int","src":89,"more_decls":null}{"pl":"extern \"c\" fn raise(sig: c_int) c_int","src":90,"more_decls":null}{"pl":"extern \"c\" fn read(fd: fd_t, buf: [*]u8, nbyte: usize) isize","src":91,"more_decls":null}{"pl":"extern \"c\" fn readv(fd: c_int, iov: [*]const iovec, iovcnt: c_uint) isize","src":92,"more_decls":null}{"pl":"extern \"c\" fn pread(fd: fd_t, buf: [*]u8, nbyte: usize, offset: u64) isize","src":93,"more_decls":null}{"pl":"extern \"c\" fn preadv(fd: c_int, iov: [*]const iovec, iovcnt: c_uint, offset: u64) isize","src":94,"more_decls":null}{"pl":"extern \"c\" fn writev(fd: c_int, iov: [*]const iovec_const, iovcnt: c_uint) isize","src":95,"more_decls":null}{"pl":"extern \"c\" fn pwritev(fd: c_int, iov: [*]const iovec_const, iovcnt: c_uint, offset: u64) isize","src":96,"more_decls":null}{"pl":"extern \"c\" fn write(fd: fd_t, buf: [*]const u8, nbyte: usize) isize","src":97,"more_decls":null}{"pl":"extern \"c\" fn pwrite(fd: fd_t, buf: [*]const u8, nbyte: usize, offset: u64) isize","src":98,"more_decls":null}{"pl":"extern \"c\" fn mmap(addr: ?*align(page_size) c_void, len: usize, prot: c_uint, flags: c_uint, fd: fd_t, offset: u64) *c_void","src":99,"more_decls":null}{"pl":"extern \"c\" fn munmap(addr: *align(page_size) c_void, len: usize) c_int","src":100,"more_decls":null}{"pl":"extern \"c\" fn mprotect(addr: *align(page_size) c_void, len: usize, prot: c_uint) c_int","src":101,"more_decls":null}{"pl":"extern \"c\" fn link(oldpath: [*:0]const u8, newpath: [*:0]const u8, flags: c_int) c_int","src":102,"more_decls":null}{"pl":"extern \"c\" fn linkat(oldfd: fd_t, oldpath: [*:0]const u8, newfd: fd_t, newpath: [*:0]const u8, flags: c_int) c_int","src":103,"more_decls":null}{"pl":"extern \"c\" fn unlink(path: [*:0]const u8) c_int","src":104,"more_decls":null}{"pl":"extern \"c\" fn unlinkat(dirfd: fd_t, path: [*:0]const u8, flags: c_uint) c_int","src":105,"more_decls":null}{"pl":"extern \"c\" fn getcwd(buf: [*]u8, size: usize) ?[*]u8","src":106,"more_decls":null}{"pl":"extern \"c\" fn waitpid(pid: c_int, stat_loc: *c_uint, options: c_uint) c_int","src":107,"more_decls":null}{"pl":"extern \"c\" fn fork() c_int","src":108,"more_decls":null}{"pl":"extern \"c\" fn access(path: [*:0]const u8, mode: c_uint) c_int","src":109,"more_decls":null}{"pl":"extern \"c\" fn faccessat(dirfd: fd_t, path: [*:0]const u8, mode: c_uint, flags: c_uint) c_int","src":110,"more_decls":null}{"pl":"extern \"c\" fn pipe(fds: *[2]fd_t) c_int","src":111,"more_decls":null}{"pl":"extern \"c\" fn mkdir(path: [*:0]const u8, mode: c_uint) c_int","src":112,"more_decls":null}{"pl":"extern \"c\" fn mkdirat(dirfd: fd_t, path: [*:0]const u8, mode: u32) c_int","src":113,"more_decls":null}{"pl":"extern \"c\" fn symlink(existing: [*:0]const u8, new: [*:0]const u8) c_int","src":114,"more_decls":null}{"pl":"extern \"c\" fn symlinkat(oldpath: [*:0]const u8, newdirfd: fd_t, newpath: [*:0]const u8) c_int","src":115,"more_decls":null}{"pl":"extern \"c\" fn rename(old: [*:0]const u8, new: [*:0]const u8) c_int","src":116,"more_decls":null}{"pl":"extern \"c\" fn renameat(olddirfd: fd_t, old: [*:0]const u8, newdirfd: fd_t, new: [*:0]const u8) c_int","src":117,"more_decls":null}{"pl":"extern \"c\" fn chdir(path: [*:0]const u8) c_int","src":118,"more_decls":null}{"pl":"extern \"c\" fn fchdir(fd: fd_t) c_int","src":119,"more_decls":null}{"pl":"extern \"c\" fn execve(path: [*:0]const u8, argv: [*:null]const ?[*:0]const u8, envp: [*:null]const ?[*:0]const u8) c_int","src":120,"more_decls":null}{"pl":"extern \"c\" fn dup(fd: fd_t) c_int","src":121,"more_decls":null}{"pl":"extern \"c\" fn dup2(old_fd: fd_t, new_fd: fd_t) c_int","src":122,"more_decls":null}{"pl":"extern \"c\" fn readlink(noalias path: [*:0]const u8, noalias buf: [*]u8, bufsize: usize) isize","src":123,"more_decls":null}{"pl":"extern \"c\" fn readlinkat(dirfd: fd_t, noalias path: [*:0]const u8, noalias buf: [*]u8, bufsize: usize) isize","src":124,"more_decls":null}{"pl":"extern \"c\" fn rmdir(path: [*:0]const u8) c_int","src":137,"more_decls":null}{"pl":"extern \"c\" fn getenv(name: [*:0]const u8) ?[*:0]u8","src":138,"more_decls":null}{"pl":"extern \"c\" fn sysctl(name: [*]const c_int, namelen: c_uint, oldp: ?*c_void, oldlenp: ?*usize, newp: ?*c_void, newlen: usize) c_int","src":139,"more_decls":null}{"pl":"extern \"c\" fn sysctlbyname(name: [*:0]const u8, oldp: ?*c_void, oldlenp: ?*usize, newp: ?*c_void, newlen: usize) c_int","src":140,"more_decls":null}{"pl":"extern \"c\" fn sysctlnametomib(name: [*:0]const u8, mibp: ?*c_int, sizep: ?*usize) c_int","src":141,"more_decls":null}{"pl":"extern \"c\" fn tcgetattr(fd: fd_t, termios_p: *termios) c_int","src":142,"more_decls":null}{"pl":"extern \"c\" fn tcsetattr(fd: fd_t, optional_action: TCSA, termios_p: *const termios) c_int","src":143,"more_decls":null}{"pl":"extern \"c\" fn fcntl(fd: fd_t, cmd: c_int, ...) c_int","src":144,"more_decls":null}{"pl":"extern \"c\" fn flock(fd: fd_t, operation: c_int) c_int","src":145,"more_decls":null}{"pl":"extern \"c\" fn ioctl(fd: fd_t, request: c_int, ...) c_int","src":146,"more_decls":null}{"pl":"extern \"c\" fn uname(buf: *utsname) c_int","src":147,"more_decls":null}{"pl":"extern \"c\" fn gethostname(name: [*]u8, len: usize) c_int","src":149,"more_decls":null}{"pl":"extern \"c\" fn shutdown(socket: fd_t, how: c_int) c_int","src":150,"more_decls":null}{"pl":"extern \"c\" fn bind(socket: fd_t, address: ?*const sockaddr, address_len: socklen_t) c_int","src":151,"more_decls":null}{"pl":"extern \"c\" fn socketpair(domain: c_uint, sock_type: c_uint, protocol: c_uint, sv: *[2]fd_t) c_int","src":152,"more_decls":null}{"pl":"extern \"c\" fn listen(sockfd: fd_t, backlog: c_uint) c_int","src":153,"more_decls":null}{"pl":"extern \"c\" fn getsockname(sockfd: fd_t, noalias addr: *sockaddr, noalias addrlen: *socklen_t) c_int","src":154,"more_decls":null}{"pl":"extern \"c\" fn connect(sockfd: fd_t, sock_addr: *const sockaddr, addrlen: socklen_t) c_int","src":155,"more_decls":null}{"pl":"extern \"c\" fn accept(sockfd: fd_t, noalias addr: ?*sockaddr, noalias addrlen: ?*socklen_t) c_int","src":156,"more_decls":null}{"pl":"extern \"c\" fn accept4(sockfd: fd_t, noalias addr: ?*sockaddr, noalias addrlen: ?*socklen_t, flags: c_uint) c_int","src":157,"more_decls":null}{"pl":"extern \"c\" fn getsockopt(sockfd: fd_t, level: u32, optname: u32, noalias optval: ?*c_void, noalias optlen: *socklen_t) c_int","src":158,"more_decls":null}{"pl":"extern \"c\" fn setsockopt(sockfd: fd_t, level: u32, optname: u32, optval: ?*const c_void, optlen: socklen_t) c_int","src":159,"more_decls":null}{"pl":"extern \"c\" fn send(sockfd: fd_t, buf: *const c_void, len: usize, flags: u32) isize","src":160,"more_decls":null}{"pl":"extern \"c\" fn sendto(\n    sockfd: fd_t,\n    buf: *const c_void,\n    len: usize,\n    flags: u32,\n    dest_addr: ?*const sockaddr,\n    addrlen: socklen_t,\n) isize","src":161,"more_decls":null}{"pl":"extern fn recv(sockfd: fd_t, arg1: ?*c_void, arg2: usize, arg3: c_int) isize","src":170,"more_decls":null}{"pl":"extern fn recvfrom(\n    sockfd: fd_t,\n    noalias buf: *c_void,\n    len: usize,\n    flags: u32,\n    noalias src_addr: ?*sockaddr,\n    noalias addrlen: ?*socklen_t,\n) isize","src":171,"more_decls":null}{"pl":"extern \"c\" fn kill(pid: pid_t, sig: c_int) c_int","src":239,"more_decls":null}{"pl":"extern \"c\" fn getdirentries(fd: fd_t, buf_ptr: [*]u8, nbytes: usize, basep: *i64) isize","src":240,"more_decls":null}{"pl":"extern \"c\" fn setuid(uid: uid_t) c_int","src":242,"more_decls":null}{"pl":"extern \"c\" fn setgid(gid: gid_t) c_int","src":243,"more_decls":null}{"pl":"extern \"c\" fn seteuid(euid: uid_t) c_int","src":244,"more_decls":null}{"pl":"extern \"c\" fn setegid(egid: gid_t) c_int","src":245,"more_decls":null}{"pl":"extern \"c\" fn setreuid(ruid: uid_t, euid: uid_t) c_int","src":246,"more_decls":null}{"pl":"extern \"c\" fn setregid(rgid: gid_t, egid: gid_t) c_int","src":247,"more_decls":null}{"pl":"extern \"c\" fn setresuid(ruid: uid_t, euid: uid_t, suid: uid_t) c_int","src":248,"more_decls":null}{"pl":"extern \"c\" fn setresgid(rgid: gid_t, egid: gid_t, sgid: gid_t) c_int","src":249,"more_decls":null}{"pl":"extern \"c\" fn malloc(usize) ?*c_void","src":251,"more_decls":null}{"pl":"extern \"c\" fn realloc(?*c_void, usize) ?*c_void","src":252,"more_decls":null}{"pl":"extern \"c\" fn free(?*c_void) void","src":253,"more_decls":null}{"pl":"extern \"c\" fn futimes(fd: fd_t, times: *[2]timeval) c_int","src":255,"more_decls":null}{"pl":"extern \"c\" fn utimes(path: [*:0]const u8, times: *[2]timeval) c_int","src":256,"more_decls":null}{"pl":"extern \"c\" fn utimensat(dirfd: fd_t, pathname: [*:0]const u8, times: *[2]timespec, flags: u32) c_int","src":258,"more_decls":null}{"pl":"extern \"c\" fn futimens(fd: fd_t, times: *const [2]timespec) c_int","src":259,"more_decls":null}{"pl":"extern \"c\" fn pthread_create(noalias newthread: *pthread_t, noalias attr: ?*const pthread_attr_t, start_routine: fn (?*c_void) callconv(.C) ?*c_void, noalias arg: ?*c_void) c_int","src":261,"more_decls":null}{"pl":"extern \"c\" fn pthread_attr_init(attr: *pthread_attr_t) c_int","src":262,"more_decls":null}{"pl":"extern \"c\" fn pthread_attr_setstack(attr: *pthread_attr_t, stackaddr: *c_void, stacksize: usize) c_int","src":263,"more_decls":null}{"pl":"extern \"c\" fn pthread_attr_setstacksize(attr: *pthread_attr_t, stacksize: usize) c_int","src":264,"more_decls":null}{"pl":"extern \"c\" fn pthread_attr_setguardsize(attr: *pthread_attr_t, guardsize: usize) c_int","src":265,"more_decls":null}{"pl":"extern \"c\" fn pthread_attr_destroy(attr: *pthread_attr_t) c_int","src":266,"more_decls":null}{"pl":"extern \"c\" fn pthread_self() pthread_t","src":267,"more_decls":null}{"pl":"extern \"c\" fn pthread_join(thread: pthread_t, arg_return: ?*?*c_void) c_int","src":268,"more_decls":null}{"pl":"extern \"c\" fn pthread_atfork(\n    prepare: ?fn () callconv(.C) void,\n    parent: ?fn () callconv(.C) void,\n    child: ?fn () callconv(.C) void,\n) c_int","src":269,"more_decls":null}{"pl":"extern \"c\" fn pthread_key_create(key: *pthread_key_t, destructor: ?fn (value: *c_void) callconv(.C) void) c_int","src":274,"more_decls":null}{"pl":"extern \"c\" fn pthread_key_delete(key: pthread_key_t) c_int","src":275,"more_decls":null}{"pl":"extern \"c\" fn pthread_getspecific(key: pthread_key_t) ?*c_void","src":276,"more_decls":null}{"pl":"extern \"c\" fn pthread_setspecific(key: pthread_key_t, value: ?*c_void) c_int","src":277,"more_decls":null}{"pl":"extern \"c\" fn sem_init(sem: *sem_t, pshared: c_int, value: c_uint) c_int","src":278,"more_decls":null}{"pl":"extern \"c\" fn sem_destroy(sem: *sem_t) c_int","src":279,"more_decls":null}{"pl":"extern \"c\" fn sem_post(sem: *sem_t) c_int","src":280,"more_decls":null}{"pl":"extern \"c\" fn sem_wait(sem: *sem_t) c_int","src":281,"more_decls":null}{"pl":"extern \"c\" fn sem_trywait(sem: *sem_t) c_int","src":282,"more_decls":null}{"pl":"extern \"c\" fn sem_timedwait(sem: *sem_t, abs_timeout: *const timespec) c_int","src":283,"more_decls":null}{"pl":"extern \"c\" fn sem_getvalue(sem: *sem_t, sval: *c_int) c_int","src":284,"more_decls":null}{"pl":"extern \"c\" fn kqueue() c_int","src":286,"more_decls":null}{"pl":"extern \"c\" fn kevent(\n    kq: c_int,\n    changelist: [*]const Kevent,\n    nchanges: c_int,\n    eventlist: [*]Kevent,\n    nevents: c_int,\n    timeout: ?*const timespec,\n) c_int","src":287,"more_decls":null}{"pl":"extern \"c\" fn getaddrinfo(\n    noalias node: ?[*:0]const u8,\n    noalias service: ?[*:0]const u8,\n    noalias hints: ?*const addrinfo,\n    noalias res: **addrinfo,\n) EAI","src":296,"more_decls":null}{"pl":"extern \"c\" fn freeaddrinfo(res: *addrinfo) void","src":303,"more_decls":null}{"pl":"extern \"c\" fn getnameinfo(\n    noalias addr: *const sockaddr,\n    addrlen: socklen_t,\n    noalias host: [*]u8,\n    hostlen: socklen_t,\n    noalias serv: [*]u8,\n    servlen: socklen_t,\n    flags: u32,\n) EAI","src":305,"more_decls":null}{"pl":"extern \"c\" fn gai_strerror(errcode: EAI) [*:0]const u8","src":315,"more_decls":null}{"pl":"extern \"c\" fn poll(fds: [*]pollfd, nfds: nfds_t, timeout: c_int) c_int","src":317,"more_decls":null}{"pl":"extern \"c\" fn ppoll(fds: [*]pollfd, nfds: nfds_t, timeout: ?*const timespec, sigmask: ?*const sigset_t) c_int","src":318,"more_decls":null}{"pl":"extern \"c\" fn dn_expand(\n    msg: [*:0]const u8,\n    eomorig: [*:0]const u8,\n    comp_dn: [*:0]const u8,\n    exp_dn: [*:0]u8,\n    length: c_int,\n) c_int","src":320,"more_decls":null}{"pl":"extern \"c\" fn pthread_mutex_lock(mutex: *pthread_mutex_t) c_int","src":329,"more_decls":null}{"pl":"extern \"c\" fn pthread_mutex_unlock(mutex: *pthread_mutex_t) c_int","src":330,"more_decls":null}{"pl":"extern \"c\" fn pthread_mutex_trylock(mutex: *pthread_mutex_t) c_int","src":331,"more_decls":null}{"pl":"extern \"c\" fn pthread_mutex_destroy(mutex: *pthread_mutex_t) c_int","src":332,"more_decls":null}{"pl":"extern \"c\" fn pthread_cond_wait(noalias cond: *pthread_cond_t, noalias mutex: *pthread_mutex_t) c_int","src":335,"more_decls":null}{"pl":"extern \"c\" fn pthread_cond_timedwait(noalias cond: *pthread_cond_t, noalias mutex: *pthread_mutex_t, noalias abstime: *const timespec) c_int","src":336,"more_decls":null}{"pl":"extern \"c\" fn pthread_cond_signal(cond: *pthread_cond_t) c_int","src":337,"more_decls":null}{"pl":"extern \"c\" fn pthread_cond_broadcast(cond: *pthread_cond_t) c_int","src":338,"more_decls":null}{"pl":"extern \"c\" fn pthread_cond_destroy(cond: *pthread_cond_t) c_int","src":339,"more_decls":null}{"pl":"extern \"c\" fn pthread_rwlock_destroy(rwl: *pthread_rwlock_t) callconv(.C) c_int","src":341,"more_decls":null}{"pl":"extern \"c\" fn pthread_rwlock_rdlock(rwl: *pthread_rwlock_t) callconv(.C) c_int","src":342,"more_decls":null}{"pl":"extern \"c\" fn pthread_rwlock_wrlock(rwl: *pthread_rwlock_t) callconv(.C) c_int","src":343,"more_decls":null}{"pl":"extern \"c\" fn pthread_rwlock_tryrdlock(rwl: *pthread_rwlock_t) callconv(.C) c_int","src":344,"more_decls":null}{"pl":"extern \"c\" fn pthread_rwlock_trywrlock(rwl: *pthread_rwlock_t) callconv(.C) c_int","src":345,"more_decls":null}{"pl":"extern \"c\" fn pthread_rwlock_unlock(rwl: *pthread_rwlock_t) callconv(.C) c_int","src":346,"more_decls":null}{"pl":"pub const FILE = opaque ","src":349,"more_decls":}{"pl":"extern \"c\" fn dlopen(path: [*:0]const u8, mode: c_int) ?*c_void","src":351,"more_decls":null}{"pl":"extern \"c\" fn dlclose(handle: *c_void) c_int","src":352,"more_decls":null}{"pl":"extern \"c\" fn dlsym(handle: ?*c_void, symbol: [*:0]const u8) ?*c_void","src":353,"more_decls":null}{"pl":"extern \"c\" fn sync() void","src":355,"more_decls":null}{"pl":"extern \"c\" fn syncfs(fd: c_int) c_int","src":356,"more_decls":null}{"pl":"extern \"c\" fn fsync(fd: c_int) c_int","src":357,"more_decls":null}{"pl":"extern \"c\" fn fdatasync(fd: c_int) c_int","src":358,"more_decls":null}{"pl":"extern \"c\" fn prctl(option: c_int, ...) c_int","src":360,"more_decls":null}{"pl":"extern \"c\" fn getrlimit(resource: rlimit_resource, rlim: *rlimit) c_int","src":362,"more_decls":null}{"pl":"extern \"c\" fn setrlimit(resource: rlimit_resource, rlim: *const rlimit) c_int","src":363,"more_decls":null}{"pl":"extern \"c\" fn fmemopen(noalias buf: ?*c_void, size: usize, noalias mode: [*:0]const u8) ?*FILE","src":365,"more_decls":null}{"pl":"extern \"c\" fn syslog(priority: c_int, message: [*:0]const u8, ...) void","src":367,"more_decls":null}{"pl":"extern \"c\" fn openlog(ident: [*:0]const u8, logopt: c_int, facility: c_int) void","src":368,"more_decls":null}{"pl":"extern \"c\" fn closelog() void","src":369,"more_decls":null}{"pl":"extern \"c\" fn setlogmask(maskpri: c_int) c_int","src":370,"more_decls":null}{"pl":"fn getErrno(rc: anytype) c_int","src":39,"more_decls":null}{"doc_comment":"The return type is `type` to force comptime function call execution.\nTODO: https://github.com/ziglang/zig/issues/425\nIf not linking libc, returns struct{pub const ok = false;}\nIf linking musl libc, returns struct{pub const ok = true;}\nIf linking gnu libc (glibc), the `ok` value will be true if the target\nversion is greater than or equal to `glibc_version`.\nIf linking a libc other than these, returns `false`.","pl":"fn versionCheck(glibc_version: builtin.Version) type","sub_container_type":"struct ","src":54,"more_decls":{"pl":"const ok = blk: {\n            if (!builtin.link_libc) break :blk false;\n            if (std.Target.current.abi.isMusl()) break :blk true;\n            if (std.Target.current.isGnuLibC()) {\n                const ver = std.Target.current.os.version_range.linux.glibc;\n                const order = ver.order(glibc_version);\n                break :blk switch (order) {\n                    .gt, .eq => true,\n                    .lt => false,\n                };\n            } else {\n                break :blk false;\n            }\n        }","src":56,"more_decls":null}}{"pl":"const tokenizer = @import(\"c/tokenizer.zig\")","src":9,"more_decls":null}{"pl":"const Token = tokenizer.Token","src":10,"more_decls":null}{"pl":"const Tokenizer = tokenizer.Tokenizer","src":11,"more_decls":null}{"pl":"const parse = @import(\"c/parse.zig\").parse","src":12,"more_decls":null}{"pl":"const ast = @import(\"c/ast.zig\")","src":13,"more_decls":null}{"pl":"const builtins = @import(\"c/builtins.zig\")","src":14,"more_decls":null}{"pl":"var environ: [*:null]?[*:0]u8;\n\npub extern \"c\" fn fopen(noalias filename: [*:0]const u8, noalias modes: [*:0]const u8) ?*FILE;\npub extern \"c\" fn fclose(stream: *FILE) c_int;\npub extern \"c\" fn fwrite(noalias ptr: [*]const u8, size_of_type: usize, item_count: usize, noalias stream: *FILE) usize;\npub extern \"c\" fn fread(noalias ptr: [*]u8, size_of_type: usize, item_count: usize, noalias stream: *FILE) usize;\n\npub extern \"c\" fn printf(format: [*:0]const u8, ...) c_int;\npub extern \"c\" fn abort() noreturn;\npub extern \"c\" fn exit(code: c_int) noreturn;\npub extern \"c\" fn _exit(code: c_int) noreturn;\npub extern \"c\" fn isatty(fd: fd_t) c_int;\npub extern \"c\" fn close(fd: fd_t) c_int;\npub extern \"c\" fn lseek(fd: fd_t, offset: off_t, whence: c_int) off_t;\npub extern \"c\" fn open(path: [*:0]const u8, oflag: c_uint, ...) c_int;\npub extern \"c\" fn openat(fd: c_int, path: [*:0]const u8, oflag: c_uint, ...) c_int;\npub extern \"c\" fn ftruncate(fd: c_int, length: off_t) c_int;\npub extern \"c\" fn raise(sig: c_int) c_int;\npub extern \"c\" fn read(fd: fd_t, buf: [*]u8, nbyte: usize) isize;\npub extern \"c\" fn readv(fd: c_int, iov: [*]const iovec, iovcnt: c_uint) isize;\npub extern \"c\" fn pread(fd: fd_t, buf: [*]u8, nbyte: usize, offset: u64) isize;\npub extern \"c\" fn preadv(fd: c_int, iov: [*]const iovec, iovcnt: c_uint, offset: u64) isize;\npub extern \"c\" fn writev(fd: c_int, iov: [*]const iovec_const, iovcnt: c_uint) isize;\npub extern \"c\" fn pwritev(fd: c_int, iov: [*]const iovec_const, iovcnt: c_uint, offset: u64) isize;\npub extern \"c\" fn write(fd: fd_t, buf: [*]const u8, nbyte: usize) isize;\npub extern \"c\" fn pwrite(fd: fd_t, buf: [*]const u8, nbyte: usize, offset: u64) isize;\npub extern \"c\" fn mmap(addr: ?*align(page_size) c_void, len: usize, prot: c_uint, flags: c_uint, fd: fd_t, offset: u64) *c_void;\npub extern \"c\" fn munmap(addr: *align(page_size) c_void, len: usize) c_int;\npub extern \"c\" fn mprotect(addr: *align(page_size) c_void, len: usize, prot: c_uint) c_int;\npub extern \"c\" fn link(oldpath: [*:0]const u8, newpath: [*:0]const u8, flags: c_int) c_int;\npub extern \"c\" fn linkat(oldfd: fd_t, oldpath: [*:0]const u8, newfd: fd_t, newpath: [*:0]const u8, flags: c_int) c_int;\npub extern \"c\" fn unlink(path: [*:0]const u8) c_int;\npub extern \"c\" fn unlinkat(dirfd: fd_t, path: [*:0]const u8, flags: c_uint) c_int;\npub extern \"c\" fn getcwd(buf: [*]u8, size: usize) ?[*]u8;\npub extern \"c\" fn waitpid(pid: c_int, stat_loc: *c_uint, options: c_uint) c_int;\npub extern \"c\" fn fork() c_int;\npub extern \"c\" fn access(path: [*:0]const u8, mode: c_uint) c_int;\npub extern \"c\" fn faccessat(dirfd: fd_t, path: [*:0]const u8, mode: c_uint, flags: c_uint) c_int;\npub extern \"c\" fn pipe(fds: *[2]fd_t) c_int;\npub extern \"c\" fn mkdir(path: [*:0]const u8, mode: c_uint) c_int;\npub extern \"c\" fn mkdirat(dirfd: fd_t, path: [*:0]const u8, mode: u32) c_int;\npub extern \"c\" fn symlink(existing: [*:0]const u8, new: [*:0]const u8) c_int;\npub extern \"c\" fn symlinkat(oldpath: [*:0]const u8, newdirfd: fd_t, newpath: [*:0]const u8) c_int;\npub extern \"c\" fn rename(old: [*:0]const u8, new: [*:0]const u8) c_int;\npub extern \"c\" fn renameat(olddirfd: fd_t, old: [*:0]const u8, newdirfd: fd_t, new: [*:0]const u8) c_int;\npub extern \"c\" fn chdir(path: [*:0]const u8) c_int;\npub extern \"c\" fn fchdir(fd: fd_t) c_int;\npub extern \"c\" fn execve(path: [*:0]const u8, argv: [*:null]const ?[*:0]const u8, envp: [*:null]const ?[*:0]const u8) c_int;\npub extern \"c\" fn dup(fd: fd_t) c_int;\npub extern \"c\" fn dup2(old_fd: fd_t, new_fd: fd_t) c_int;\npub extern \"c\" fn readlink(noalias path: [*:0]const u8, noalias buf: [*]u8, bufsize: usize) isize;\npub extern \"c\" fn readlinkat(dirfd: fd_t, noalias path: [*:0]const u8, noalias buf: [*]u8, bufsize: usize) isize;\n\npub usingnamespace switch (builtin.os.tag) {\n    .macos, .ios, .watchos, .tvos => struct {\n        pub const realpath = @\"realpath$DARWIN_EXTSN\";\n        pub const fstatat = _fstatat;\n    },\n    else => struct {\n        pub extern \"c\" fn realpath(noalias file_name: [*:0]const u8, noalias resolved_name: [*]u8) ?[*:0]u8;\n        pub extern \"c\" fn fstatat(dirfd: fd_t, path: [*:0]const u8, stat_buf: *libc_stat, flags: u32) c_int;\n    },\n};\n\npub extern \"c\" fn rmdir(path: [*:0]const u8) c_int;\npub extern \"c\" fn getenv(name: [*:0]const u8) ?[*:0]u8;\npub extern \"c\" fn sysctl(name: [*]const c_int, namelen: c_uint, oldp: ?*c_void, oldlenp: ?*usize, newp: ?*c_void, newlen: usize) c_int;\npub extern \"c\" fn sysctlbyname(name: [*:0]const u8, oldp: ?*c_void, oldlenp: ?*usize, newp: ?*c_void, newlen: usize) c_int;\npub extern \"c\" fn sysctlnametomib(name: [*:0]const u8, mibp: ?*c_int, sizep: ?*usize) c_int;\npub extern \"c\" fn tcgetattr(fd: fd_t, termios_p: *termios) c_int;\npub extern \"c\" fn tcsetattr(fd: fd_t, optional_action: TCSA, termios_p: *const termios) c_int;\npub extern \"c\" fn fcntl(fd: fd_t, cmd: c_int, ...) c_int;\npub extern \"c\" fn flock(fd: fd_t, operation: c_int) c_int;\npub extern \"c\" fn ioctl(fd: fd_t, request: c_int, ...) c_int;\npub extern \"c\" fn uname(buf: *utsname) c_int;\n\npub extern \"c\" fn gethostname(name: [*]u8, len: usize) c_int;\npub extern \"c\" fn shutdown(socket: fd_t, how: c_int) c_int;\npub extern \"c\" fn bind(socket: fd_t, address: ?*const sockaddr, address_len: socklen_t) c_int;\npub extern \"c\" fn socketpair(domain: c_uint, sock_type: c_uint, protocol: c_uint, sv: *[2]fd_t) c_int;\npub extern \"c\" fn listen(sockfd: fd_t, backlog: c_uint) c_int;\npub extern \"c\" fn getsockname(sockfd: fd_t, noalias addr: *sockaddr, noalias addrlen: *socklen_t) c_int;\npub extern \"c\" fn connect(sockfd: fd_t, sock_addr: *const sockaddr, addrlen: socklen_t) c_int;\npub extern \"c\" fn accept(sockfd: fd_t, noalias addr: ?*sockaddr, noalias addrlen: ?*socklen_t) c_int;\npub extern \"c\" fn accept4(sockfd: fd_t, noalias addr: ?*sockaddr, noalias addrlen: ?*socklen_t, flags: c_uint) c_int;\npub extern \"c\" fn getsockopt(sockfd: fd_t, level: u32, optname: u32, noalias optval: ?*c_void, noalias optlen: *socklen_t) c_int;\npub extern \"c\" fn setsockopt(sockfd: fd_t, level: u32, optname: u32, optval: ?*const c_void, optlen: socklen_t) c_int;\npub extern \"c\" fn send(sockfd: fd_t, buf: *const c_void, len: usize, flags: u32) isize;\npub extern \"c\" fn sendto(\n    sockfd: fd_t,\n    buf: *const c_void,\n    len: usize,\n    flags: u32,\n    dest_addr: ?*const sockaddr,\n    addrlen: socklen_t,\n) isize;\n\npub extern fn recv(sockfd: fd_t, arg1: ?*c_void, arg2: usize, arg3: c_int) isize;\npub extern fn recvfrom(\n    sockfd: fd_t,\n    noalias buf: *c_void,\n    len: usize,\n    flags: u32,\n    noalias src_addr: ?*sockaddr,\n    noalias addrlen: ?*socklen_t,\n) isize;\n\npub usingnamespace switch (builtin.os.tag) {\n    .netbsd => struct {\n        pub const clock_getres = __clock_getres50;\n        pub const clock_gettime = __clock_gettime50;\n        pub const fstat = __fstat50;\n        pub const getdents = __getdents30;\n        pub const getrusage = __getrusage50;\n        pub const gettimeofday = __gettimeofday50;\n        pub const nanosleep = __nanosleep50;\n        pub const sched_yield = __libc_thr_yield;\n        pub const sigaction = __sigaction14;\n        pub const sigaltstack = __sigaltstack14;\n        pub const sigprocmask = __sigprocmask14;\n        pub const stat = __stat50;\n    },\n    .macos, .ios, .watchos, .tvos => struct {\n        // XXX: close -> close$NOCANCEL\n        // XXX: getdirentries -> _getdirentries64\n        pub extern \"c\" fn clock_getres(clk_id: c_int, tp: *timespec) c_int;\n        pub extern \"c\" fn clock_gettime(clk_id: c_int, tp: *timespec) c_int;\n        pub const fstat = _fstat;\n        pub extern \"c\" fn getrusage(who: c_int, usage: *rusage) c_int;\n        pub extern \"c\" fn gettimeofday(noalias tv: ?*timeval, noalias tz: ?*timezone) c_int;\n        pub extern \"c\" fn nanosleep(rqtp: *const timespec, rmtp: ?*timespec) c_int;\n        pub extern \"c\" fn sched_yield() c_int;\n        pub extern \"c\" fn sigaction(sig: c_int, noalias act: ?*const Sigaction, noalias oact: ?*Sigaction) c_int;\n        pub extern \"c\" fn sigprocmask(how: c_int, noalias set: ?*const sigset_t, noalias oset: ?*sigset_t) c_int;\n        pub extern \"c\" fn socket(domain: c_uint, sock_type: c_uint, protocol: c_uint) c_int;\n        pub extern \"c\" fn stat(noalias path: [*:0]const u8, noalias buf: *libc_stat) c_int;\n    },\n    .windows => struct {\n        // TODO: copied the else case and removed the socket function (because its in ws2_32)\n        //       need to verify which of these is actually supported on windows\n        pub extern \"c\" fn clock_getres(clk_id: c_int, tp: *timespec) c_int;\n        pub extern \"c\" fn clock_gettime(clk_id: c_int, tp: *timespec) c_int;\n        pub extern \"c\" fn fstat(fd: fd_t, buf: *libc_stat) c_int;\n        pub extern \"c\" fn getrusage(who: c_int, usage: *rusage) c_int;\n        pub extern \"c\" fn gettimeofday(noalias tv: ?*timeval, noalias tz: ?*timezone) c_int;\n        pub extern \"c\" fn nanosleep(rqtp: *const timespec, rmtp: ?*timespec) c_int;\n        pub extern \"c\" fn sched_yield() c_int;\n        pub extern \"c\" fn sigaction(sig: c_int, noalias act: ?*const Sigaction, noalias oact: ?*Sigaction) c_int;\n        pub extern \"c\" fn sigprocmask(how: c_int, noalias set: ?*const sigset_t, noalias oset: ?*sigset_t) c_int;\n        pub extern \"c\" fn stat(noalias path: [*:0]const u8, noalias buf: *libc_stat) c_int;\n    },\n    else => struct {\n        pub extern \"c\" fn clock_getres(clk_id: c_int, tp: *timespec) c_int;\n        pub extern \"c\" fn clock_gettime(clk_id: c_int, tp: *timespec) c_int;\n        pub extern \"c\" fn fstat(fd: fd_t, buf: *libc_stat) c_int;\n        pub extern \"c\" fn getrusage(who: c_int, usage: *rusage) c_int;\n        pub extern \"c\" fn gettimeofday(noalias tv: ?*timeval, noalias tz: ?*timezone) c_int;\n        pub extern \"c\" fn nanosleep(rqtp: *const timespec, rmtp: ?*timespec) c_int;\n        pub extern \"c\" fn sched_yield() c_int;\n        pub extern \"c\" fn sigaction(sig: c_int, noalias act: ?*const Sigaction, noalias oact: ?*Sigaction) c_int;\n        pub extern \"c\" fn sigprocmask(how: c_int, noalias set: ?*const sigset_t, noalias oset: ?*sigset_t) c_int;\n        pub extern \"c\" fn socket(domain: c_uint, sock_type: c_uint, protocol: c_uint) c_int;\n        pub extern \"c\" fn stat(noalias path: [*:0]const u8, noalias buf: *libc_stat) c_int;\n    },\n};\n\npub extern \"c\" fn kill(pid: pid_t, sig: c_int) c_int;\npub extern \"c\" fn getdirentries(fd: fd_t, buf_ptr: [*]u8, nbytes: usize, basep: *i64) isize;\n\npub extern \"c\" fn setuid(uid: uid_t) c_int;\npub extern \"c\" fn setgid(gid: gid_t) c_int;\npub extern \"c\" fn seteuid(euid: uid_t) c_int;\npub extern \"c\" fn setegid(egid: gid_t) c_int;\npub extern \"c\" fn setreuid(ruid: uid_t, euid: uid_t) c_int;\npub extern \"c\" fn setregid(rgid: gid_t, egid: gid_t) c_int;\npub extern \"c\" fn setresuid(ruid: uid_t, euid: uid_t, suid: uid_t) c_int;\npub extern \"c\" fn setresgid(rgid: gid_t, egid: gid_t, sgid: gid_t) c_int;\n\npub extern \"c\" fn malloc(usize) ?*c_void;\npub extern \"c\" fn realloc(?*c_void, usize) ?*c_void;\npub extern \"c\" fn free(?*c_void) void;\n\npub extern \"c\" fn futimes(fd: fd_t, times: *[2]timeval) c_int;\npub extern \"c\" fn utimes(path: [*:0]const u8, times: *[2]timeval) c_int;\n\npub extern \"c\" fn utimensat(dirfd: fd_t, pathname: [*:0]const u8, times: *[2]timespec, flags: u32) c_int;\npub extern \"c\" fn futimens(fd: fd_t, times: *const [2]timespec) c_int;\n\npub extern \"c\" fn pthread_create(noalias newthread: *pthread_t, noalias attr: ?*const pthread_attr_t, start_routine: fn (?*c_void) callconv(.C) ?*c_void, noalias arg: ?*c_void) c_int;\npub extern \"c\" fn pthread_attr_init(attr: *pthread_attr_t) c_int;\npub extern \"c\" fn pthread_attr_setstack(attr: *pthread_attr_t, stackaddr: *c_void, stacksize: usize) c_int;\npub extern \"c\" fn pthread_attr_setstacksize(attr: *pthread_attr_t, stacksize: usize) c_int;\npub extern \"c\" fn pthread_attr_setguardsize(attr: *pthread_attr_t, guardsize: usize) c_int;\npub extern \"c\" fn pthread_attr_destroy(attr: *pthread_attr_t) c_int;\npub extern \"c\" fn pthread_self() pthread_t;\npub extern \"c\" fn pthread_join(thread: pthread_t, arg_return: ?*?*c_void) c_int;\npub extern \"c\" fn pthread_atfork(\n    prepare: ?fn () callconv(.C) void,\n    parent: ?fn () callconv(.C) void,\n    child: ?fn () callconv(.C) void,\n) c_int;\npub extern \"c\" fn pthread_key_create(key: *pthread_key_t, destructor: ?fn (value: *c_void) callconv(.C) void) c_int;\npub extern \"c\" fn pthread_key_delete(key: pthread_key_t) c_int;\npub extern \"c\" fn pthread_getspecific(key: pthread_key_t) ?*c_void;\npub extern \"c\" fn pthread_setspecific(key: pthread_key_t, value: ?*c_void) c_int;\npub extern \"c\" fn sem_init(sem: *sem_t, pshared: c_int, value: c_uint) c_int;\npub extern \"c\" fn sem_destroy(sem: *sem_t) c_int;\npub extern \"c\" fn sem_post(sem: *sem_t) c_int;\npub extern \"c\" fn sem_wait(sem: *sem_t) c_int;\npub extern \"c\" fn sem_trywait(sem: *sem_t) c_int;\npub extern \"c\" fn sem_timedwait(sem: *sem_t, abs_timeout: *const timespec) c_int;\npub extern \"c\" fn sem_getvalue(sem: *sem_t, sval: *c_int) c_int;\n\npub extern \"c\" fn kqueue() c_int;\npub extern \"c\" fn kevent(\n    kq: c_int,\n    changelist: [*]const Kevent,\n    nchanges: c_int,\n    eventlist: [*]Kevent,\n    nevents: c_int,\n    timeout: ?*const timespec,\n) c_int;\n\npub extern \"c\" fn getaddrinfo(\n    noalias node: ?[*:0]const u8,\n    noalias service: ?[*:0]const u8,\n    noalias hints: ?*const addrinfo,\n    noalias res: **addrinfo,\n) EAI;\n\npub extern \"c\" fn freeaddrinfo(res: *addrinfo) void;\n\npub extern \"c\" fn getnameinfo(\n    noalias addr: *const sockaddr,\n    addrlen: socklen_t,\n    noalias host: [*]u8,\n    hostlen: socklen_t,\n    noalias serv: [*]u8,\n    servlen: socklen_t,\n    flags: u32,\n) EAI;\n\npub extern \"c\" fn gai_strerror(errcode: EAI) [*:0]const u8;\n\npub extern \"c\" fn poll(fds: [*]pollfd, nfds: nfds_t, timeout: c_int) c_int;\npub extern \"c\" fn ppoll(fds: [*]pollfd, nfds: nfds_t, timeout: ?*const timespec, sigmask: ?*const sigset_t) c_int;\n\npub extern \"c\" fn dn_expand(\n    msg: [*:0]const u8,\n    eomorig: [*:0]const u8,\n    comp_dn: [*:0]const u8,\n    exp_dn: [*:0]u8,\n    length: c_int,\n) c_int;\n\npub const PTHREAD_MUTEX_INITIALIZER = pthread_mutex_t{};\npub extern \"c\" fn pthread_mutex_lock(mutex: *pthread_mutex_t) c_int;\npub extern \"c\" fn pthread_mutex_unlock(mutex: *pthread_mutex_t) c_int;\npub extern \"c\" fn pthread_mutex_trylock(mutex: *pthread_mutex_t) c_int;\npub extern \"c\" fn pthread_mutex_destroy(mutex: *pthread_mutex_t) c_int;\n\npub const PTHREAD_COND_INITIALIZER = pthread_cond_t{};\npub extern \"c\" fn pthread_cond_wait(noalias cond: *pthread_cond_t, noalias mutex: *pthread_mutex_t) c_int;\npub extern \"c\" fn pthread_cond_timedwait(noalias cond: *pthread_cond_t, noalias mutex: *pthread_mutex_t, noalias abstime: *const timespec) c_int;\npub extern \"c\" fn pthread_cond_signal(cond: *pthread_cond_t) c_int;\npub extern \"c\" fn pthread_cond_broadcast(cond: *pthread_cond_t) c_int;\npub extern \"c\" fn pthread_cond_destroy(cond: *pthread_cond_t) c_int;\n\npub extern \"c\" fn pthread_rwlock_destroy(rwl: *pthread_rwlock_t) callconv(.C) c_int;\npub extern \"c\" fn pthread_rwlock_rdlock(rwl: *pthread_rwlock_t) callconv(.C) c_int;\npub extern \"c\" fn pthread_rwlock_wrlock(rwl: *pthread_rwlock_t) callconv(.C) c_int;\npub extern \"c\" fn pthread_rwlock_tryrdlock(rwl: *pthread_rwlock_t) callconv(.C) c_int;\npub extern \"c\" fn pthread_rwlock_trywrlock(rwl: *pthread_rwlock_t) callconv(.C) c_int;\npub extern \"c\" fn pthread_rwlock_unlock(rwl: *pthread_rwlock_t) callconv(.C) c_int;\n\npub const pthread_t = *opaque {};\npub const FILE = opaque {};\n\npub extern \"c\" fn dlopen(path: [*:0]const u8, mode: c_int) ?*c_void;\npub extern \"c\" fn dlclose(handle: *c_void) c_int;\npub extern \"c\" fn dlsym(handle: ?*c_void, symbol: [*:0]const u8) ?*c_void;\n\npub extern \"c\" fn sync() void;\npub extern \"c\" fn syncfs(fd: c_int) c_int;\npub extern \"c\" fn fsync(fd: c_int) c_int;\npub extern \"c\" fn fdatasync(fd: c_int) c_int;\n\npub extern \"c\" fn prctl(option: c_int, ...) c_int;\n\npub extern \"c\" fn getrlimit(resource: rlimit_resource, rlim: *rlimit) c_int;\npub extern \"c\" fn setrlimit(resource: rlimit_resource, rlim: *const rlimit) c_int;\n\npub extern \"c\" fn fmemopen(noalias buf: ?*c_void, size: usize, noalias mode: [*:0]const u8) ?*FILE;\n\npub extern \"c\" fn syslog(priority: c_int, message: [*:0]const u8, ...) void;\npub extern \"c\" fn openlog(ident: [*:0]const u8, logopt: c_int, facility: c_int) void;\npub extern \"c\" fn closelog() void;\npub extern \"c\" fn setlogmask(maskpri: c_int) c_int;\n\npub const max_align_t = if (std.Target.current.abi == .msvc)\n    f64\nelse if (std.Target.current.isDarwin())\n    c_longdouble\nelse\n    extern struct {\n        a: c_longlong,\n        b: c_longdouble,\n    };\n","src":73,"more_decls":null}{"pl":"const PTHREAD_MUTEX_INITIALIZER = pthread_mutex_t{}","src":328,"more_decls":null}{"pl":"const PTHREAD_COND_INITIALIZER = pthread_cond_t{}","src":334,"more_decls":null}{"pl":"const pthread_t = *opaque {}","src":348,"more_decls":null}{"pl":"const max_align_t = if (std.Target.current.abi == .msvc)\n    f64\nelse if (std.Target.current.isDarwin())\n    c_longdouble\nelse\n    extern struct {\n        a: c_longlong,\n        b: c_longdouble,\n    }","src":372,"more_decls":null}]