[{"doc_comment":"ReturnType must be `void` or `E!void`\nTODO This API was created back with the old design of async/await, when calling any\nasync function required an allocator. There is an ongoing experiment to transition\nall uses of this API to the simpler and more resource-aware `std.event.Batch` API.\nIf the transition goes well, all usages of `Group` will be gone, and this API\nwill be deleted.","pl":"fn Group(comptime ReturnType: type) type","sub_container_type":"struct ","src":17,"more_decls":{"pl":"frame_stack: Stack","src":19,"more_decls":null}{"pl":"alloc_stack: AllocStack","src":20,"more_decls":null}{"pl":"lock: Lock","src":21,"more_decls":null}{"pl":"allocator: *Allocator","src":22,"more_decls":null}{"pl":"pub const Node = struct ","src":33,"more_decls":{"pl":"bytes: []const u8 = &[0]u8{}","src":34,"more_decls":null}{"pl":"handle: anyframe->ReturnType","src":35,"more_decls":null}}{"pl":"fn init(allocator: *Allocator) Self","src":38,"more_decls":null}{"doc_comment":"Add a frame to the group. Thread-safe.","pl":"fn add(self: *Self, handle: anyframe->ReturnType) (error{OutOfMemory}!void)","src":48,"more_decls":null}{"doc_comment":"Add a node to the group. Thread-safe. Cannot fail.\n`node.data` should be the frame handle to add to the group.\nThe node's memory should be in the function frame of\nthe handle that is in the node, or somewhere guaranteed to live\nat least as long.","pl":"pub fn addNode(self: *Self, node: *Stack.Node) void {\n    self.frame_stack.push(node);\n}","src":64,"more_decls":null}{"doc_comment":"This is equivalent to adding a frame to the group but the memory of its frame is\nallocated by the group and freed by `wait`.\n`func` must be async and have return type `ReturnType`.\nThread-safe.","pl":"fn call(self: *Self, comptime func: anytype, args: anytype) error{OutOfMemory}!void","src":72,"more_decls":null}{"doc_comment":"Wait for all the calls and promises of the group to complete.\nThread-safe.\nSafe to call any number of times.","pl":"fn wait(self: *Self) callconv(.Async) ReturnType","src":91,"more_decls":null}}]