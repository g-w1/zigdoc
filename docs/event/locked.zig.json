[{"doc_comment":"Thread-safe async/await lock that protects one piece of data.\nFunctions which are waiting for the lock are suspended, and\nare resumed when the lock is released, in order.","pl":"fn Locked(comptime T: type) type","sub_container_type":"struct ","src":11,"more_decls":{"pl":"lock: Lock","src":13,"more_decls":null}{"pl":"private_data: T","src":14,"more_decls":null}{"pl":"pub const HeldLock = struct ","src":18,"more_decls":{"pl":"value: *T","src":19,"more_decls":null}{"pl":"held: Lock.Held","src":20,"more_decls":null}{"pl":"pub fn release(self: HeldLock) void {\n    self.held.release();\n}","src":22,"more_decls":null}}{"pl":"pub fn init(data: T) Self {\n    return Self{\n        .lock = Lock.init(),\n        .private_data = data,\n    };\n}","src":27,"more_decls":null}{"pl":"pub fn deinit(self: *Self) void {\n    self.lock.deinit();\n}","src":34,"more_decls":null}{"pl":"fn acquire(self: *Self) callconv(.Async) HeldLock","src":38,"more_decls":null}}]