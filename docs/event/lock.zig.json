[{"doc_comment":"Thread-safe async/await lock.\nFunctions which are waiting for the lock are suspended, and\nare resumed when the lock is released, in order.\nAllows only one actor to hold the lock.\nTODO: make this API also work in blocking I/O mode.","pl":"pub const Lock = struct ","src":17,"more_decls":{"pl":"mutex: std.Thread.Mutex = std.Thread.Mutex{}","src":18,"more_decls":null}{"pl":"head: usize = UNLOCKED","src":19,"more_decls":null}{"pl":"pub const Held = struct ","src":84,"more_decls":{"pl":"lock: *Lock","src":85,"more_decls":null}{"pl":"fn release(self: Held) void","src":87,"more_decls":null}}{"pl":"pub fn initLocked() Lock {\n    return Lock{ .head = LOCKED };\n}","src":34,"more_decls":null}{"pl":"fn acquire(self: *Lock) Held","src":38,"more_decls":null}}]