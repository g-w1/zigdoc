[{"doc_comment":"Thread-safe async/await RW lock that protects one piece of data.\nFunctions which are waiting for the lock are suspended, and\nare resumed when the lock is released, in order.","pl":"fn RwLocked(comptime T: type) type","sub_container_type":"struct ","src":11,"more_decls":{"pl":"lock: RwLock","src":13,"more_decls":null}{"pl":"locked_data: T","src":14,"more_decls":null}{"pl":"pub const HeldReadLock = struct ","src":18,"more_decls":{"pl":"value: *const T","src":19,"more_decls":null}{"pl":"held: RwLock.HeldRead","src":20,"more_decls":null}{"pl":"pub fn release(self: HeldReadLock) void {\n    self.held.release();\n}","src":22,"more_decls":null}}{"pl":"pub const HeldWriteLock = struct ","src":27,"more_decls":{"pl":"value: *T","src":28,"more_decls":null}{"pl":"held: RwLock.HeldWrite","src":29,"more_decls":null}{"pl":"pub fn release(self: HeldWriteLock) void {\n    self.held.release();\n}","src":31,"more_decls":null}}{"pl":"pub fn init(data: T) Self {\n    return Self{\n        .lock = RwLock.init(),\n        .locked_data = data,\n    };\n}","src":36,"more_decls":null}{"pl":"pub fn deinit(self: *Self) void {\n    self.lock.deinit();\n}","src":43,"more_decls":null}{"pl":"pub fn acquireRead(self: *Self) callconv(.Async) HeldReadLock {\n    return HeldReadLock{\n        .held = self.lock.acquireRead(),\n        .value = &self.locked_data,\n    };\n}","src":47,"more_decls":null}{"pl":"pub fn acquireWrite(self: *Self) callconv(.Async) HeldWriteLock {\n    return HeldWriteLock{\n        .held = self.lock.acquireWrite(),\n        .value = &self.locked_data,\n    };\n}","src":54,"more_decls":null}}]