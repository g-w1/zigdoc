[{"pl":"fn WaitGroupGeneric(comptime counter_size: u16) type","sub_container_type":"struct ","src":23,"more_decls":{"pl":"counter: CounterType = 0","src":30,"more_decls":null}{"pl":"max_counter: CounterType = std.math.maxInt(CounterType)","src":31,"more_decls":null}{"pl":"mutex: std.Thread.Mutex = .{}","src":32,"more_decls":null}{"pl":"waiters: ?*Waiter = null","src":33,"more_decls":null}{"pl":"fn begin(self: *Self, count: CounterType) error{Overflow}!void","src":41,"more_decls":null}{"pl":"fn finish(self: *Self, count: CounterType) void","src":50,"more_decls":null}{"pl":"fn wait(self: *Self) void","src":71,"more_decls":null}}{"doc_comment":"A WaitGroup keeps track and waits for a group of async tasks to finish.\nCall `begin` when creating new tasks, and have tasks call `finish` when done.\nYou can provide a count for both operations to perform them in bulk.\nCall `wait` to suspend until all tasks are completed.\nMultiple waiters are supported.\n\nWaitGroup is an instance of WaitGroupGeneric, which takes in a bitsize\nfor the internal counter. WaitGroup defaults to a `usize` counter.\nIt's also possible to define a max value for the counter so that\n`begin` will return error.Overflow when the limit is reached, even\nif the integer type has not has not overflowed.\nBy default `max_value` is set to std.math.maxInt(CounterType).","pl":"const WaitGroup = WaitGroupGeneric(std.meta.bitCount(usize))","src":21,"more_decls":null}]