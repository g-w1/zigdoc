[{"pl":"pub const TmpDir = struct ","src":294,"more_decls":{"pl":"dir: std.fs.Dir","src":295,"more_decls":null}{"pl":"parent_dir: std.fs.Dir","src":296,"more_decls":null}{"pl":"sub_path: [sub_path_len]u8","src":297,"more_decls":null}{"pl":"pub fn cleanup(self: *TmpDir) void {\n    self.dir.close();\n    self.parent_dir.deleteTree(&self.sub_path) catch {};\n    self.parent_dir.close();\n    self.* = undefined;\n}","src":302,"more_decls":null}}{"doc_comment":"This function is intended to be used only in tests. It prints diagnostics to stderr\nand then aborts when actual_error_union is not expected_error.","pl":"fn expectError(expected_error: anyerror, actual_error_union: anytype) void","src":29,"more_decls":null}{"doc_comment":"This function is intended to be used only in tests. When the two values are not\nequal, prints diagnostics to stderr to show exactly how they are not equal,\nthen aborts.\n`actual` is casted to the type of `expected`.","pl":"fn expectEqual(expected: anytype, actual: @TypeOf(expected)) void","src":46,"more_decls":null}{"doc_comment":"This function is intended to be used only in tests. When the formatted result of the template\nand its arguments does not equal the expected text, it prints diagnostics to stderr to show how\nthey are not equal, then returns an error.","pl":"fn expectFmt(expected: []const u8, comptime template: []const u8, args: anytype) !void","src":189,"more_decls":null}{"doc_comment":"This function is intended to be used only in tests. When the actual value is\nnot approximately equal to the expected value, prints diagnostics to stderr\nto show exactly how they are not equal, then aborts.\nSee `math.approxEqAbs` for more informations on the tolerance parameter.\nThe types must be floating point","pl":"fn expectApproxEqAbs(expected: anytype, actual: @TypeOf(expected), tolerance: @TypeOf(expected)) void","src":210,"more_decls":null}{"doc_comment":"This function is intended to be used only in tests. When the actual value is\nnot approximately equal to the expected value, prints diagnostics to stderr\nto show exactly how they are not equal, then aborts.\nSee `math.approxEqRel` for more informations on the tolerance parameter.\nThe types must be floating point","pl":"fn expectApproxEqRel(expected: anytype, actual: @TypeOf(expected), tolerance: @TypeOf(expected)) void","src":240,"more_decls":null}{"doc_comment":"This function is intended to be used only in tests. When the two slices are not\nequal, prints diagnostics to stderr to show exactly how they are not equal,\nthen aborts.\nIf your inputs are UTF-8 encoded strings, consider calling `expectEqualStrings` instead.","pl":"fn expectEqualSlices(comptime T: type, expected: []const T, actual: []const T) void","src":272,"more_decls":null}{"doc_comment":"This function is intended to be used only in tests. When `ok` is false, the test fails.\nA message is printed to stderr and then abort is called.","pl":"pub fn expect(ok: bool) void {\n    if (!ok) @panic(\"test failure\");\n}","src":290,"more_decls":null}{"pl":"fn tmpDir(opts: std.fs.Dir.OpenDirOptions) TmpDir","src":325,"more_decls":null}{"pl":"fn expectEqualStrings(expected: []const u8, actual: []const u8) void","src":368,"more_decls":null}{"pl":"fn expectStringEndsWith(actual: []const u8, expected_ends_with: []const u8) void","src":392,"more_decls":null}{"doc_comment":"Given a type, reference all the declarations inside, so that the semantic analyzer sees them.","pl":"pub fn refAllDecls(comptime T: type) void {\n    if (!@import(\"builtin\").is_test) return;\n    inline for (std.meta.declarations(T)) |decl| {\n        _ = decl;\n    }\n}","src":452,"more_decls":null}{"pl":"const FailingAllocator = @import(\"testing/failing_allocator.zig\").FailingAllocator","src":9,"more_decls":null}{"doc_comment":"This should only be used in temporary test programs.","pl":"const allocator = &allocator_instance.allocator","src":12,"more_decls":null}{"pl":"var allocator_instance = std.heap.GeneralPurposeAllocator(.{}){}","src":13,"more_decls":null}{"pl":"const failing_allocator = &failing_allocator_instance.allocator","src":15,"more_decls":null}{"pl":"var failing_allocator_instance = FailingAllocator.init(&base_allocator_instance.allocator, 0)","src":16,"more_decls":null}{"pl":"var base_allocator_instance = std.heap.FixedBufferAllocator.init(\"\")","src":18,"more_decls":null}{"doc_comment":"TODO https://github.com/ziglang/zig/issues/5738","pl":"var log_level = std.log.Level.warn","src":21,"more_decls":null}{"doc_comment":"This is available to any test that wants to execute Zig in a child process.\nIt will be the same executable that is running `zig test`.","pl":"var zig_exe_path: []const u8 = undefined","src":25,"more_decls":null}{"pl":"const expectWithinMargin = @compileError(\"expectWithinMargin is deprecated, use expectApproxEqAbs or expectApproxEqRel\")","src":202,"more_decls":null}{"pl":"const expectWithinEpsilon = @compileError(\"expectWithinEpsilon is deprecated, use expectApproxEqAbs or expectApproxEqRel\")","src":203,"more_decls":null}]