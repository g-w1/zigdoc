[{"pl":"fn ZlibStream(comptime ReaderType: type) type","sub_container_type":"struct ","src":15,"more_decls":{"pl":"allocator: *mem.Allocator","src":24,"more_decls":null}{"pl":"inflater: deflate.InflateStream(ReaderType)","src":25,"more_decls":null}{"pl":"in_reader: ReaderType","src":26,"more_decls":null}{"pl":"hasher: std.hash.Adler32","src":27,"more_decls":null}{"pl":"window_slice: []u8","src":28,"more_decls":null}{"pl":"pub fn deinit(self: *Self) void {\n    self.allocator.free(self.window_slice);\n}","src":64,"more_decls":null}{"pl":"fn read(self: *Self, buffer: []u8) Error!usize","src":69,"more_decls":null}{"pl":"pub fn reader(self: *Self) Reader {\n    return .{ .context = self };\n}","src":88,"more_decls":null}{"pl":"const Error = ReaderType.Error ||\n            deflate.InflateStream(ReaderType).Error ||\n            error{ WrongChecksum, Unsupported }","src":19,"more_decls":null}{"pl":"const Reader = io.Reader(*Self, Error, read)","src":22,"more_decls":null}}{"pl":"pub fn zlibStream(allocator: *mem.Allocator, reader: anytype) !ZlibStream(@TypeOf(reader)) {\n    return ZlibStream(@TypeOf(reader)).init(allocator, reader);\n}","src":94,"more_decls":null}{"pl":"fn assertEqual(comptime expected: []const u8, input: []const u8) void","src":115,"more_decls":null}]