[{"doc_comment":"Many producer, many consumer, non-allocating, thread-safe.\nUses a mutex to protect access.\nThe queue does not manage ownership and the user is responsible to\nmanage the storage of the nodes.","pl":"fn Queue(comptime T: type) type","sub_container_type":"struct ","src":14,"more_decls":{"pl":"head: ?*Node","src":16,"more_decls":null}{"pl":"tail: ?*Node","src":17,"more_decls":null}{"pl":"mutex: std.Thread.Mutex","src":18,"more_decls":null}{"doc_comment":"Initializes a new queue. The queue does not provide a `deinit()`\nfunction, so the user must take care of cleaning up the queue elements.","pl":"fn init() Self","src":25,"more_decls":null}{"doc_comment":"Appends `node` to the queue.\nThe lifetime of `node` must be longer than lifetime of queue.","pl":"fn put(self: *Self, node: *Node) void","src":35,"more_decls":null}{"doc_comment":"Gets a previously inserted node or returns `null` if there is none.\nIt is safe to `get()` a node from the queue while another thread tries\nto `remove()` the same node at the same time.","pl":"fn get(self: *Self) ?*Node","src":54,"more_decls":null}{"pl":"fn unget(self: *Self, node: *Node) void","src":71,"more_decls":null}{"doc_comment":"Removes a node from the queue, returns whether node was actually removed.\nIt is safe to `remove()` a node from the queue while another thread tries\nto `get()` the same node at the same time.","pl":"fn remove(self: *Self, node: *Node) bool","src":90,"more_decls":null}{"doc_comment":"Returns `true` if the queue is currently empty.\nNote that in a multi-consumer environment a return value of `false`\ndoes not mean that `get` will yield a non-`null` value!","pl":"pub fn isEmpty(self: *Self) bool {\n    const held = self.mutex.acquire();\n    defer held.release();\n    return self.head == null;\n}","src":116,"more_decls":null}{"doc_comment":"Dumps the contents of the queue to `stderr`.","pl":"pub fn dump(self: *Self) void {\n    self.dumpToStream(std.io.getStdErr().writer()) catch return;\n}","src":123,"more_decls":null}{"doc_comment":"Dumps the contents of the queue to `stream`.\nUp to 4 elements from the head are dumped and the tail of the queue is\ndumped as well.","pl":"fn dumpToStream(self: *Self, stream: anytype) !void","src":130,"more_decls":null}{"pl":"const Self = @This()","src":20,"more_decls":null}{"pl":"const Node = std.TailQueue(T).Node","src":21,"more_decls":null}}]