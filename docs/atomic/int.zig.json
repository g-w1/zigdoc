[{"doc_comment":"Thread-safe, lock-free integer","pl":"fn Int(comptime T: type) type","sub_container_type":"extern struct ","src":11,"more_decls":{"pl":"unprotected_value: T","src":16,"more_decls":null}{"pl":"pub fn init(init_val: T) Self {\n    return Self{ .unprotected_value = init_val };\n}","src":20,"more_decls":null}{"doc_comment":"Read, Modify, Write","pl":"fn rmw(self: *Self, comptime op: builtin.AtomicRmwOp, operand: T, comptime ordering: builtin.AtomicOrder) T","src":25,"more_decls":null}{"pl":"fn load(self: *Self, comptime ordering: builtin.AtomicOrder) T","src":33,"more_decls":null}{"pl":"fn store(self: *Self, value: T, comptime ordering: builtin.AtomicOrder) void","src":41,"more_decls":null}{"doc_comment":"Twos complement wraparound increment\nReturns previous value","pl":"pub fn incr(self: *Self) T {\n    return self.rmw(.Add, 1, .SeqCst);\n}","src":51,"more_decls":null}{"doc_comment":"Twos complement wraparound decrement\nReturns previous value","pl":"pub fn decr(self: *Self) T {\n    return self.rmw(.Sub, 1, .SeqCst);\n}","src":57,"more_decls":null}{"pl":"pub fn get(self: *Self) T {\n    return self.load(.SeqCst);\n}","src":61,"more_decls":null}{"pl":"pub fn set(self: *Self, new_value: T) void {\n    self.store(new_value, .SeqCst);\n}","src":65,"more_decls":null}{"pl":"pub fn xchg(self: *Self, new_value: T) T {\n    return self.rmw(.Xchg, new_value, .SeqCst);\n}","src":69,"more_decls":null}{"doc_comment":"Twos complement wraparound add\nReturns previous value","pl":"pub fn fetchAdd(self: *Self, op: T) T {\n    return self.rmw(.Add, op, .SeqCst);\n}","src":75,"more_decls":null}{"pl":"const Self = @This()","src":18,"more_decls":null}}]