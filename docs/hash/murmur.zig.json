[{"pl":"pub const Murmur2_32 = struct ","src":11,"more_decls":{"pl":"pub fn hash(str: []const u8) u32 {\n    return @call(.{ .modifier = .always_inline }, Self.hashWithSeed, .{ str, default_seed });\n}","src":14,"more_decls":null}{"pl":"fn hashWithSeed(str: []const u8, seed: u32) u32","src":18,"more_decls":null}{"pl":"pub fn hashUint32(v: u32) u32 {\n    return @call(.{ .modifier = .always_inline }, Self.hashUint32WithSeed, .{ v, default_seed });\n}","src":50,"more_decls":null}{"pl":"fn hashUint32WithSeed(v: u32, seed: u32) u32","src":54,"more_decls":null}{"pl":"pub fn hashUint64(v: u64) u32 {\n    return @call(.{ .modifier = .always_inline }, Self.hashUint64WithSeed, .{ v, default_seed });\n}","src":70,"more_decls":null}{"pl":"fn hashUint64WithSeed(v: u64, seed: u32) u32","src":74,"more_decls":null}}{"pl":"pub const Murmur2_64 = struct ","src":96,"more_decls":{"pl":"pub fn hash(str: []const u8) u64 {\n    return @call(.{ .modifier = .always_inline }, Self.hashWithSeed, .{ str, default_seed });\n}","src":99,"more_decls":null}{"pl":"fn hashWithSeed(str: []const u8, seed: u64) u64","src":103,"more_decls":null}{"pl":"pub fn hashUint32(v: u32) u64 {\n    return @call(.{ .modifier = .always_inline }, Self.hashUint32WithSeed, .{ v, default_seed });\n}","src":133,"more_decls":null}{"pl":"fn hashUint32WithSeed(v: u32, seed: u64) u64","src":137,"more_decls":null}{"pl":"pub fn hashUint64(v: u64) u64 {\n    return @call(.{ .modifier = .always_inline }, Self.hashUint64WithSeed, .{ v, default_seed });\n}","src":150,"more_decls":null}{"pl":"fn hashUint64WithSeed(v: u64, seed: u64) u64","src":154,"more_decls":null}}{"pl":"pub const Murmur3_32 = struct ","src":171,"more_decls":{"pl":"pub fn hash(str: []const u8) u32 {\n    return @call(.{ .modifier = .always_inline }, Self.hashWithSeed, .{ str, default_seed });\n}","src":178,"more_decls":null}{"pl":"fn hashWithSeed(str: []const u8, seed: u32) u32","src":182,"more_decls":null}{"pl":"pub fn hashUint32(v: u32) u32 {\n    return @call(.{ .modifier = .always_inline }, Self.hashUint32WithSeed, .{ v, default_seed });\n}","src":226,"more_decls":null}{"pl":"fn hashUint32WithSeed(v: u32, seed: u32) u32","src":230,"more_decls":null}{"pl":"pub fn hashUint64(v: u64) u32 {\n    return @call(.{ .modifier = .always_inline }, Self.hashUint64WithSeed, .{ v, default_seed });\n}","src":252,"more_decls":null}{"pl":"fn hashUint64WithSeed(v: u64, seed: u32) u32","src":256,"more_decls":null}}]