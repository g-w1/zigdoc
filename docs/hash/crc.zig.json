[{"pl":"pub const Polynomial = enum","src":16,"more_decls":{"pl":"IEEE = 0xedb88320","src":17,"more_decls":null}{"pl":"Castagnoli = 0x82f63b78","src":18,"more_decls":null}{"pl":"Koopman = 0xeb31d82e","src":19,"more_decls":null}{"pl":"_","src":20,"more_decls":null}}{"pl":"fn Crc32WithPoly(comptime poly: Polynomial) type","sub_container_type":"struct ","src":27,"more_decls":{"pl":"crc: u32","src":61,"more_decls":null}{"pl":"pub fn init() Self {\n    return Self{ .crc = 0xffffffff };\n}","src":63,"more_decls":null}{"pl":"fn update(self: *Self, input: []const u8) void","src":67,"more_decls":null}{"pl":"pub fn final(self: *Self) u32 {\n    return ~self.crc;\n}","src":92,"more_decls":null}{"pl":"pub fn hash(input: []const u8) u32 {\n    var c = Self.init();\n    c.update(input);\n    return c.final();\n}","src":96,"more_decls":null}}{"pl":"fn Crc32SmallWithPoly(comptime poly: Polynomial) type","sub_container_type":"struct ","src":127,"more_decls":{"pl":"crc: u32","src":149,"more_decls":null}{"pl":"pub fn init() Self {\n    return Self{ .crc = 0xffffffff };\n}","src":151,"more_decls":null}{"pl":"pub fn update(self: *Self, input: []const u8) void {\n    for (input) |b| {\n        self.crc = lookup_table[@truncate(u4, self.crc ^ (b >> 0))] ^ (self.crc >> 4);\n        self.crc = lookup_table[@truncate(u4, self.crc ^ (b >> 4))] ^ (self.crc >> 4);\n    }\n}","src":155,"more_decls":null}{"pl":"pub fn final(self: *Self) u32 {\n    return ~self.crc;\n}","src":162,"more_decls":null}{"pl":"pub fn hash(input: []const u8) u32 {\n    var c = Self.init();\n    c.update(input);\n    return c.final();\n}","src":166,"more_decls":null}}{"pl":"const Crc32 = Crc32WithPoly(.IEEE)","src":24,"more_decls":null}]