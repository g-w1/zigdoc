[{"pl":"pub const mach_header = extern struct ","src":5,"more_decls":{"pl":"magic: u32","src":6,"more_decls":null}{"pl":"cputype: cpu_type_t","src":7,"more_decls":null}{"pl":"cpusubtype: cpu_subtype_t","src":8,"more_decls":null}{"pl":"filetype: u32","src":9,"more_decls":null}{"pl":"ncmds: u32","src":10,"more_decls":null}{"pl":"sizeofcmds: u32","src":11,"more_decls":null}{"pl":"flags: u32","src":12,"more_decls":null}}{"pl":"pub const mach_header_64 = extern struct ","src":15,"more_decls":{"pl":"magic: u32","src":16,"more_decls":null}{"pl":"cputype: cpu_type_t","src":17,"more_decls":null}{"pl":"cpusubtype: cpu_subtype_t","src":18,"more_decls":null}{"pl":"filetype: u32","src":19,"more_decls":null}{"pl":"ncmds: u32","src":20,"more_decls":null}{"pl":"sizeofcmds: u32","src":21,"more_decls":null}{"pl":"flags: u32","src":22,"more_decls":null}{"pl":"reserved: u32","src":23,"more_decls":null}}{"pl":"pub const load_command = extern struct ","src":26,"more_decls":{"pl":"cmd: u32","src":27,"more_decls":null}{"pl":"cmdsize: u32","src":28,"more_decls":null}}{"doc_comment":"The uuid load command contains a single 128-bit unique random number that\nidentifies an object produced by the static link editor.","pl":"pub const uuid_command = extern struct ","src":33,"more_decls":{"doc_comment":"LC_UUID","pl":"cmd: u32","src":35,"more_decls":null}{"doc_comment":"sizeof(struct uuid_command)","pl":"cmdsize: u32","src":38,"more_decls":null}{"doc_comment":"the 128-bit uuid","pl":"uuid: [16]u8","src":41,"more_decls":null}}{"doc_comment":"The version_min_command contains the min OS version on which this\nbinary was built to run.","pl":"pub const version_min_command = extern struct ","src":46,"more_decls":{"doc_comment":"LC_VERSION_MIN_MACOSX or LC_VERSION_MIN_IPHONEOS or LC_VERSION_MIN_WATCHOS or LC_VERSION_MIN_TVOS","pl":"cmd: u32","src":48,"more_decls":null}{"doc_comment":"sizeof(struct version_min_command)","pl":"cmdsize: u32","src":51,"more_decls":null}{"doc_comment":"X.Y.Z is encoded in nibbles xxxx.yy.zz","pl":"version: u32","src":54,"more_decls":null}{"doc_comment":"X.Y.Z is encoded in nibbles xxxx.yy.zz","pl":"sdk: u32","src":57,"more_decls":null}}{"doc_comment":"The source_version_command is an optional load command containing\nthe version of the sources used to build the binary.","pl":"pub const source_version_command = extern struct ","src":62,"more_decls":{"doc_comment":"LC_SOURCE_VERSION","pl":"cmd: u32","src":64,"more_decls":null}{"doc_comment":"sizeof(source_version_command)","pl":"cmdsize: u32","src":67,"more_decls":null}{"doc_comment":"A.B.C.D.E packed as a24.b10.c10.d10.e10","pl":"version: u64","src":70,"more_decls":null}}{"doc_comment":"The entry_point_command is a replacement for thread_command.\nIt is used for main executables to specify the location (file offset)\nof main(). If -stack_size was used at link time, the stacksize\nfield will contain the stack size needed for the main thread.","pl":"pub const entry_point_command = extern struct ","src":77,"more_decls":{"doc_comment":"LC_MAIN only used in MH_EXECUTE filetypes","pl":"cmd: u32","src":79,"more_decls":null}{"doc_comment":"sizeof(struct entry_point_command)","pl":"cmdsize: u32","src":82,"more_decls":null}{"doc_comment":"file (__TEXT) offset of main()","pl":"entryoff: u64","src":85,"more_decls":null}{"doc_comment":"if not zero, initial stack size","pl":"stacksize: u64","src":88,"more_decls":null}}{"doc_comment":"The symtab_command contains the offsets and sizes of the link-edit 4.3BSD\n\"stab\" style symbol table information as described in the header files\n<nlist.h> and <stab.h>.","pl":"pub const symtab_command = extern struct ","src":94,"more_decls":{"doc_comment":"LC_SYMTAB","pl":"cmd: u32","src":96,"more_decls":null}{"doc_comment":"sizeof(struct symtab_command)","pl":"cmdsize: u32","src":99,"more_decls":null}{"doc_comment":"symbol table offset","pl":"symoff: u32","src":102,"more_decls":null}{"doc_comment":"number of symbol table entries","pl":"nsyms: u32","src":105,"more_decls":null}{"doc_comment":"string table offset","pl":"stroff: u32","src":108,"more_decls":null}{"doc_comment":"string table size in bytes","pl":"strsize: u32","src":111,"more_decls":null}}{"doc_comment":"This is the second set of the symbolic information which is used to support\nthe data structures for the dynamically link editor.\n\nThe original set of symbolic information in the symtab_command which contains\nthe symbol and string tables must also be present when this load command is\npresent.  When this load command is present the symbol table is organized\ninto three groups of symbols:\nlocal symbols (static and debugging symbols) - grouped by module\ndefined external symbols - grouped by module (sorted by name if not lib)\nundefined external symbols (sorted by name if MH_BINDATLOAD is not set,\nand in order the were seen by the static\nlinker if MH_BINDATLOAD is set)\nIn this load command there are offsets and counts to each of the three groups\nof symbols.\n\nThis load command contains a the offsets and sizes of the following new\nsymbolic information tables:\ntable of contents\nmodule table\nreference symbol table\nindirect symbol table\nThe first three tables above (the table of contents, module table and\nreference symbol table) are only present if the file is a dynamically linked\nshared library.  For executable and object modules, which are files\ncontaining only one module, the information that would be in these three\ntables is determined as follows:\ntable of contents - the defined external symbols are sorted by name\nmodule table - the file contains only one module so everything in the\nfile is part of the module.\nreference symbol table - is the defined and undefined external symbols\n\nFor dynamically linked shared library files this load command also contains\noffsets and sizes to the pool of relocation entries for all sections\nseparated into two groups:\nexternal relocation entries\nlocal relocation entries\nFor executable and object modules the relocation entries continue to hang\noff the section structures.","pl":"pub const dysymtab_command = extern struct ","src":152,"more_decls":{"doc_comment":"LC_DYSYMTAB","pl":"cmd: u32","src":154,"more_decls":null}{"doc_comment":"sizeof(struct dysymtab_command)","pl":"cmdsize: u32","src":157,"more_decls":null}{"doc_comment":"index of local symbols","pl":"ilocalsym: u32","src":174,"more_decls":null}{"doc_comment":"number of local symbols","pl":"nlocalsym: u32","src":177,"more_decls":null}{"doc_comment":"index to externally defined symbols","pl":"iextdefsym: u32","src":180,"more_decls":null}{"doc_comment":"number of externally defined symbols","pl":"nextdefsym: u32","src":183,"more_decls":null}{"doc_comment":"index to undefined symbols","pl":"iundefsym: u32","src":186,"more_decls":null}{"doc_comment":"number of undefined symbols","pl":"nundefsym: u32","src":189,"more_decls":null}{"doc_comment":"file offset to table of contents","pl":"tocoff: u32","src":199,"more_decls":null}{"doc_comment":"number of entries in table of contents","pl":"ntoc: u32","src":202,"more_decls":null}{"doc_comment":"file offset to module table","pl":"modtaboff: u32","src":213,"more_decls":null}{"doc_comment":"number of module table entries","pl":"nmodtab: u32","src":216,"more_decls":null}{"doc_comment":"offset to referenced symbol table","pl":"extrefsymoff: u32","src":227,"more_decls":null}{"doc_comment":"number of referenced symbol table entries","pl":"nextrefsyms: u32","src":230,"more_decls":null}{"doc_comment":"file offset to the indirect symbol table","pl":"indirectsymoff: u32","src":242,"more_decls":null}{"doc_comment":"number of indirect symbol table entries","pl":"nindirectsyms: u32","src":245,"more_decls":null}{"doc_comment":"offset to external relocation entries","pl":"extreloff: u32","src":274,"more_decls":null}{"doc_comment":"number of external relocation entries","pl":"nextrel: u32","src":277,"more_decls":null}{"doc_comment":"offset to local relocation entries","pl":"locreloff: u32","src":284,"more_decls":null}{"doc_comment":"number of local relocation entries","pl":"nlocrel: u32","src":287,"more_decls":null}}{"doc_comment":"The linkedit_data_command contains the offsets and sizes of a blob\nof data in the __LINKEDIT segment.","pl":"pub const linkedit_data_command = extern struct ","src":292,"more_decls":{"doc_comment":"LC_CODE_SIGNATURE, LC_SEGMENT_SPLIT_INFO, LC_FUNCTION_STARTS, LC_DATA_IN_CODE, LC_DYLIB_CODE_SIGN_DRS or LC_LINKER_OPTIMIZATION_HINT.","pl":"cmd: u32","src":294,"more_decls":null}{"doc_comment":"sizeof(struct linkedit_data_command)","pl":"cmdsize: u32","src":297,"more_decls":null}{"doc_comment":"file offset of data in __LINKEDIT segment","pl":"dataoff: u32","src":300,"more_decls":null}{"doc_comment":"file size of data in __LINKEDIT segment","pl":"datasize: u32","src":303,"more_decls":null}}{"doc_comment":"The dyld_info_command contains the file offsets and sizes of\nthe new compressed form of the information dyld needs to\nload the image.  This information is used by dyld on Mac OS X\n10.6 and later.  All information pointed to by this command\nis encoded using byte streams, so no endian swapping is needed\nto interpret it.","pl":"pub const dyld_info_command = extern struct ","src":312,"more_decls":{"doc_comment":"LC_DYLD_INFO or LC_DYLD_INFO_ONLY","pl":"cmd: u32","src":314,"more_decls":null}{"doc_comment":"sizeof(struct dyld_info_command)","pl":"cmdsize: u32","src":317,"more_decls":null}{"doc_comment":"file offset to rebase info","pl":"rebase_off: u32","src":330,"more_decls":null}{"doc_comment":"size of rebase info","pl":"rebase_size: u32","src":333,"more_decls":null}{"doc_comment":"file offset to binding info","pl":"bind_off: u32","src":347,"more_decls":null}{"doc_comment":"size of binding info","pl":"bind_size: u32","src":350,"more_decls":null}{"doc_comment":"file offset to weak binding info","pl":"weak_bind_off: u32","src":367,"more_decls":null}{"doc_comment":"size of weak binding info","pl":"weak_bind_size: u32","src":370,"more_decls":null}{"doc_comment":"file offset to lazy binding info","pl":"lazy_bind_off: u32","src":384,"more_decls":null}{"doc_comment":"size of lazy binding info","pl":"lazy_bind_size: u32","src":387,"more_decls":null}{"doc_comment":"file offset to lazy binding info","pl":"export_off: u32","src":421,"more_decls":null}{"doc_comment":"size of lazy binding info","pl":"export_size: u32","src":424,"more_decls":null}}{"doc_comment":"A program that uses a dynamic linker contains a dylinker_command to identify\nthe name of the dynamic linker (LC_LOAD_DYLINKER). And a dynamic linker\ncontains a dylinker_command to identify the dynamic linker (LC_ID_DYLINKER).\nA file can have at most one of these.\nThis struct is also used for the LC_DYLD_ENVIRONMENT load command and contains\nstring for dyld to treat like an environment variable.","pl":"pub const dylinker_command = extern struct ","src":433,"more_decls":{"doc_comment":"LC_ID_DYLINKER, LC_LOAD_DYLINKER, or LC_DYLD_ENVIRONMENT","pl":"cmd: u32","src":435,"more_decls":null}{"doc_comment":"includes pathname string","pl":"cmdsize: u32","src":438,"more_decls":null}{"doc_comment":"A variable length string in a load command is represented by an lc_str\nunion.  The strings are stored just after the load command structure and\nthe offset is from the start of the load command structure.  The size\nof the string is reflected in the cmdsize field of the load command.\nOnce again any padded bytes to bring the cmdsize field to a multiple\nof 4 bytes must be zero.","pl":"name: u32","src":446,"more_decls":null}}{"doc_comment":"A dynamically linked shared library (filetype == MH_DYLIB in the mach header)\ncontains a dylib_command (cmd == LC_ID_DYLIB) to identify the library.\nAn object that uses a dynamically linked shared library also contains a\ndylib_command (cmd == LC_LOAD_DYLIB, LC_LOAD_WEAK_DYLIB, or\nLC_REEXPORT_DYLIB) for each library it uses.","pl":"pub const dylib_command = extern struct ","src":454,"more_decls":{"doc_comment":"LC_ID_DYLIB, LC_LOAD_WEAK_DYLIB, LC_LOAD_DYLIB, LC_REEXPORT_DYLIB","pl":"cmd: u32","src":456,"more_decls":null}{"doc_comment":"includes pathname string","pl":"cmdsize: u32","src":459,"more_decls":null}{"doc_comment":"the library identification","pl":"dylib: dylib","src":462,"more_decls":null}}{"doc_comment":"Dynamicaly linked shared libraries are identified by two things.  The\npathname (the name of the library as found for execution), and the\ncompatibility version number.  The pathname must match and the compatibility\nnumber in the user of the library must be greater than or equal to the\nlibrary being used.  The time stamp is used to record the time a library was\nbuilt and copied into user so it can be use to determined if the library used\nat runtime is exactly the same as used to built the program.","pl":"pub const dylib = extern struct ","src":472,"more_decls":{"doc_comment":"library's pathname (offset pointing at the end of dylib_command)","pl":"name: u32","src":474,"more_decls":null}{"doc_comment":"library's build timestamp","pl":"timestamp: u32","src":477,"more_decls":null}{"doc_comment":"library's current version number","pl":"current_version: u32","src":480,"more_decls":null}{"doc_comment":"library's compatibility version number","pl":"compatibility_version: u32","src":483,"more_decls":null}}{"doc_comment":"The segment load command indicates that a part of this file is to be\nmapped into the task's address space.  The size of this segment in memory,\nvmsize, maybe equal to or larger than the amount to map from this file,\nfilesize.  The file is mapped starting at fileoff to the beginning of\nthe segment in memory, vmaddr.  The rest of the memory of the segment,\nif any, is allocated zero fill on demand.  The segment's maximum virtual\nmemory protection and initial virtual memory protection are specified\nby the maxprot and initprot fields.  If the segment has sections then the\nsection structures directly follow the segment command and their size is\nreflected in cmdsize.","pl":"pub const segment_command = extern struct ","src":496,"more_decls":{"doc_comment":"LC_SEGMENT","pl":"cmd: u32","src":498,"more_decls":null}{"doc_comment":"includes sizeof section structs","pl":"cmdsize: u32","src":501,"more_decls":null}{"doc_comment":"segment name","pl":"segname: [16]u8","src":504,"more_decls":null}{"doc_comment":"memory address of this segment","pl":"vmaddr: u32","src":507,"more_decls":null}{"doc_comment":"memory size of this segment","pl":"vmsize: u32","src":510,"more_decls":null}{"doc_comment":"file offset of this segment","pl":"fileoff: u32","src":513,"more_decls":null}{"doc_comment":"amount to map from the file","pl":"filesize: u32","src":516,"more_decls":null}{"doc_comment":"maximum VM protection","pl":"maxprot: vm_prot_t","src":519,"more_decls":null}{"doc_comment":"initial VM protection","pl":"initprot: vm_prot_t","src":522,"more_decls":null}{"doc_comment":"number of sections in segment","pl":"nsects: u32","src":525,"more_decls":null}{"pl":"flags: u32","src":526,"more_decls":null}}{"doc_comment":"The 64-bit segment load command indicates that a part of this file is to be\nmapped into a 64-bit task's address space.  If the 64-bit segment has\nsections then section_64 structures directly follow the 64-bit segment\ncommand and their size is reflected in cmdsize.","pl":"pub const segment_command_64 = extern struct ","src":533,"more_decls":{"doc_comment":"LC_SEGMENT_64","pl":"cmd: u32","src":535,"more_decls":null}{"doc_comment":"includes sizeof section_64 structs","pl":"cmdsize: u32","src":538,"more_decls":null}{"doc_comment":"segment name","pl":"segname: [16]u8","src":541,"more_decls":null}{"doc_comment":"memory address of this segment","pl":"vmaddr: u64","src":544,"more_decls":null}{"doc_comment":"memory size of this segment","pl":"vmsize: u64","src":547,"more_decls":null}{"doc_comment":"file offset of this segment","pl":"fileoff: u64","src":550,"more_decls":null}{"doc_comment":"amount to map from the file","pl":"filesize: u64","src":553,"more_decls":null}{"doc_comment":"maximum VM protection","pl":"maxprot: vm_prot_t","src":556,"more_decls":null}{"doc_comment":"initial VM protection","pl":"initprot: vm_prot_t","src":559,"more_decls":null}{"doc_comment":"number of sections in segment","pl":"nsects: u32","src":562,"more_decls":null}{"pl":"flags: u32","src":563,"more_decls":null}}{"doc_comment":"A segment is made up of zero or more sections.  Non-MH_OBJECT files have\nall of their segments with the proper sections in each, and padded to the\nspecified segment alignment when produced by the link editor.  The first\nsegment of a MH_EXECUTE and MH_FVMLIB format file contains the mach_header\nand load commands of the object file before its first section.  The zero\nfill sections are always last in their segment (in all formats).  This\nallows the zeroed segment padding to be mapped into memory where zero fill\nsections might be. The gigabyte zero fill sections, those with the section\ntype S_GB_ZEROFILL, can only be in a segment with sections of this type.\nThese segments are then placed after all other segments.\n\nThe MH_OBJECT format has all of its sections in one segment for\ncompactness.  There is no padding to a specified segment boundary and the\nmach_header and load commands are not part of the segment.\n\nSections with the same section name, sectname, going into the same segment,\nsegname, are combined by the link editor.  The resulting section is aligned\nto the maximum alignment of the combined sections and is the new section's\nalignment.  The combined sections are aligned to their original alignment in\nthe combined section.  Any padded bytes to get the specified alignment are\nzeroed.\n\nThe format of the relocation entries referenced by the reloff and nreloc\nfields of the section structure for mach object files is described in the\nheader file <reloc.h>.","pl":"pub const @\"section\" = extern struct ","src":591,"more_decls":{"doc_comment":"name of this section","pl":"sectname: [16]u8","src":593,"more_decls":null}{"doc_comment":"segment this section goes in","pl":"segname: [16]u8","src":596,"more_decls":null}{"doc_comment":"memory address of this section","pl":"addr: u32","src":599,"more_decls":null}{"doc_comment":"size in bytes of this section","pl":"size: u32","src":602,"more_decls":null}{"doc_comment":"file offset of this section","pl":"offset: u32","src":605,"more_decls":null}{"doc_comment":"section alignment (power of 2)","pl":"@\"align\": u32","src":608,"more_decls":null}{"doc_comment":"file offset of relocation entries","pl":"reloff: u32","src":611,"more_decls":null}{"doc_comment":"number of relocation entries","pl":"nreloc: u32","src":614,"more_decls":null}{"doc_comment":"flags (section type and attributes","pl":"flags: u32","src":617,"more_decls":null}{"doc_comment":"reserved (for offset or index)","pl":"reserved1: u32","src":620,"more_decls":null}{"doc_comment":"reserved (for count or sizeof)","pl":"reserved2: u32","src":623,"more_decls":null}}{"pl":"pub const section_64 = extern struct ","src":626,"more_decls":{"doc_comment":"name of this section","pl":"sectname: [16]u8","src":628,"more_decls":null}{"doc_comment":"segment this section goes in","pl":"segname: [16]u8","src":631,"more_decls":null}{"doc_comment":"memory address of this section","pl":"addr: u64","src":634,"more_decls":null}{"doc_comment":"size in bytes of this section","pl":"size: u64","src":637,"more_decls":null}{"doc_comment":"file offset of this section","pl":"offset: u32","src":640,"more_decls":null}{"doc_comment":"section alignment (power of 2)","pl":"@\"align\": u32","src":643,"more_decls":null}{"doc_comment":"file offset of relocation entries","pl":"reloff: u32","src":646,"more_decls":null}{"doc_comment":"number of relocation entries","pl":"nreloc: u32","src":649,"more_decls":null}{"doc_comment":"flags (section type and attributes","pl":"flags: u32","src":652,"more_decls":null}{"doc_comment":"reserved (for offset or index)","pl":"reserved1: u32","src":655,"more_decls":null}{"doc_comment":"reserved (for count or sizeof)","pl":"reserved2: u32","src":658,"more_decls":null}{"doc_comment":"reserved","pl":"reserved3: u32","src":661,"more_decls":null}}{"pl":"pub const nlist = extern struct ","src":664,"more_decls":{"pl":"n_strx: u32","src":665,"more_decls":null}{"pl":"n_type: u8","src":666,"more_decls":null}{"pl":"n_sect: u8","src":667,"more_decls":null}{"pl":"n_desc: i16","src":668,"more_decls":null}{"pl":"n_value: u32","src":669,"more_decls":null}}{"pl":"pub const nlist_64 = extern struct ","src":672,"more_decls":{"pl":"n_strx: u32","src":673,"more_decls":null}{"pl":"n_type: u8","src":674,"more_decls":null}{"pl":"n_sect: u8","src":675,"more_decls":null}{"pl":"n_desc: u16","src":676,"more_decls":null}{"pl":"n_value: u64","src":677,"more_decls":null}}{"doc_comment":"Format of a relocation entry of a Mach-O file.  Modified from the 4.3BSD\nformat.  The modifications from the original format were changing the value\nof the r_symbolnum field for \"local\" (r_extern == 0) relocation entries.\nThis modification is required to support symbols in an arbitrary number of\nsections not just the three sections (text, data and bss) in a 4.3BSD file.\nAlso the last 4 bits have had the r_type tag added to them.","pl":"pub const relocation_info = packed struct ","src":686,"more_decls":{"doc_comment":"offset in the section to what is being relocated","pl":"r_address: i32","src":688,"more_decls":null}{"doc_comment":"symbol index if r_extern == 1 or section ordinal if r_extern == 0","pl":"r_symbolnum: u24","src":691,"more_decls":null}{"doc_comment":"was relocated pc relative already","pl":"r_pcrel: u1","src":694,"more_decls":null}{"doc_comment":"0=byte, 1=word, 2=long, 3=quad","pl":"r_length: u2","src":697,"more_decls":null}{"doc_comment":"does not include value of sym referenced","pl":"r_extern: u1","src":700,"more_decls":null}{"doc_comment":"if not 0, machine specific relocation type","pl":"r_type: u4","src":703,"more_decls":null}}{"pl":"pub const reloc_type_x86_64 = packed enum","src":1322,"more_decls":{"doc_comment":"for absolute addresses","pl":"X86_64_RELOC_UNSIGNED = 0","src":1324,"more_decls":null}{"doc_comment":"for signed 32-bit displacement","pl":"X86_64_RELOC_SIGNED","src":1327,"more_decls":null}{"doc_comment":"a CALL/JMP instruction with 32-bit displacement","pl":"X86_64_RELOC_BRANCH","src":1330,"more_decls":null}{"doc_comment":"a MOVQ load of a GOT entry","pl":"X86_64_RELOC_GOT_LOAD","src":1333,"more_decls":null}{"doc_comment":"other GOT references","pl":"X86_64_RELOC_GOT","src":1336,"more_decls":null}{"doc_comment":"must be followed by a X86_64_RELOC_UNSIGNED","pl":"X86_64_RELOC_SUBTRACTOR","src":1339,"more_decls":null}{"doc_comment":"for signed 32-bit displacement with a -1 addend","pl":"X86_64_RELOC_SIGNED_1","src":1342,"more_decls":null}{"doc_comment":"for signed 32-bit displacement with a -2 addend","pl":"X86_64_RELOC_SIGNED_2","src":1345,"more_decls":null}{"doc_comment":"for signed 32-bit displacement with a -4 addend","pl":"X86_64_RELOC_SIGNED_4","src":1348,"more_decls":null}{"doc_comment":"for thread local variables","pl":"X86_64_RELOC_TLV","src":1351,"more_decls":null}}{"pl":"pub const reloc_type_arm64 = packed enum","src":1354,"more_decls":{"doc_comment":"For pointers.","pl":"ARM64_RELOC_UNSIGNED = 0","src":1356,"more_decls":null}{"doc_comment":"Must be followed by a ARM64_RELOC_UNSIGNED.","pl":"ARM64_RELOC_SUBTRACTOR","src":1359,"more_decls":null}{"doc_comment":"A B/BL instruction with 26-bit displacement.","pl":"ARM64_RELOC_BRANCH26","src":1362,"more_decls":null}{"doc_comment":"Pc-rel distance to page of target.","pl":"ARM64_RELOC_PAGE21","src":1365,"more_decls":null}{"doc_comment":"Offset within page, scaled by r_length.","pl":"ARM64_RELOC_PAGEOFF12","src":1368,"more_decls":null}{"doc_comment":"Pc-rel distance to page of GOT slot.","pl":"ARM64_RELOC_GOT_LOAD_PAGE21","src":1371,"more_decls":null}{"doc_comment":"Offset within page of GOT slot, scaled by r_length.","pl":"ARM64_RELOC_GOT_LOAD_PAGEOFF12","src":1374,"more_decls":null}{"doc_comment":"For pointers to GOT slots.","pl":"ARM64_RELOC_POINTER_TO_GOT","src":1377,"more_decls":null}{"doc_comment":"Pc-rel distance to page of TLVP slot.","pl":"ARM64_RELOC_TLVP_LOAD_PAGE21","src":1380,"more_decls":null}{"doc_comment":"Offset within page of TLVP slot, scaled by r_length.","pl":"ARM64_RELOC_TLVP_LOAD_PAGEOFF12","src":1383,"more_decls":null}{"doc_comment":"Must be followed by PAGE21 or PAGEOFF12.","pl":"ARM64_RELOC_ADDEND","src":1386,"more_decls":null}}{"doc_comment":"This CodeDirectory is tailored specfically at version 0x20400.","pl":"pub const CodeDirectory = extern struct ","src":1523,"more_decls":{"doc_comment":"Magic number (CSMAGIC_CODEDIRECTORY)","pl":"magic: u32","src":1525,"more_decls":null}{"doc_comment":"Total length of CodeDirectory blob","pl":"length: u32","src":1528,"more_decls":null}{"doc_comment":"Compatibility version","pl":"version: u32","src":1531,"more_decls":null}{"doc_comment":"Setup and mode flags","pl":"flags: u32","src":1534,"more_decls":null}{"doc_comment":"Offset of hash slot element at index zero","pl":"hashOffset: u32","src":1537,"more_decls":null}{"doc_comment":"Offset of identifier string","pl":"identOffset: u32","src":1540,"more_decls":null}{"doc_comment":"Number of special hash slots","pl":"nSpecialSlots: u32","src":1543,"more_decls":null}{"doc_comment":"Number of ordinary (code) hash slots","pl":"nCodeSlots: u32","src":1546,"more_decls":null}{"doc_comment":"Limit to main image signature range","pl":"codeLimit: u32","src":1549,"more_decls":null}{"doc_comment":"Size of each hash in bytes","pl":"hashSize: u8","src":1552,"more_decls":null}{"doc_comment":"Type of hash (cdHashType* constants)","pl":"hashType: u8","src":1555,"more_decls":null}{"doc_comment":"Platform identifier; zero if not platform binary","pl":"platform: u8","src":1558,"more_decls":null}{"doc_comment":"log2(page size in bytes); 0 => infinite","pl":"pageSize: u8","src":1561,"more_decls":null}{"doc_comment":"Unused (must be zero)","pl":"spare2: u32","src":1564,"more_decls":null}{"doc_comment":"","pl":"scatterOffset: u32","src":1567,"more_decls":null}{"doc_comment":"","pl":"teamOffset: u32","src":1570,"more_decls":null}{"doc_comment":"","pl":"spare3: u32","src":1573,"more_decls":null}{"doc_comment":"","pl":"codeLimit64: u64","src":1576,"more_decls":null}{"doc_comment":"Offset of executable segment","pl":"execSegBase: u64","src":1579,"more_decls":null}{"doc_comment":"Limit of executable segment","pl":"execSegLimit: u64","src":1582,"more_decls":null}{"doc_comment":"Executable segment flags","pl":"execSegFlags: u64","src":1585,"more_decls":null}}{"doc_comment":"Structure of an embedded-signature SuperBlob","pl":"pub const BlobIndex = extern struct ","src":1589,"more_decls":{"doc_comment":"Type of entry","pl":"@\"type\": u32","src":1591,"more_decls":null}{"doc_comment":"Offset of entry","pl":"offset: u32","src":1594,"more_decls":null}}{"doc_comment":"This structure is followed by GenericBlobs in no particular\norder as indicated by offsets in index","pl":"pub const SuperBlob = extern struct ","src":1599,"more_decls":{"doc_comment":"Magic number","pl":"magic: u32","src":1601,"more_decls":null}{"doc_comment":"Total length of SuperBlob","pl":"length: u32","src":1604,"more_decls":null}{"doc_comment":"Number of index BlobIndex entries following this struct","pl":"count: u32","src":1607,"more_decls":null}}{"pl":"pub const GenericBlob = extern struct ","src":1610,"more_decls":{"doc_comment":"Magic number","pl":"magic: u32","src":1612,"more_decls":null}{"doc_comment":"Total length of blob","pl":"length: u32","src":1615,"more_decls":null}}{"doc_comment":"The LC_DATA_IN_CODE load commands uses a linkedit_data_command\nto point to an array of data_in_code_entry entries. Each entry\ndescribes a range of data in a code section.","pl":"pub const data_in_code_entry = extern struct ","src":1621,"more_decls":{"doc_comment":"From mach_header to start of data range.","pl":"offset: u32","src":1623,"more_decls":null}{"doc_comment":"Number of bytes in data range.","pl":"length: u16","src":1626,"more_decls":null}{"doc_comment":"A DICE_KIND value.","pl":"kind: u16","src":1629,"more_decls":null}}{"doc_comment":"After MacOS X 10.1 when a new load command is added that is required to be\nunderstood by the dynamic linker for the image to execute properly the\nLC_REQ_DYLD bit will be or'ed into the load command constant.  If the dynamic\nlinker sees such a load command it it does not understand will issue a\n\"unknown load command required for execution\" error and refuse to use the\nimage.  Other load commands without this bit that are not understood will\nsimply be ignored.","pl":"const LC_REQ_DYLD = 0x80000000","src":713,"more_decls":null}{"doc_comment":"segment of this file to be mapped","pl":"const LC_SEGMENT = 0x1","src":716,"more_decls":null}{"doc_comment":"link-edit stab symbol table info","pl":"const LC_SYMTAB = 0x2","src":719,"more_decls":null}{"doc_comment":"link-edit gdb symbol table info (obsolete)","pl":"const LC_SYMSEG = 0x3","src":722,"more_decls":null}{"doc_comment":"thread","pl":"const LC_THREAD = 0x4","src":725,"more_decls":null}{"doc_comment":"unix thread (includes a stack)","pl":"const LC_UNIXTHREAD = 0x5","src":728,"more_decls":null}{"doc_comment":"load a specified fixed VM shared library","pl":"const LC_LOADFVMLIB = 0x6","src":731,"more_decls":null}{"doc_comment":"fixed VM shared library identification","pl":"const LC_IDFVMLIB = 0x7","src":734,"more_decls":null}{"doc_comment":"object identification info (obsolete)","pl":"const LC_IDENT = 0x8","src":737,"more_decls":null}{"doc_comment":"fixed VM file inclusion (internal use)","pl":"const LC_FVMFILE = 0x9","src":740,"more_decls":null}{"doc_comment":"prepage command (internal use)","pl":"const LC_PREPAGE = 0xa","src":743,"more_decls":null}{"doc_comment":"dynamic link-edit symbol table info","pl":"const LC_DYSYMTAB = 0xb","src":746,"more_decls":null}{"doc_comment":"load a dynamically linked shared library","pl":"const LC_LOAD_DYLIB = 0xc","src":749,"more_decls":null}{"doc_comment":"dynamically linked shared lib ident","pl":"const LC_ID_DYLIB = 0xd","src":752,"more_decls":null}{"doc_comment":"load a dynamic linker","pl":"const LC_LOAD_DYLINKER = 0xe","src":755,"more_decls":null}{"doc_comment":"dynamic linker identification","pl":"const LC_ID_DYLINKER = 0xf","src":758,"more_decls":null}{"doc_comment":"modules prebound for a dynamically","pl":"const LC_PREBOUND_DYLIB = 0x10","src":761,"more_decls":null}{"doc_comment":"image routines","pl":"const LC_ROUTINES = 0x11","src":764,"more_decls":null}{"doc_comment":"sub framework","pl":"const LC_SUB_FRAMEWORK = 0x12","src":767,"more_decls":null}{"doc_comment":"sub umbrella","pl":"const LC_SUB_UMBRELLA = 0x13","src":770,"more_decls":null}{"doc_comment":"sub client","pl":"const LC_SUB_CLIENT = 0x14","src":773,"more_decls":null}{"doc_comment":"sub library","pl":"const LC_SUB_LIBRARY = 0x15","src":776,"more_decls":null}{"doc_comment":"two-level namespace lookup hints","pl":"const LC_TWOLEVEL_HINTS = 0x16","src":779,"more_decls":null}{"doc_comment":"prebind checksum","pl":"const LC_PREBIND_CKSUM = 0x17","src":782,"more_decls":null}{"doc_comment":"load a dynamically linked shared library that is allowed to be missing\n(all symbols are weak imported).","pl":"const LC_LOAD_WEAK_DYLIB = (0x18 | LC_REQ_DYLD)","src":786,"more_decls":null}{"doc_comment":"64-bit segment of this file to be mapped","pl":"const LC_SEGMENT_64 = 0x19","src":789,"more_decls":null}{"doc_comment":"64-bit image routines","pl":"const LC_ROUTINES_64 = 0x1a","src":792,"more_decls":null}{"doc_comment":"the uuid","pl":"const LC_UUID = 0x1b","src":795,"more_decls":null}{"doc_comment":"runpath additions","pl":"const LC_RPATH = (0x1c | LC_REQ_DYLD)","src":798,"more_decls":null}{"doc_comment":"local of code signature","pl":"const LC_CODE_SIGNATURE = 0x1d","src":801,"more_decls":null}{"doc_comment":"local of info to split segments","pl":"const LC_SEGMENT_SPLIT_INFO = 0x1e","src":804,"more_decls":null}{"doc_comment":"load and re-export dylib","pl":"const LC_REEXPORT_DYLIB = (0x1f | LC_REQ_DYLD)","src":807,"more_decls":null}{"doc_comment":"delay load of dylib until first use","pl":"const LC_LAZY_LOAD_DYLIB = 0x20","src":810,"more_decls":null}{"doc_comment":"encrypted segment information","pl":"const LC_ENCRYPTION_INFO = 0x21","src":813,"more_decls":null}{"doc_comment":"compressed dyld information","pl":"const LC_DYLD_INFO = 0x22","src":816,"more_decls":null}{"doc_comment":"compressed dyld information only","pl":"const LC_DYLD_INFO_ONLY = (0x22 | LC_REQ_DYLD)","src":819,"more_decls":null}{"doc_comment":"load upward dylib","pl":"const LC_LOAD_UPWARD_DYLIB = (0x23 | LC_REQ_DYLD)","src":822,"more_decls":null}{"doc_comment":"build for MacOSX min OS version","pl":"const LC_VERSION_MIN_MACOSX = 0x24","src":825,"more_decls":null}{"doc_comment":"build for iPhoneOS min OS version","pl":"const LC_VERSION_MIN_IPHONEOS = 0x25","src":828,"more_decls":null}{"doc_comment":"compressed table of function start addresses","pl":"const LC_FUNCTION_STARTS = 0x26","src":831,"more_decls":null}{"doc_comment":"string for dyld to treat like environment variable","pl":"const LC_DYLD_ENVIRONMENT = 0x27","src":834,"more_decls":null}{"doc_comment":"replacement for LC_UNIXTHREAD","pl":"const LC_MAIN = (0x28 | LC_REQ_DYLD)","src":837,"more_decls":null}{"doc_comment":"table of non-instructions in __text","pl":"const LC_DATA_IN_CODE = 0x29","src":840,"more_decls":null}{"doc_comment":"source version used to build binary","pl":"const LC_SOURCE_VERSION = 0x2A","src":843,"more_decls":null}{"doc_comment":"Code signing DRs copied from linked dylibs","pl":"const LC_DYLIB_CODE_SIGN_DRS = 0x2B","src":846,"more_decls":null}{"doc_comment":"64-bit encrypted segment information","pl":"const LC_ENCRYPTION_INFO_64 = 0x2C","src":849,"more_decls":null}{"doc_comment":"linker options in MH_OBJECT files","pl":"const LC_LINKER_OPTION = 0x2D","src":852,"more_decls":null}{"doc_comment":"optimization hints in MH_OBJECT files","pl":"const LC_LINKER_OPTIMIZATION_HINT = 0x2E","src":855,"more_decls":null}{"doc_comment":"build for AppleTV min OS version","pl":"const LC_VERSION_MIN_TVOS = 0x2F","src":858,"more_decls":null}{"doc_comment":"build for Watch min OS version","pl":"const LC_VERSION_MIN_WATCHOS = 0x30","src":861,"more_decls":null}{"doc_comment":"arbitrary data included within a Mach-O file","pl":"const LC_NOTE = 0x31","src":864,"more_decls":null}{"doc_comment":"build for platform min OS version","pl":"const LC_BUILD_VERSION = 0x32","src":867,"more_decls":null}{"doc_comment":"the mach magic number","pl":"const MH_MAGIC = 0xfeedface","src":870,"more_decls":null}{"doc_comment":"NXSwapInt(MH_MAGIC)","pl":"const MH_CIGAM = 0xcefaedfe","src":873,"more_decls":null}{"doc_comment":"the 64-bit mach magic number","pl":"const MH_MAGIC_64 = 0xfeedfacf","src":876,"more_decls":null}{"doc_comment":"NXSwapInt(MH_MAGIC_64)","pl":"const MH_CIGAM_64 = 0xcffaedfe","src":879,"more_decls":null}{"doc_comment":"relocatable object file","pl":"const MH_OBJECT = 0x1","src":882,"more_decls":null}{"doc_comment":"demand paged executable file","pl":"const MH_EXECUTE = 0x2","src":885,"more_decls":null}{"doc_comment":"fixed VM shared library file","pl":"const MH_FVMLIB = 0x3","src":888,"more_decls":null}{"doc_comment":"core file","pl":"const MH_CORE = 0x4","src":891,"more_decls":null}{"doc_comment":"preloaded executable file","pl":"const MH_PRELOAD = 0x5","src":894,"more_decls":null}{"doc_comment":"dynamically bound shared library","pl":"const MH_DYLIB = 0x6","src":897,"more_decls":null}{"doc_comment":"dynamic link editor","pl":"const MH_DYLINKER = 0x7","src":900,"more_decls":null}{"doc_comment":"dynamically bound bundle file","pl":"const MH_BUNDLE = 0x8","src":903,"more_decls":null}{"doc_comment":"shared library stub for static linking only, no section contents","pl":"const MH_DYLIB_STUB = 0x9","src":906,"more_decls":null}{"doc_comment":"companion file with only debug sections","pl":"const MH_DSYM = 0xa","src":909,"more_decls":null}{"doc_comment":"x86_64 kexts","pl":"const MH_KEXT_BUNDLE = 0xb","src":912,"more_decls":null}{"doc_comment":"the object file has no undefined references","pl":"const MH_NOUNDEFS = 0x1","src":917,"more_decls":null}{"doc_comment":"the object file is the output of an incremental link against a base file and can't be link edited again","pl":"const MH_INCRLINK = 0x2","src":920,"more_decls":null}{"doc_comment":"the object file is input for the dynamic linker and can't be staticly link edited again","pl":"const MH_DYLDLINK = 0x4","src":923,"more_decls":null}{"doc_comment":"the object file's undefined references are bound by the dynamic linker when loaded.","pl":"const MH_BINDATLOAD = 0x8","src":926,"more_decls":null}{"doc_comment":"the file has its dynamic undefined references prebound.","pl":"const MH_PREBOUND = 0x10","src":929,"more_decls":null}{"doc_comment":"the file has its read-only and read-write segments split","pl":"const MH_SPLIT_SEGS = 0x20","src":932,"more_decls":null}{"doc_comment":"the shared library init routine is to be run lazily via catching memory faults to its writeable segments (obsolete)","pl":"const MH_LAZY_INIT = 0x40","src":935,"more_decls":null}{"doc_comment":"the image is using two-level name space bindings","pl":"const MH_TWOLEVEL = 0x80","src":938,"more_decls":null}{"doc_comment":"the executable is forcing all images to use flat name space bindings","pl":"const MH_FORCE_FLAT = 0x100","src":941,"more_decls":null}{"doc_comment":"this umbrella guarantees no multiple defintions of symbols in its sub-images so the two-level namespace hints can always be used.","pl":"const MH_NOMULTIDEFS = 0x200","src":944,"more_decls":null}{"doc_comment":"do not have dyld notify the prebinding agent about this executable","pl":"const MH_NOFIXPREBINDING = 0x400","src":947,"more_decls":null}{"doc_comment":"the binary is not prebound but can have its prebinding redone. only used when MH_PREBOUND is not set.","pl":"const MH_PREBINDABLE = 0x800","src":950,"more_decls":null}{"doc_comment":"indicates that this binary binds to all two-level namespace modules of its dependent libraries. only used when MH_PREBINDABLE and MH_TWOLEVEL are both set.","pl":"const MH_ALLMODSBOUND = 0x1000","src":953,"more_decls":null}{"doc_comment":"safe to divide up the sections into sub-sections via symbols for dead code stripping","pl":"const MH_SUBSECTIONS_VIA_SYMBOLS = 0x2000","src":956,"more_decls":null}{"doc_comment":"the binary has been canonicalized via the unprebind operation","pl":"const MH_CANONICAL = 0x4000","src":959,"more_decls":null}{"doc_comment":"the final linked image contains external weak symbols","pl":"const MH_WEAK_DEFINES = 0x8000","src":962,"more_decls":null}{"doc_comment":"the final linked image uses weak symbols","pl":"const MH_BINDS_TO_WEAK = 0x10000","src":965,"more_decls":null}{"doc_comment":"When this bit is set, all stacks in the task will be given stack execution privilege.  Only used in MH_EXECUTE filetypes.","pl":"const MH_ALLOW_STACK_EXECUTION = 0x20000","src":968,"more_decls":null}{"doc_comment":"When this bit is set, the binary declares it is safe for use in processes with uid zero","pl":"const MH_ROOT_SAFE = 0x40000","src":971,"more_decls":null}{"doc_comment":"When this bit is set, the binary declares it is safe for use in processes when issetugid() is true","pl":"const MH_SETUID_SAFE = 0x80000","src":974,"more_decls":null}{"doc_comment":"When this bit is set on a dylib, the static linker does not need to examine dependent dylibs to see if any are re-exported","pl":"const MH_NO_REEXPORTED_DYLIBS = 0x100000","src":977,"more_decls":null}{"doc_comment":"When this bit is set, the OS will load the main executable at a random address.  Only used in MH_EXECUTE filetypes.","pl":"const MH_PIE = 0x200000","src":980,"more_decls":null}{"doc_comment":"Only for use on dylibs.  When linking against a dylib that has this bit set, the static linker will automatically not create a LC_LOAD_DYLIB load command to the dylib if no symbols are being referenced from the dylib.","pl":"const MH_DEAD_STRIPPABLE_DYLIB = 0x400000","src":983,"more_decls":null}{"doc_comment":"Contains a section of type S_THREAD_LOCAL_VARIABLES","pl":"const MH_HAS_TLV_DESCRIPTORS = 0x800000","src":986,"more_decls":null}{"doc_comment":"When this bit is set, the OS will run the main executable with a non-executable heap even on platforms (e.g. i386) that don't require it. Only used in MH_EXECUTE filetypes.","pl":"const MH_NO_HEAP_EXECUTION = 0x1000000","src":989,"more_decls":null}{"doc_comment":"The code was linked for use in an application extension.","pl":"const MH_APP_EXTENSION_SAFE = 0x02000000","src":992,"more_decls":null}{"doc_comment":"The external symbols listed in the nlist symbol table do not include all the symbols listed in the dyld info.","pl":"const MH_NLIST_OUTOFSYNC_WITH_DYLDINFO = 0x04000000","src":995,"more_decls":null}{"doc_comment":"The flags field of a section structure is separated into two parts a section\ntype and section attributes.  The section types are mutually exclusive (it\ncan only have one type) but the section attributes are not (it may have more\nthan one attribute).\n256 section types","pl":"const SECTION_TYPE = 0x000000ff","src":1002,"more_decls":null}{"doc_comment":"24 section attributes","pl":"const SECTION_ATTRIBUTES = 0xffffff00","src":1005,"more_decls":null}{"doc_comment":"regular section","pl":"const S_REGULAR = 0x0","src":1008,"more_decls":null}{"doc_comment":"zero fill on demand section","pl":"const S_ZEROFILL = 0x1","src":1011,"more_decls":null}{"doc_comment":"section with only literal C string","pl":"const S_CSTRING_LITERALS = 0x2","src":1014,"more_decls":null}{"doc_comment":"section with only 4 byte literals","pl":"const S_4BYTE_LITERALS = 0x3","src":1017,"more_decls":null}{"doc_comment":"section with only 8 byte literals","pl":"const S_8BYTE_LITERALS = 0x4","src":1020,"more_decls":null}{"doc_comment":"section with only pointers to","pl":"const S_LITERAL_POINTERS = 0x5","src":1023,"more_decls":null}{"doc_comment":"if any of these bits set, a symbolic debugging entry","pl":"const N_STAB = 0xe0","src":1026,"more_decls":null}{"doc_comment":"private external symbol bit","pl":"const N_PEXT = 0x10","src":1029,"more_decls":null}{"doc_comment":"mask for the type bits","pl":"const N_TYPE = 0x0e","src":1032,"more_decls":null}{"doc_comment":"external symbol bit, set for external symbols","pl":"const N_EXT = 0x01","src":1035,"more_decls":null}{"doc_comment":"symbol is undefined","pl":"const N_UNDF = 0x0","src":1038,"more_decls":null}{"doc_comment":"symbol is absolute","pl":"const N_ABS = 0x2","src":1041,"more_decls":null}{"doc_comment":"symbol is defined in the section number given in n_sect","pl":"const N_SECT = 0xe","src":1044,"more_decls":null}{"doc_comment":"symbol is undefined  and the image is using a prebound\nvalue  for the symbol","pl":"const N_PBUD = 0xc","src":1048,"more_decls":null}{"doc_comment":"symbol is defined to be the same as another symbol; the n_value\nfield is an index into the string table specifying the name of the\nother symbol","pl":"const N_INDR = 0xa","src":1053,"more_decls":null}{"doc_comment":"global symbol: name,,NO_SECT,type,0","pl":"const N_GSYM = 0x20","src":1056,"more_decls":null}{"doc_comment":"procedure name (f77 kludge): name,,NO_SECT,0,0","pl":"const N_FNAME = 0x22","src":1059,"more_decls":null}{"doc_comment":"procedure: name,,n_sect,linenumber,address","pl":"const N_FUN = 0x24","src":1062,"more_decls":null}{"doc_comment":"static symbol: name,,n_sect,type,address","pl":"const N_STSYM = 0x26","src":1065,"more_decls":null}{"doc_comment":".lcomm symbol: name,,n_sect,type,address","pl":"const N_LCSYM = 0x28","src":1068,"more_decls":null}{"doc_comment":"begin nsect sym: 0,,n_sect,0,address","pl":"const N_BNSYM = 0x2e","src":1071,"more_decls":null}{"doc_comment":"AST file path: name,,NO_SECT,0,0","pl":"const N_AST = 0x32","src":1074,"more_decls":null}{"doc_comment":"emitted with gcc2_compiled and in gcc source","pl":"const N_OPT = 0x3c","src":1077,"more_decls":null}{"doc_comment":"register sym: name,,NO_SECT,type,register","pl":"const N_RSYM = 0x40","src":1080,"more_decls":null}{"doc_comment":"src line: 0,,n_sect,linenumber,address","pl":"const N_SLINE = 0x44","src":1083,"more_decls":null}{"doc_comment":"end nsect sym: 0,,n_sect,0,address","pl":"const N_ENSYM = 0x4e","src":1086,"more_decls":null}{"doc_comment":"structure elt: name,,NO_SECT,type,struct_offset","pl":"const N_SSYM = 0x60","src":1089,"more_decls":null}{"doc_comment":"source file name: name,,n_sect,0,address","pl":"const N_SO = 0x64","src":1092,"more_decls":null}{"doc_comment":"object file name: name,,0,0,st_mtime","pl":"const N_OSO = 0x66","src":1095,"more_decls":null}{"doc_comment":"local sym: name,,NO_SECT,type,offset","pl":"const N_LSYM = 0x80","src":1098,"more_decls":null}{"doc_comment":"include file beginning: name,,NO_SECT,0,sum","pl":"const N_BINCL = 0x82","src":1101,"more_decls":null}{"doc_comment":"#included file name: name,,n_sect,0,address","pl":"const N_SOL = 0x84","src":1104,"more_decls":null}{"doc_comment":"compiler parameters: name,,NO_SECT,0,0","pl":"const N_PARAMS = 0x86","src":1107,"more_decls":null}{"doc_comment":"compiler version: name,,NO_SECT,0,0","pl":"const N_VERSION = 0x88","src":1110,"more_decls":null}{"doc_comment":"compiler -O level: name,,NO_SECT,0,0","pl":"const N_OLEVEL = 0x8A","src":1113,"more_decls":null}{"doc_comment":"parameter: name,,NO_SECT,type,offset","pl":"const N_PSYM = 0xa0","src":1116,"more_decls":null}{"doc_comment":"include file end: name,,NO_SECT,0,0","pl":"const N_EINCL = 0xa2","src":1119,"more_decls":null}{"doc_comment":"alternate entry: name,,n_sect,linenumber,address","pl":"const N_ENTRY = 0xa4","src":1122,"more_decls":null}{"doc_comment":"left bracket: 0,,NO_SECT,nesting level,address","pl":"const N_LBRAC = 0xc0","src":1125,"more_decls":null}{"doc_comment":"deleted include file: name,,NO_SECT,0,sum","pl":"const N_EXCL = 0xc2","src":1128,"more_decls":null}{"doc_comment":"right bracket: 0,,NO_SECT,nesting level,address","pl":"const N_RBRAC = 0xe0","src":1131,"more_decls":null}{"doc_comment":"begin common: name,,NO_SECT,0,0","pl":"const N_BCOMM = 0xe2","src":1134,"more_decls":null}{"doc_comment":"end common: name,,n_sect,0,0","pl":"const N_ECOMM = 0xe4","src":1137,"more_decls":null}{"doc_comment":"end common (local name): 0,,n_sect,0,address","pl":"const N_ECOML = 0xe8","src":1140,"more_decls":null}{"doc_comment":"second stab entry with length information","pl":"const N_LENG = 0xfe","src":1143,"more_decls":null}{"doc_comment":"section with only non-lazy symbol pointers","pl":"const S_NON_LAZY_SYMBOL_POINTERS = 0x6","src":1157,"more_decls":null}{"doc_comment":"section with only lazy symbol pointers","pl":"const S_LAZY_SYMBOL_POINTERS = 0x7","src":1160,"more_decls":null}{"doc_comment":"section with only symbol stubs, byte size of stub in the reserved2 field","pl":"const S_SYMBOL_STUBS = 0x8","src":1163,"more_decls":null}{"doc_comment":"section with only function pointers for initialization","pl":"const S_MOD_INIT_FUNC_POINTERS = 0x9","src":1166,"more_decls":null}{"doc_comment":"section with only function pointers for termination","pl":"const S_MOD_TERM_FUNC_POINTERS = 0xa","src":1169,"more_decls":null}{"doc_comment":"section contains symbols that are to be coalesced","pl":"const S_COALESCED = 0xb","src":1172,"more_decls":null}{"doc_comment":"zero fill on demand section (that can be larger than 4 gigabytes)","pl":"const S_GB_ZEROFILL = 0xc","src":1175,"more_decls":null}{"doc_comment":"section with only pairs of function pointers for interposing","pl":"const S_INTERPOSING = 0xd","src":1178,"more_decls":null}{"doc_comment":"section with only 16 byte literals","pl":"const S_16BYTE_LITERALS = 0xe","src":1181,"more_decls":null}{"doc_comment":"section contains DTrace Object Format","pl":"const S_DTRACE_DOF = 0xf","src":1184,"more_decls":null}{"doc_comment":"section with only lazy symbol pointers to lazy loaded dylibs","pl":"const S_LAZY_DYLIB_SYMBOL_POINTERS = 0x10","src":1187,"more_decls":null}{"doc_comment":"a debug section","pl":"const S_ATTR_DEBUG = 0x02000000","src":1198,"more_decls":null}{"doc_comment":"section contains only true machine instructions","pl":"const S_ATTR_PURE_INSTRUCTIONS = 0x80000000","src":1201,"more_decls":null}{"doc_comment":"section contains coalesced symbols that are not to be in a ranlib\ntable of contents","pl":"const S_ATTR_NO_TOC = 0x40000000","src":1205,"more_decls":null}{"doc_comment":"ok to strip static symbols in this section in files with the\nMH_DYLDLINK flag","pl":"const S_ATTR_STRIP_STATIC_SYMS = 0x20000000","src":1209,"more_decls":null}{"doc_comment":"no dead stripping","pl":"const S_ATTR_NO_DEAD_STRIP = 0x10000000","src":1212,"more_decls":null}{"doc_comment":"blocks are live if they reference live blocks","pl":"const S_ATTR_LIVE_SUPPORT = 0x8000000","src":1215,"more_decls":null}{"doc_comment":"used with i386 code stubs written on by dyld","pl":"const S_ATTR_SELF_MODIFYING_CODE = 0x4000000","src":1218,"more_decls":null}{"doc_comment":"section contains some machine instructions","pl":"const S_ATTR_SOME_INSTRUCTIONS = 0x400","src":1221,"more_decls":null}{"doc_comment":"section has external relocation entries","pl":"const S_ATTR_EXT_RELOC = 0x200","src":1224,"more_decls":null}{"doc_comment":"section has local relocation entries","pl":"const S_ATTR_LOC_RELOC = 0x100","src":1227,"more_decls":null}{"doc_comment":"template of initial values for TLVs","pl":"const S_THREAD_LOCAL_REGULAR = 0x11","src":1230,"more_decls":null}{"doc_comment":"template of initial values for TLVs","pl":"const S_THREAD_LOCAL_ZEROFILL = 0x12","src":1233,"more_decls":null}{"doc_comment":"TLV descriptors","pl":"const S_THREAD_LOCAL_VARIABLES = 0x13","src":1236,"more_decls":null}{"doc_comment":"pointers to TLV descriptors","pl":"const S_THREAD_LOCAL_VARIABLE_POINTERS = 0x14","src":1239,"more_decls":null}{"doc_comment":"functions to call to initialize TLV values","pl":"const S_THREAD_LOCAL_INIT_FUNCTION_POINTERS = 0x15","src":1242,"more_decls":null}{"doc_comment":"32-bit offsets to initializers","pl":"const S_INIT_FUNC_OFFSETS = 0x16","src":1245,"more_decls":null}{"pl":"const cpu_type_t = integer_t","src":1247,"more_decls":null}{"pl":"const cpu_subtype_t = integer_t","src":1248,"more_decls":null}{"pl":"const integer_t = c_int","src":1249,"more_decls":null}{"pl":"const vm_prot_t = c_int","src":1250,"more_decls":null}{"doc_comment":"CPU type targeting 64-bit Intel-based Macs","pl":"const CPU_TYPE_X86_64: cpu_type_t = 0x01000007","src":1253,"more_decls":null}{"doc_comment":"CPU type targeting 64-bit ARM-based Macs","pl":"const CPU_TYPE_ARM64: cpu_type_t = 0x0100000C","src":1256,"more_decls":null}{"doc_comment":"All Intel-based Macs","pl":"const CPU_SUBTYPE_X86_64_ALL: cpu_subtype_t = 0x3","src":1259,"more_decls":null}{"doc_comment":"All ARM-based Macs","pl":"const CPU_SUBTYPE_ARM_ALL: cpu_subtype_t = 0x0","src":1262,"more_decls":null}{"doc_comment":"No VM protection","pl":"const VM_PROT_NONE: vm_prot_t = 0x0","src":1266,"more_decls":null}{"doc_comment":"VM read permission","pl":"const VM_PROT_READ: vm_prot_t = 0x1","src":1269,"more_decls":null}{"doc_comment":"VM write permission","pl":"const VM_PROT_WRITE: vm_prot_t = 0x2","src":1272,"more_decls":null}{"doc_comment":"VM execute permission","pl":"const VM_PROT_EXECUTE: vm_prot_t = 0x4","src":1275,"more_decls":null}{"pl":"const REBASE_TYPE_POINTER: u8 = 1","src":1278,"more_decls":null}{"pl":"const REBASE_TYPE_TEXT_ABSOLUTE32: u8 = 2","src":1279,"more_decls":null}{"pl":"const REBASE_TYPE_TEXT_PCREL32: u8 = 3","src":1280,"more_decls":null}{"pl":"const REBASE_OPCODE_MASK: u8 = 0xF0","src":1282,"more_decls":null}{"pl":"const REBASE_IMMEDIATE_MASK: u8 = 0x0F","src":1283,"more_decls":null}{"pl":"const REBASE_OPCODE_DONE: u8 = 0x00","src":1284,"more_decls":null}{"pl":"const REBASE_OPCODE_SET_TYPE_IMM: u8 = 0x10","src":1285,"more_decls":null}{"pl":"const REBASE_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB: u8 = 0x20","src":1286,"more_decls":null}{"pl":"const REBASE_OPCODE_ADD_ADDR_ULEB: u8 = 0x30","src":1287,"more_decls":null}{"pl":"const REBASE_OPCODE_ADD_ADDR_IMM_SCALED: u8 = 0x40","src":1288,"more_decls":null}{"pl":"const REBASE_OPCODE_DO_REBASE_IMM_TIMES: u8 = 0x50","src":1289,"more_decls":null}{"pl":"const REBASE_OPCODE_DO_REBASE_ULEB_TIMES: u8 = 0x60","src":1290,"more_decls":null}{"pl":"const REBASE_OPCODE_DO_REBASE_ADD_ADDR_ULEB: u8 = 0x70","src":1291,"more_decls":null}{"pl":"const REBASE_OPCODE_DO_REBASE_ULEB_TIMES_SKIPPING_ULEB: u8 = 0x80","src":1292,"more_decls":null}{"pl":"const BIND_TYPE_POINTER: u8 = 1","src":1295,"more_decls":null}{"pl":"const BIND_TYPE_TEXT_ABSOLUTE32: u8 = 2","src":1296,"more_decls":null}{"pl":"const BIND_TYPE_TEXT_PCREL32: u8 = 3","src":1297,"more_decls":null}{"pl":"const BIND_SPECIAL_DYLIB_SELF: i8 = 0","src":1299,"more_decls":null}{"pl":"const BIND_SPECIAL_DYLIB_MAIN_EXECUTABLE: i8 = -1","src":1300,"more_decls":null}{"pl":"const BIND_SPECIAL_DYLIB_FLAT_LOOKUP: i8 = -2","src":1301,"more_decls":null}{"pl":"const BIND_SYMBOL_FLAGS_WEAK_IMPORT: u8 = 0x1","src":1303,"more_decls":null}{"pl":"const BIND_SYMBOL_FLAGS_NON_WEAK_DEFINITION: u8 = 0x8","src":1304,"more_decls":null}{"pl":"const BIND_OPCODE_MASK: u8 = 0xf0","src":1306,"more_decls":null}{"pl":"const BIND_IMMEDIATE_MASK: u8 = 0x0f","src":1307,"more_decls":null}{"pl":"const BIND_OPCODE_DONE: u8 = 0x00","src":1308,"more_decls":null}{"pl":"const BIND_OPCODE_SET_DYLIB_ORDINAL_IMM: u8 = 0x10","src":1309,"more_decls":null}{"pl":"const BIND_OPCODE_SET_DYLIB_ORDINAL_ULEB: u8 = 0x20","src":1310,"more_decls":null}{"pl":"const BIND_OPCODE_SET_DYLIB_SPECIAL_IMM: u8 = 0x30","src":1311,"more_decls":null}{"pl":"const BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM: u8 = 0x40","src":1312,"more_decls":null}{"pl":"const BIND_OPCODE_SET_TYPE_IMM: u8 = 0x50","src":1313,"more_decls":null}{"pl":"const BIND_OPCODE_SET_ADDEND_SLEB: u8 = 0x60","src":1314,"more_decls":null}{"pl":"const BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB: u8 = 0x70","src":1315,"more_decls":null}{"pl":"const BIND_OPCODE_ADD_ADDR_ULEB: 0x80;\npub const BIND_OPCODE_DO_BIND: u8 = 0x90;\npub const BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB: u8 = 0xa0;\npub const BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED: u8 = 0xb0;\npub const BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB: u8 = xc0;\n\npub const reloc_type_x86_64 = packed enum(u4) {\n    /// for absolute addresses\n    X86_64_RELOC_UNSIGNED = 0,\n\n    /// for signed 32-bit displacement\n    X86_64_RELOC_SIGNED,\n\n    /// a CALL/JMP instruction with 32-bit displacement\n    X86_64_RELOC_BRANCH,\n\n    /// a MOVQ load of a GOT entry\n    X86_64_RELOC_GOT_LOAD,\n\n    /// other GOT references\n    X86_64_RELOC_GOT,\n\n    /// must be followed by a X86_64_RELOC_UNSIGNED\n    X86_64_RELOC_SUBTRACTOR,\n\n    /// for signed 32-bit displacement with a -1 addend\n    X86_64_RELOC_SIGNED_1,\n\n    /// for signed 32-bit displacement with a -2 addend\n    X86_64_RELOC_SIGNED_2,\n\n    /// for signed 32-bit displacement with a -4 addend\n    X86_64_RELOC_SIGNED_4,\n\n    /// for thread local variables\n    X86_64_RELOC_TLV,\n};\n\npub const reloc_type_arm64 = packed enum(u4) {\n    /// For pointers.\n    ARM64_RELOC_UNSIGNED = 0,\n\n    /// Must be followed by a ARM64_RELOC_UNSIGNED.\n    ARM64_RELOC_SUBTRACTOR,\n\n    /// A B/BL instruction with 26-bit displacement.\n    ARM64_RELOC_BRANCH26,\n\n    /// Pc-rel distance to page of target.\n    ARM64_RELOC_PAGE21,\n\n    /// Offset within page, scaled by r_length.\n    ARM64_RELOC_PAGEOFF12,\n\n    /// Pc-rel distance to page of GOT slot.\n    ARM64_RELOC_GOT_LOAD_PAGE21,\n\n    /// Offset within page of GOT slot, scaled by r_length.\n    ARM64_RELOC_GOT_LOAD_PAGEOFF12,\n\n    /// For pointers to GOT slots.\n    ARM64_RELOC_POINTER_TO_GOT,\n\n    /// Pc-rel distance to page of TLVP slot.\n    ARM64_RELOC_TLVP_LOAD_PAGE21,\n\n    /// Offset within page of TLVP slot, scaled by r_length.\n    ARM64_RELOC_TLVP_LOAD_PAGEOFF12,\n\n    /// Must be followed by PAGE21 or PAGEOFF12.\n    ARM64_RELOC_ADDEND,\n};\n\n/// This symbol is a reference to an external non-lazy (data) symbol.\npub const REFERENCE_FLAG_UNDEFINED_NON_LAZY: u16 = 0x0;\n\n/// This symbol is a reference to an external lazy symbol—that is, to a function call.\npub const REFERENCE_FLAG_UNDEFINED_LAZY: u16 = 0x1;\n\n/// This symbol is defined in this module.\npub const REFERENCE_FLAG_DEFINED: u16 = 0x2;\n\n/// This symbol is defined in this module and is visible only to modules within this shared library.\npub const REFERENCE_FLAG_PRIVATE_DEFINED: u16 = 3;\n\n/// This symbol is defined in another module in this file, is a non-lazy (data) symbol, and is visible\n/// only to modules within this shared library.\npub const REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY: u16 = 4;\n\n/// This symbol is defined in another module in this file, is a lazy (function) symbol, and is visible\n/// only to modules within this shared library.\npub const REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY: u16 = 5;\n\n/// Must be set for any defined symbol that is referenced by dynamic-loader APIs (such as dlsym and\n/// NSLookupSymbolInImage) and not ordinary undefined symbol references. The strip tool uses this bit\n/// to avoid removing symbols that must exist: If the symbol has this bit set, strip does not strip it.\npub const REFERENCED_DYNAMICALLY: u16 = 0x10;\n\n/// Used by the dynamic linker at runtime. Do not set this bit.\npub const N_DESC_DISCARDED: u16 = 0x20;\n\n/// Indicates that this symbol is a weak reference. If the dynamic linker cannot find a definition\n/// for this symbol, it sets the address of this symbol to 0. The static linker sets this symbol given\n/// the appropriate weak-linking flags.\npub const N_WEAK_REF: u16 = 0x40;\n\n/// Indicates that this symbol is a weak definition. If the static linker or the dynamic linker finds\n/// another (non-weak) definition for this symbol, the weak definition is ignored. Only symbols in a\n/// coalesced section (page 23) can be marked as a weak definition.\npub const N_WEAK_DEF: u16 = 0x80;\n\n/// The N_SYMBOL_RESOLVER bit of the n_desc field indicates that the\n/// that the function is actually a resolver function and should\n/// be called to get the address of the real function to use.\n/// This bit is only available in .o files (MH_OBJECT filetype)\npub const N_SYMBOL_RESOLVER: u16 = 0x100;\n\n// The following are used on the flags byte of a terminal node in the export information.\npub const EXPORT_SYMBOL_FLAGS_KIND_MASK: u8 = 0x03;\npub const EXPORT_SYMBOL_FLAGS_KIND_REGULAR: u8 = 0x00;\npub const EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL: u8 = 0x01;\npub const EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE: u8 = 0x02;\npub const EXPORT_SYMBOL_FLAGS_KIND_WEAK_DEFINITION: u8 = 0x04;\npub const EXPORT_SYMBOL_FLAGS_REEXPORT: u8 = 0x08;\npub const EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER: u8 = 0x10;\n\n// An indirect symbol table entry is simply a 32bit index into the symbol table\n// to the symbol that the pointer or stub is refering to.  Unless it is for a\n// non-lazy symbol pointer section for a defined symbol which strip(1) as\n// removed.  In which case it has the value INDIRECT_SYMBOL_LOCAL.  If the\n// symbol was also absolute INDIRECT_SYMBOL_ABS is or'ed with that.\npub const INDIRECT_SYMBOL_LOCAL: u32 = 0x80000000;\npub const INDIRECT_SYMBOL_ABS: u32 = 0x40000000;\n\n// Codesign consts and structs taken from:\n// https://opensource.apple.com/source/xnu/xnu-6153.81.5/osfmk/kern/cs_blobs.h.auto.html\n\n/// Single Requirement blob\npub const CSMAGIC_REQUIREMENT: u32 = 0xfade0c00;\n/// Requirements vector (internal requirements)\npub const CSMAGIC_REQUIREMENTS: u32 = 0xfade0c01;\n/// CodeDirectory blob\npub const CSMAGIC_CODEDIRECTORY: u32 = 0xfade0c02;\n/// embedded form of signature data\npub const CSMAGIC_EMBEDDED_SIGNATURE: u32 = 0xfade0cc0;\n/// XXX\npub const CSMAGIC_EMBEDDED_SIGNATURE_OLD: u32 = 0xfade0b02;\n/// Embedded entitlements\npub const CSMAGIC_EMBEDDED_ENTITLEMENTS: u32 = 0xfade7171;\n/// Multi-arch collection of embedded signatures\npub const CSMAGIC_DETACHED_SIGNATURE: u32 = 0xfade0cc1;\n/// CMS Signature, among other things\npub const CSMAGIC_BLOBWRAPPER: u32 = 0xfade0b01;\n\npub const CS_SUPPORTSSCATTER: u32 = 0x20100;\npub const CS_SUPPORTSTEAMID: u32 = 0x20200;\npub const CS_SUPPORTSCODELIMIT64: u32 = 0x20300;\npub const CS_SUPPORTSEXECSEG: u32 = 0x20400;\n\n/// Slot index for CodeDirectory\npub const CSSLOT_CODEDIRECTORY: u32 = 0;\npub const CSSLOT_INFOSLOT: u32 = 1;\npub const CSSLOT_REQUIREMENTS: u32 = 2;\npub const CSSLOT_RESOURCEDIR: u32 = 3;\npub const CSSLOT_APPLICATION: u32 = 4;\npub const CSSLOT_ENTITLEMENTS: u32 = 5;\n\n/// first alternate CodeDirectory, if any\npub const CSSLOT_ALTERNATE_CODEDIRECTORIES: u32 = 0x1000;\n/// Max number of alternate CD slots\npub const CSSLOT_ALTERNATE_CODEDIRECTORY_MAX: u32 = 5;\n/// One past the last\npub const CSSLOT_ALTERNATE_CODEDIRECTORY_LIMIT: u32 = CSSLOT_ALTERNATE_CODEDIRECTORIES + CSSLOT_ALTERNATE_CODEDIRECTORY_MAX;\n\n/// CMS Signature\npub const CSSLOT_SIGNATURESLOT: u32 = 0x10000;\npub const CSSLOT_IDENTIFICATIONSLOT: u32 = 0x10001;\npub const CSSLOT_TICKETSLOT: u32 = 0x10002;\n\n/// Compat with amfi\npub const CSTYPE_INDEX_REQUIREMENTS: u32 = 0x00000002;\n/// Compat with amfi\npub const CSTYPE_INDEX_ENTITLEMENTS: u32 = 0x00000005;\n\npub const CS_HASHTYPE_SHA1: u8 = 1;\npub const CS_HASHTYPE_SHA256: u8 = 2;\npub const CS_HASHTYPE_SHA256_TRUNCATED: u8 = 3;\npub const CS_HASHTYPE_SHA384: u8 = 4;\n\npub const CS_SHA1_LEN: u32 = 20;\npub const CS_SHA256_LEN: u32 = 32;\npub const CS_SHA256_TRUNCATED_LEN: u32 = 20;\n\n/// Always - larger hashes are truncated\npub const CS_CDHASH_LEN: u32 = 20;\n/// Max size of the hash we'll support\npub const CS_HASH_MAX_SIZE: u32 = 48;\n\npub const CS_SIGNER_TYPE_UNKNOWN: u32 = 0;\npub const CS_SIGNER_TYPE_LEGACYVPN: u32 = 5;\npub const CS_SIGNER_TYPE_MAC_APP_STORE: u32 = 6;\n\npub const CS_ADHOC: u32 = 0x2;\n\npub const CS_EXECSEG_MAIN_BINARY: u32 = 0x1;\n\n/// This CodeDirectory is tailored specfically at version 0x20400.\npub const CodeDirectory = extern struct {\n    /// Magic number (CSMAGIC_CODEDIRECTORY)\n    magic: u32,\n\n    /// Total length of CodeDirectory blob\n    length: u32,\n\n    /// Compatibility version\n    version: u32,\n\n    /// Setup and mode flags\n    flags: u32,\n\n    /// Offset of hash slot element at index zero\n    hashOffset: u32,\n\n    /// Offset of identifier string\n    identOffset: u32,\n\n    /// Number of special hash slots\n    nSpecialSlots: u32,\n\n    /// Number of ordinary (code) hash slots\n    nCodeSlots: u32,\n\n    /// Limit to main image signature range\n    codeLimit: u32,\n\n    /// Size of each hash in bytes\n    hashSize: u8,\n\n    /// Type of hash (cdHashType* constants)\n    hashType: u8,\n\n    /// Platform identifier; zero if not platform binary\n    platform: u8,\n\n    /// log2(page size in bytes); 0 => infinite\n    pageSize: u8,\n\n    /// Unused (must be zero)\n    spare2: u32,\n\n    ///\n    scatterOffset: u32,\n\n    ///\n    teamOffset: u32,\n\n    ///\n    spare3: u32,\n\n    ///\n    codeLimit64: u64,\n\n    /// Offset of executable segment\n    execSegBase: u64,\n\n    /// Limit of executable segment\n    execSegLimit: u64,\n\n    /// Executable segment flags\n    execSegFlags: u64,\n};\n\n/// Structure of an embedded-signature SuperBlob\npub const BlobIndex = extern struct {\n    /// Type of entry\n    @\"type\": u32,\n\n    /// Offset of entry\n    offset: u32,\n};\n\n/// This structure is followed by GenericBlobs in no particular\n/// order as indicated by offsets in index\npub const SuperBlob = extern struct {\n    /// Magic number\n    magic: u32,\n\n    /// Total length of SuperBlob\n    length: u32,\n\n    /// Number of index BlobIndex entries following this struct\n    count: u32,\n};\n\npub const GenericBlob = extern struct {\n    /// Magic number\n    magic: u32,\n\n    /// Total length of blob\n    length: u32,\n};\n\n/// The LC_DATA_IN_CODE load commands uses a linkedit_data_command\n/// to point to an array of data_in_code_entry entries. Each entry\n/// describes a range of data in a code section.\npub const data_in_code_entry = extern struct {\n    /// From mach_header to start of data range.\n    offset: u32,\n\n    /// Number of bytes in data range.\n    length: u16,\n\n    /// A DICE_KIND value.\n    kind: u16,\n};\n","src":1316,"more_decls":null}{"pl":"const BIND_OPCODE_DO_BIND: u8 = 0x90","src":1317,"more_decls":null}{"pl":"const BIND_OPCODE_DO_BIND_ADD_ADDR_ULEB: u8 = 0xa0","src":1318,"more_decls":null}{"pl":"const BIND_OPCODE_DO_BIND_ADD_ADDR_IMM_SCALED: u8 = 0xb0","src":1319,"more_decls":null}{"pl":"const BIND_OPCODE_DO_BIND_ULEB_TIMES_SKIPPING_ULEB: u8 = xc0","src":1320,"more_decls":null}{"doc_comment":"This symbol is a reference to an external non-lazy (data) symbol.","pl":"const REFERENCE_FLAG_UNDEFINED_NON_LAZY: u16 = 0x0","src":1390,"more_decls":null}{"doc_comment":"This symbol is a reference to an external lazy symbol—that is, to a function call.","pl":"const REFERENCE_FLAG_UNDEFINED_LAZY: u16 = 0x1","src":1393,"more_decls":null}{"doc_comment":"This symbol is defined in this module.","pl":"const REFERENCE_FLAG_DEFINED: u16 = 0x2","src":1396,"more_decls":null}{"doc_comment":"This symbol is defined in this module and is visible only to modules within this shared library.","pl":"const REFERENCE_FLAG_PRIVATE_DEFINED: u16 = 3","src":1399,"more_decls":null}{"doc_comment":"This symbol is defined in another module in this file, is a non-lazy (data) symbol, and is visible\nonly to modules within this shared library.","pl":"const REFERENCE_FLAG_PRIVATE_UNDEFINED_NON_LAZY: u16 = 4","src":1403,"more_decls":null}{"doc_comment":"This symbol is defined in another module in this file, is a lazy (function) symbol, and is visible\nonly to modules within this shared library.","pl":"const REFERENCE_FLAG_PRIVATE_UNDEFINED_LAZY: u16 = 5","src":1407,"more_decls":null}{"doc_comment":"Must be set for any defined symbol that is referenced by dynamic-loader APIs (such as dlsym and\nNSLookupSymbolInImage) and not ordinary undefined symbol references. The strip tool uses this bit\nto avoid removing symbols that must exist: If the symbol has this bit set, strip does not strip it.","pl":"const REFERENCED_DYNAMICALLY: u16 = 0x10","src":1412,"more_decls":null}{"doc_comment":"Used by the dynamic linker at runtime. Do not set this bit.","pl":"const N_DESC_DISCARDED: u16 = 0x20","src":1415,"more_decls":null}{"doc_comment":"Indicates that this symbol is a weak reference. If the dynamic linker cannot find a definition\nfor this symbol, it sets the address of this symbol to 0. The static linker sets this symbol given\nthe appropriate weak-linking flags.","pl":"const N_WEAK_REF: u16 = 0x40","src":1420,"more_decls":null}{"doc_comment":"Indicates that this symbol is a weak definition. If the static linker or the dynamic linker finds\nanother (non-weak) definition for this symbol, the weak definition is ignored. Only symbols in a\ncoalesced section (page 23) can be marked as a weak definition.","pl":"const N_WEAK_DEF: u16 = 0x80","src":1425,"more_decls":null}{"doc_comment":"The N_SYMBOL_RESOLVER bit of the n_desc field indicates that the\nthat the function is actually a resolver function and should\nbe called to get the address of the real function to use.\nThis bit is only available in .o files (MH_OBJECT filetype)","pl":"const N_SYMBOL_RESOLVER: u16 = 0x100","src":1431,"more_decls":null}{"pl":"const EXPORT_SYMBOL_FLAGS_KIND_MASK: u8 = 0x03","src":1434,"more_decls":null}{"pl":"const EXPORT_SYMBOL_FLAGS_KIND_REGULAR: u8 = 0x00","src":1435,"more_decls":null}{"pl":"const EXPORT_SYMBOL_FLAGS_KIND_THREAD_LOCAL: u8 = 0x01","src":1436,"more_decls":null}{"pl":"const EXPORT_SYMBOL_FLAGS_KIND_ABSOLUTE: u8 = 0x02","src":1437,"more_decls":null}{"pl":"const EXPORT_SYMBOL_FLAGS_KIND_WEAK_DEFINITION: u8 = 0x04","src":1438,"more_decls":null}{"pl":"const EXPORT_SYMBOL_FLAGS_REEXPORT: u8 = 0x08","src":1439,"more_decls":null}{"pl":"const EXPORT_SYMBOL_FLAGS_STUB_AND_RESOLVER: u8 = 0x10","src":1440,"more_decls":null}{"pl":"const INDIRECT_SYMBOL_LOCAL: u32 = 0x80000000","src":1447,"more_decls":null}{"pl":"const INDIRECT_SYMBOL_ABS: u32 = 0x40000000","src":1448,"more_decls":null}{"doc_comment":"Single Requirement blob","pl":"const CSMAGIC_REQUIREMENT: u32 = 0xfade0c00","src":1454,"more_decls":null}{"doc_comment":"Requirements vector (internal requirements)","pl":"const CSMAGIC_REQUIREMENTS: u32 = 0xfade0c01","src":1456,"more_decls":null}{"doc_comment":"CodeDirectory blob","pl":"const CSMAGIC_CODEDIRECTORY: u32 = 0xfade0c02","src":1458,"more_decls":null}{"doc_comment":"embedded form of signature data","pl":"const CSMAGIC_EMBEDDED_SIGNATURE: u32 = 0xfade0cc0","src":1460,"more_decls":null}{"doc_comment":"XXX","pl":"const CSMAGIC_EMBEDDED_SIGNATURE_OLD: u32 = 0xfade0b02","src":1462,"more_decls":null}{"doc_comment":"Embedded entitlements","pl":"const CSMAGIC_EMBEDDED_ENTITLEMENTS: u32 = 0xfade7171","src":1464,"more_decls":null}{"doc_comment":"Multi-arch collection of embedded signatures","pl":"const CSMAGIC_DETACHED_SIGNATURE: u32 = 0xfade0cc1","src":1466,"more_decls":null}{"doc_comment":"CMS Signature, among other things","pl":"const CSMAGIC_BLOBWRAPPER: u32 = 0xfade0b01","src":1468,"more_decls":null}{"pl":"const CS_SUPPORTSSCATTER: u32 = 0x20100","src":1470,"more_decls":null}{"pl":"const CS_SUPPORTSTEAMID: u32 = 0x20200","src":1471,"more_decls":null}{"pl":"const CS_SUPPORTSCODELIMIT64: u32 = 0x20300","src":1472,"more_decls":null}{"pl":"const CS_SUPPORTSEXECSEG: u32 = 0x20400","src":1473,"more_decls":null}{"doc_comment":"Slot index for CodeDirectory","pl":"const CSSLOT_CODEDIRECTORY: u32 = 0","src":1476,"more_decls":null}{"pl":"const CSSLOT_INFOSLOT: u32 = 1","src":1477,"more_decls":null}{"pl":"const CSSLOT_REQUIREMENTS: u32 = 2","src":1478,"more_decls":null}{"pl":"const CSSLOT_RESOURCEDIR: u32 = 3","src":1479,"more_decls":null}{"pl":"const CSSLOT_APPLICATION: u32 = 4","src":1480,"more_decls":null}{"pl":"const CSSLOT_ENTITLEMENTS: u32 = 5","src":1481,"more_decls":null}{"doc_comment":"first alternate CodeDirectory, if any","pl":"const CSSLOT_ALTERNATE_CODEDIRECTORIES: u32 = 0x1000","src":1484,"more_decls":null}{"doc_comment":"Max number of alternate CD slots","pl":"const CSSLOT_ALTERNATE_CODEDIRECTORY_MAX: u32 = 5","src":1486,"more_decls":null}{"doc_comment":"One past the last","pl":"const CSSLOT_ALTERNATE_CODEDIRECTORY_LIMIT: u32 = CSSLOT_ALTERNATE_CODEDIRECTORIES + CSSLOT_ALTERNATE_CODEDIRECTORY_MAX","src":1488,"more_decls":null}{"doc_comment":"CMS Signature","pl":"const CSSLOT_SIGNATURESLOT: u32 = 0x10000","src":1491,"more_decls":null}{"pl":"const CSSLOT_IDENTIFICATIONSLOT: u32 = 0x10001","src":1492,"more_decls":null}{"pl":"const CSSLOT_TICKETSLOT: u32 = 0x10002","src":1493,"more_decls":null}{"doc_comment":"Compat with amfi","pl":"const CSTYPE_INDEX_REQUIREMENTS: u32 = 0x00000002","src":1496,"more_decls":null}{"doc_comment":"Compat with amfi","pl":"const CSTYPE_INDEX_ENTITLEMENTS: u32 = 0x00000005","src":1498,"more_decls":null}{"pl":"const CS_HASHTYPE_SHA1: u8 = 1","src":1500,"more_decls":null}{"pl":"const CS_HASHTYPE_SHA256: u8 = 2","src":1501,"more_decls":null}{"pl":"const CS_HASHTYPE_SHA256_TRUNCATED: u8 = 3","src":1502,"more_decls":null}{"pl":"const CS_HASHTYPE_SHA384: u8 = 4","src":1503,"more_decls":null}{"pl":"const CS_SHA1_LEN: u32 = 20","src":1505,"more_decls":null}{"pl":"const CS_SHA256_LEN: u32 = 32","src":1506,"more_decls":null}{"pl":"const CS_SHA256_TRUNCATED_LEN: u32 = 20","src":1507,"more_decls":null}{"doc_comment":"Always - larger hashes are truncated","pl":"const CS_CDHASH_LEN: u32 = 20","src":1510,"more_decls":null}{"doc_comment":"Max size of the hash we'll support","pl":"const CS_HASH_MAX_SIZE: u32 = 48","src":1512,"more_decls":null}{"pl":"const CS_SIGNER_TYPE_UNKNOWN: u32 = 0","src":1514,"more_decls":null}{"pl":"const CS_SIGNER_TYPE_LEGACYVPN: u32 = 5","src":1515,"more_decls":null}{"pl":"const CS_SIGNER_TYPE_MAC_APP_STORE: u32 = 6","src":1516,"more_decls":null}{"pl":"const CS_ADHOC: u32 = 0x2","src":1518,"more_decls":null}{"pl":"const CS_EXECSEG_MAIN_BINARY: u32 = 0x1","src":1520,"more_decls":null}]