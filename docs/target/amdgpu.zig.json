[{"pl":"pub const Feature = enum ","src":9,"more_decls":{"pl":"@\"16_bit_insts\"","src":10,"more_decls":null}{"pl":"DumpCode","src":11,"more_decls":null}{"pl":"a16","src":12,"more_decls":null}{"pl":"add_no_carry_insts","src":13,"more_decls":null}{"pl":"aperture_regs","src":14,"more_decls":null}{"pl":"atomic_fadd_insts","src":15,"more_decls":null}{"pl":"auto_waitcnt_before_barrier","src":16,"more_decls":null}{"pl":"ci_insts","src":17,"more_decls":null}{"pl":"code_object_v3","src":18,"more_decls":null}{"pl":"cumode","src":19,"more_decls":null}{"pl":"dl_insts","src":20,"more_decls":null}{"pl":"dot1_insts","src":21,"more_decls":null}{"pl":"dot2_insts","src":22,"more_decls":null}{"pl":"dot3_insts","src":23,"more_decls":null}{"pl":"dot4_insts","src":24,"more_decls":null}{"pl":"dot5_insts","src":25,"more_decls":null}{"pl":"dot6_insts","src":26,"more_decls":null}{"pl":"dpp","src":27,"more_decls":null}{"pl":"dpp8","src":28,"more_decls":null}{"pl":"ds_src2_insts","src":29,"more_decls":null}{"pl":"dumpcode","src":30,"more_decls":null}{"pl":"enable_ds128","src":31,"more_decls":null}{"pl":"enable_prt_strict_null","src":32,"more_decls":null}{"pl":"fast_denormal_f32","src":33,"more_decls":null}{"pl":"fast_fmaf","src":34,"more_decls":null}{"pl":"flat_address_space","src":35,"more_decls":null}{"pl":"flat_for_global","src":36,"more_decls":null}{"pl":"flat_global_insts","src":37,"more_decls":null}{"pl":"flat_inst_offsets","src":38,"more_decls":null}{"pl":"flat_scratch_insts","src":39,"more_decls":null}{"pl":"flat_segment_offset_bug","src":40,"more_decls":null}{"pl":"fma_mix_insts","src":41,"more_decls":null}{"pl":"fmaf","src":42,"more_decls":null}{"pl":"fp64","src":43,"more_decls":null}{"pl":"g16","src":44,"more_decls":null}{"pl":"gcn3_encoding","src":45,"more_decls":null}{"pl":"get_wave_id_inst","src":46,"more_decls":null}{"pl":"gfx10","src":47,"more_decls":null}{"pl":"gfx10_3_insts","src":48,"more_decls":null}{"pl":"gfx10_insts","src":49,"more_decls":null}{"pl":"gfx10_b_encoding","src":50,"more_decls":null}{"pl":"gfx7_gfx8_gfx9_insts","src":51,"more_decls":null}{"pl":"gfx8_insts","src":52,"more_decls":null}{"pl":"gfx9","src":53,"more_decls":null}{"pl":"gfx9_insts","src":54,"more_decls":null}{"pl":"half_rate_64_ops","src":55,"more_decls":null}{"pl":"inst_fwd_prefetch_bug","src":56,"more_decls":null}{"pl":"int_clamp_insts","src":57,"more_decls":null}{"pl":"inv_2pi_inline_imm","src":58,"more_decls":null}{"pl":"lds_branch_vmem_war_hazard","src":59,"more_decls":null}{"pl":"lds_misaligned_bug","src":60,"more_decls":null}{"pl":"ldsbankcount16","src":61,"more_decls":null}{"pl":"ldsbankcount32","src":62,"more_decls":null}{"pl":"load_store_opt","src":63,"more_decls":null}{"pl":"localmemorysize0","src":64,"more_decls":null}{"pl":"localmemorysize32768","src":65,"more_decls":null}{"pl":"localmemorysize65536","src":66,"more_decls":null}{"pl":"mad_mac_f32_insts","src":67,"more_decls":null}{"pl":"mad_mix_insts","src":68,"more_decls":null}{"pl":"mai_insts","src":69,"more_decls":null}{"pl":"max_private_element_size_16","src":70,"more_decls":null}{"pl":"max_private_element_size_4","src":71,"more_decls":null}{"pl":"max_private_element_size_8","src":72,"more_decls":null}{"pl":"mfma_inline_literal_bug","src":73,"more_decls":null}{"pl":"mimg_r128","src":74,"more_decls":null}{"pl":"movrel","src":75,"more_decls":null}{"pl":"no_data_dep_hazard","src":76,"more_decls":null}{"pl":"no_sdst_cmpx","src":77,"more_decls":null}{"pl":"no_sram_ecc_support","src":78,"more_decls":null}{"pl":"no_xnack_support","src":79,"more_decls":null}{"pl":"nsa_encoding","src":80,"more_decls":null}{"pl":"nsa_to_vmem_bug","src":81,"more_decls":null}{"pl":"offset_3f_bug","src":82,"more_decls":null}{"pl":"pk_fmac_f16_inst","src":83,"more_decls":null}{"pl":"promote_alloca","src":84,"more_decls":null}{"pl":"r128_a16","src":85,"more_decls":null}{"pl":"register_banking","src":86,"more_decls":null}{"pl":"s_memrealtime","src":87,"more_decls":null}{"pl":"s_memtime_inst","src":88,"more_decls":null}{"pl":"scalar_atomics","src":89,"more_decls":null}{"pl":"scalar_flat_scratch_insts","src":90,"more_decls":null}{"pl":"scalar_stores","src":91,"more_decls":null}{"pl":"sdwa","src":92,"more_decls":null}{"pl":"sdwa_mav","src":93,"more_decls":null}{"pl":"sdwa_omod","src":94,"more_decls":null}{"pl":"sdwa_out_mods_vopc","src":95,"more_decls":null}{"pl":"sdwa_scalar","src":96,"more_decls":null}{"pl":"sdwa_sdst","src":97,"more_decls":null}{"pl":"sea_islands","src":98,"more_decls":null}{"pl":"sgpr_init_bug","src":99,"more_decls":null}{"pl":"si_scheduler","src":100,"more_decls":null}{"pl":"smem_to_vector_write_hazard","src":101,"more_decls":null}{"pl":"southern_islands","src":102,"more_decls":null}{"pl":"sram_ecc","src":103,"more_decls":null}{"pl":"trap_handler","src":104,"more_decls":null}{"pl":"trig_reduced_range","src":105,"more_decls":null}{"pl":"unaligned_buffer_access","src":106,"more_decls":null}{"pl":"unaligned_scratch_access","src":107,"more_decls":null}{"pl":"unpacked_d16_vmem","src":108,"more_decls":null}{"pl":"unsafe_ds_offset_folding","src":109,"more_decls":null}{"pl":"vcmpx_exec_war_hazard","src":110,"more_decls":null}{"pl":"vcmpx_permlane_hazard","src":111,"more_decls":null}{"pl":"vgpr_index_mode","src":112,"more_decls":null}{"pl":"vmem_to_scalar_write_hazard","src":113,"more_decls":null}{"pl":"volcanic_islands","src":114,"more_decls":null}{"pl":"vop3_literal","src":115,"more_decls":null}{"pl":"vop3p","src":116,"more_decls":null}{"pl":"vscnt","src":117,"more_decls":null}{"pl":"wavefrontsize16","src":118,"more_decls":null}{"pl":"wavefrontsize32","src":119,"more_decls":null}{"pl":"wavefrontsize64","src":120,"more_decls":null}{"pl":"xnack","src":121,"more_decls":null}}{"pl":"pub const cpu = struct ","src":827,"more_decls":{"pl":"const bonaire = CpuModel{\n        .name = \"bonaire\",\n        .llvm_name = \"bonaire\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .sea_islands,\n        }),\n    }","src":828,"more_decls":null}{"pl":"const carrizo = CpuModel{\n        .name = \"carrizo\",\n        .llvm_name = \"carrizo\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .fast_fmaf,\n            .half_rate_64_ops,\n            .ldsbankcount32,\n            .unpacked_d16_vmem,\n            .volcanic_islands,\n            .xnack,\n        }),\n    }","src":838,"more_decls":null}{"pl":"const fiji = CpuModel{\n        .name = \"fiji\",\n        .llvm_name = \"fiji\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .unpacked_d16_vmem,\n            .volcanic_islands,\n        }),\n    }","src":851,"more_decls":null}{"pl":"const generic = CpuModel{\n        .name = \"generic\",\n        .llvm_name = \"generic\",\n        .features = featureSet(&[_]Feature{\n            .wavefrontsize64,\n        }),\n    }","src":862,"more_decls":null}{"pl":"const generic_hsa = CpuModel{\n        .name = \"generic_hsa\",\n        .llvm_name = \"generic-hsa\",\n        .features = featureSet(&[_]Feature{\n            .flat_address_space,\n            .wavefrontsize64,\n        }),\n    }","src":869,"more_decls":null}{"pl":"const gfx1010 = CpuModel{\n        .name = \"gfx1010\",\n        .llvm_name = \"gfx1010\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .dl_insts,\n            .ds_src2_insts,\n            .flat_segment_offset_bug,\n            .get_wave_id_inst,\n            .gfx10,\n            .inst_fwd_prefetch_bug,\n            .lds_branch_vmem_war_hazard,\n            .lds_misaligned_bug,\n            .ldsbankcount32,\n            .mad_mac_f32_insts,\n            .no_xnack_support,\n            .nsa_encoding,\n            .nsa_to_vmem_bug,\n            .offset_3f_bug,\n            .s_memtime_inst,\n            .scalar_atomics,\n            .scalar_flat_scratch_insts,\n            .scalar_stores,\n            .smem_to_vector_write_hazard,\n            .vcmpx_exec_war_hazard,\n            .vcmpx_permlane_hazard,\n            .vmem_to_scalar_write_hazard,\n            .wavefrontsize32,\n        }),\n    }","src":877,"more_decls":null}{"pl":"const gfx1011 = CpuModel{\n        .name = \"gfx1011\",\n        .llvm_name = \"gfx1011\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .dl_insts,\n            .dot1_insts,\n            .dot2_insts,\n            .dot5_insts,\n            .dot6_insts,\n            .ds_src2_insts,\n            .flat_segment_offset_bug,\n            .get_wave_id_inst,\n            .gfx10,\n            .inst_fwd_prefetch_bug,\n            .lds_branch_vmem_war_hazard,\n            .ldsbankcount32,\n            .mad_mac_f32_insts,\n            .no_xnack_support,\n            .nsa_encoding,\n            .nsa_to_vmem_bug,\n            .offset_3f_bug,\n            .s_memtime_inst,\n            .scalar_atomics,\n            .scalar_flat_scratch_insts,\n            .scalar_stores,\n            .smem_to_vector_write_hazard,\n            .vcmpx_exec_war_hazard,\n            .vcmpx_permlane_hazard,\n            .vmem_to_scalar_write_hazard,\n            .wavefrontsize32,\n        }),\n    }","src":907,"more_decls":null}{"pl":"const gfx1012 = CpuModel{\n        .name = \"gfx1012\",\n        .llvm_name = \"gfx1012\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .dl_insts,\n            .dot1_insts,\n            .dot2_insts,\n            .dot5_insts,\n            .dot6_insts,\n            .ds_src2_insts,\n            .flat_segment_offset_bug,\n            .get_wave_id_inst,\n            .gfx10,\n            .inst_fwd_prefetch_bug,\n            .lds_branch_vmem_war_hazard,\n            .lds_misaligned_bug,\n            .ldsbankcount32,\n            .mad_mac_f32_insts,\n            .no_xnack_support,\n            .nsa_encoding,\n            .nsa_to_vmem_bug,\n            .offset_3f_bug,\n            .s_memtime_inst,\n            .scalar_atomics,\n            .scalar_flat_scratch_insts,\n            .scalar_stores,\n            .smem_to_vector_write_hazard,\n            .vcmpx_exec_war_hazard,\n            .vcmpx_permlane_hazard,\n            .vmem_to_scalar_write_hazard,\n            .wavefrontsize32,\n        }),\n    }","src":940,"more_decls":null}{"pl":"const gfx1030 = CpuModel{\n        .name = \"gfx1030\",\n        .llvm_name = \"gfx1030\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .dl_insts,\n            .dot1_insts,\n            .dot2_insts,\n            .dot5_insts,\n            .dot6_insts,\n            .gfx10,\n            .gfx10_3_insts,\n            .gfx10_b_encoding,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .nsa_encoding,\n            .wavefrontsize32,\n        }),\n    }","src":974,"more_decls":null}{"pl":"const gfx600 = CpuModel{\n        .name = \"gfx600\",\n        .llvm_name = \"gfx600\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .fast_fmaf,\n            .half_rate_64_ops,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .southern_islands,\n        }),\n    }","src":993,"more_decls":null}{"pl":"const gfx601 = CpuModel{\n        .name = \"gfx601\",\n        .llvm_name = \"gfx601\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .southern_islands,\n        }),\n    }","src":1005,"more_decls":null}{"pl":"const gfx700 = CpuModel{\n        .name = \"gfx700\",\n        .llvm_name = \"gfx700\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .sea_islands,\n        }),\n    }","src":1015,"more_decls":null}{"pl":"const gfx701 = CpuModel{\n        .name = \"gfx701\",\n        .llvm_name = \"gfx701\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .fast_fmaf,\n            .half_rate_64_ops,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .sea_islands,\n        }),\n    }","src":1025,"more_decls":null}{"pl":"const gfx702 = CpuModel{\n        .name = \"gfx702\",\n        .llvm_name = \"gfx702\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .fast_fmaf,\n            .ldsbankcount16,\n            .no_xnack_support,\n            .sea_islands,\n        }),\n    }","src":1037,"more_decls":null}{"pl":"const gfx703 = CpuModel{\n        .name = \"gfx703\",\n        .llvm_name = \"gfx703\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount16,\n            .no_xnack_support,\n            .sea_islands,\n        }),\n    }","src":1048,"more_decls":null}{"pl":"const gfx704 = CpuModel{\n        .name = \"gfx704\",\n        .llvm_name = \"gfx704\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .sea_islands,\n        }),\n    }","src":1058,"more_decls":null}{"pl":"const gfx801 = CpuModel{\n        .name = \"gfx801\",\n        .llvm_name = \"gfx801\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .fast_fmaf,\n            .half_rate_64_ops,\n            .ldsbankcount32,\n            .unpacked_d16_vmem,\n            .volcanic_islands,\n            .xnack,\n        }),\n    }","src":1068,"more_decls":null}{"pl":"const gfx802 = CpuModel{\n        .name = \"gfx802\",\n        .llvm_name = \"gfx802\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .sgpr_init_bug,\n            .unpacked_d16_vmem,\n            .volcanic_islands,\n        }),\n    }","src":1081,"more_decls":null}{"pl":"const gfx803 = CpuModel{\n        .name = \"gfx803\",\n        .llvm_name = \"gfx803\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .unpacked_d16_vmem,\n            .volcanic_islands,\n        }),\n    }","src":1093,"more_decls":null}{"pl":"const gfx810 = CpuModel{\n        .name = \"gfx810\",\n        .llvm_name = \"gfx810\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount16,\n            .volcanic_islands,\n            .xnack,\n        }),\n    }","src":1104,"more_decls":null}{"pl":"const gfx900 = CpuModel{\n        .name = \"gfx900\",\n        .llvm_name = \"gfx900\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .gfx9,\n            .ldsbankcount32,\n            .mad_mix_insts,\n            .no_sram_ecc_support,\n            .no_xnack_support,\n        }),\n    }","src":1114,"more_decls":null}{"pl":"const gfx902 = CpuModel{\n        .name = \"gfx902\",\n        .llvm_name = \"gfx902\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .gfx9,\n            .ldsbankcount32,\n            .mad_mix_insts,\n            .no_sram_ecc_support,\n            .xnack,\n        }),\n    }","src":1126,"more_decls":null}{"pl":"const gfx904 = CpuModel{\n        .name = \"gfx904\",\n        .llvm_name = \"gfx904\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .fma_mix_insts,\n            .gfx9,\n            .ldsbankcount32,\n            .no_sram_ecc_support,\n            .no_xnack_support,\n        }),\n    }","src":1138,"more_decls":null}{"pl":"const gfx906 = CpuModel{\n        .name = \"gfx906\",\n        .llvm_name = \"gfx906\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .dl_insts,\n            .dot1_insts,\n            .dot2_insts,\n            .fma_mix_insts,\n            .gfx9,\n            .half_rate_64_ops,\n            .ldsbankcount32,\n            .no_xnack_support,\n        }),\n    }","src":1150,"more_decls":null}{"pl":"const gfx908 = CpuModel{\n        .name = \"gfx908\",\n        .llvm_name = \"gfx908\",\n        .features = featureSet(&[_]Feature{\n            .atomic_fadd_insts,\n            .code_object_v3,\n            .dl_insts,\n            .dot1_insts,\n            .dot2_insts,\n            .dot3_insts,\n            .dot4_insts,\n            .dot5_insts,\n            .dot6_insts,\n            .fma_mix_insts,\n            .gfx9,\n            .half_rate_64_ops,\n            .ldsbankcount32,\n            .mai_insts,\n            .mfma_inline_literal_bug,\n            .pk_fmac_f16_inst,\n            .sram_ecc,\n        }),\n    }","src":1165,"more_decls":null}{"pl":"const gfx909 = CpuModel{\n        .name = \"gfx909\",\n        .llvm_name = \"gfx909\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .gfx9,\n            .ldsbankcount32,\n            .mad_mix_insts,\n            .xnack,\n        }),\n    }","src":1188,"more_decls":null}{"pl":"const hainan = CpuModel{\n        .name = \"hainan\",\n        .llvm_name = \"hainan\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .southern_islands,\n        }),\n    }","src":1199,"more_decls":null}{"pl":"const hawaii = CpuModel{\n        .name = \"hawaii\",\n        .llvm_name = \"hawaii\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .fast_fmaf,\n            .half_rate_64_ops,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .sea_islands,\n        }),\n    }","src":1209,"more_decls":null}{"pl":"const iceland = CpuModel{\n        .name = \"iceland\",\n        .llvm_name = \"iceland\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .sgpr_init_bug,\n            .unpacked_d16_vmem,\n            .volcanic_islands,\n        }),\n    }","src":1221,"more_decls":null}{"pl":"const kabini = CpuModel{\n        .name = \"kabini\",\n        .llvm_name = \"kabini\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount16,\n            .no_xnack_support,\n            .sea_islands,\n        }),\n    }","src":1233,"more_decls":null}{"pl":"const kaveri = CpuModel{\n        .name = \"kaveri\",\n        .llvm_name = \"kaveri\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .sea_islands,\n        }),\n    }","src":1243,"more_decls":null}{"pl":"const mullins = CpuModel{\n        .name = \"mullins\",\n        .llvm_name = \"mullins\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount16,\n            .no_xnack_support,\n            .sea_islands,\n        }),\n    }","src":1253,"more_decls":null}{"pl":"const oland = CpuModel{\n        .name = \"oland\",\n        .llvm_name = \"oland\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .southern_islands,\n        }),\n    }","src":1263,"more_decls":null}{"pl":"const pitcairn = CpuModel{\n        .name = \"pitcairn\",\n        .llvm_name = \"pitcairn\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .southern_islands,\n        }),\n    }","src":1273,"more_decls":null}{"pl":"const polaris10 = CpuModel{\n        .name = \"polaris10\",\n        .llvm_name = \"polaris10\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .unpacked_d16_vmem,\n            .volcanic_islands,\n        }),\n    }","src":1283,"more_decls":null}{"pl":"const polaris11 = CpuModel{\n        .name = \"polaris11\",\n        .llvm_name = \"polaris11\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .unpacked_d16_vmem,\n            .volcanic_islands,\n        }),\n    }","src":1294,"more_decls":null}{"pl":"const stoney = CpuModel{\n        .name = \"stoney\",\n        .llvm_name = \"stoney\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount16,\n            .volcanic_islands,\n            .xnack,\n        }),\n    }","src":1305,"more_decls":null}{"pl":"const tahiti = CpuModel{\n        .name = \"tahiti\",\n        .llvm_name = \"tahiti\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .fast_fmaf,\n            .half_rate_64_ops,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .southern_islands,\n        }),\n    }","src":1315,"more_decls":null}{"pl":"const tonga = CpuModel{\n        .name = \"tonga\",\n        .llvm_name = \"tonga\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .sgpr_init_bug,\n            .unpacked_d16_vmem,\n            .volcanic_islands,\n        }),\n    }","src":1327,"more_decls":null}{"pl":"const verde = CpuModel{\n        .name = \"verde\",\n        .llvm_name = \"verde\",\n        .features = featureSet(&[_]Feature{\n            .code_object_v3,\n            .ldsbankcount32,\n            .no_xnack_support,\n            .southern_islands,\n        }),\n    }","src":1339,"more_decls":null}}{"pl":"const all_features = blk: {\n    const len = @typeInfo(Feature).Enum.fields.len;\n    std.debug.assert(len <= CpuFeature.Set.needed_bit_count);\n    var result: [len]CpuFeature = undefined;\n    result[@enumToInt(Feature.@\"16_bit_insts\")] = .{\n        .llvm_name = \"16-bit-insts\",\n        .description = \"Has i16/f16 instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.DumpCode)] = .{\n        .llvm_name = \"DumpCode\",\n        .description = \"Dump MachineInstrs in the CodeEmitter\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.a16)] = .{\n        .llvm_name = \"a16\",\n        .description = \"Support gfx10-style A16 for 16-bit coordinates/gradients/lod/clamp/mip image operands\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.add_no_carry_insts)] = .{\n        .llvm_name = \"add-no-carry-insts\",\n        .description = \"Have VALU add/sub instructions without carry out\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.aperture_regs)] = .{\n        .llvm_name = \"aperture-regs\",\n        .description = \"Has Memory Aperture Base and Size Registers\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.atomic_fadd_insts)] = .{\n        .llvm_name = \"atomic-fadd-insts\",\n        .description = \"Has buffer_atomic_add_f32, buffer_atomic_pk_add_f16, global_atomic_add_f32, global_atomic_pk_add_f16 instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .flat_global_insts,\n        }),\n    };\n    result[@enumToInt(Feature.auto_waitcnt_before_barrier)] = .{\n        .llvm_name = \"auto-waitcnt-before-barrier\",\n        .description = \"Hardware automatically inserts waitcnt before barrier\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.ci_insts)] = .{\n        .llvm_name = \"ci-insts\",\n        .description = \"Additional instructions for CI+\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.code_object_v3)] = .{\n        .llvm_name = \"code-object-v3\",\n        .description = \"Generate code object version 3\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.cumode)] = .{\n        .llvm_name = \"cumode\",\n        .description = \"Enable CU wavefront execution mode\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.dl_insts)] = .{\n        .llvm_name = \"dl-insts\",\n        .description = \"Has v_fmac_f32 and v_xnor_b32 instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.dot1_insts)] = .{\n        .llvm_name = \"dot1-insts\",\n        .description = \"Has v_dot4_i32_i8 and v_dot8_i32_i4 instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.dot2_insts)] = .{\n        .llvm_name = \"dot2-insts\",\n        .description = \"Has v_dot2_f32_f16, v_dot2_i32_i16, v_dot2_u32_u16, v_dot4_u32_u8, v_dot8_u32_u4 instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.dot3_insts)] = .{\n        .llvm_name = \"dot3-insts\",\n        .description = \"Has v_dot8c_i32_i4 instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.dot4_insts)] = .{\n        .llvm_name = \"dot4-insts\",\n        .description = \"Has v_dot2c_i32_i16 instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.dot5_insts)] = .{\n        .llvm_name = \"dot5-insts\",\n        .description = \"Has v_dot2c_f32_f16 instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.dot6_insts)] = .{\n        .llvm_name = \"dot6-insts\",\n        .description = \"Has v_dot4c_i32_i8 instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.dpp)] = .{\n        .llvm_name = \"dpp\",\n        .description = \"Support DPP (Data Parallel Primitives) extension\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.dpp8)] = .{\n        .llvm_name = \"dpp8\",\n        .description = \"Support DPP8 (Data Parallel Primitives) extension\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.ds_src2_insts)] = .{\n        .llvm_name = \"ds-src2-insts\",\n        .description = \"Has ds_*_src2 instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.dumpcode)] = .{\n        .llvm_name = \"dumpcode\",\n        .description = \"Dump MachineInstrs in the CodeEmitter\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.enable_ds128)] = .{\n        .llvm_name = \"enable-ds128\",\n        .description = \"Use ds_read|write_b128\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.enable_prt_strict_null)] = .{\n        .llvm_name = \"enable-prt-strict-null\",\n        .description = \"Enable zeroing of result registers for sparse texture fetches\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fast_denormal_f32)] = .{\n        .llvm_name = \"fast-denormal-f32\",\n        .description = \"Enabling denormals does not cause f32 instructions to run at f64 rates\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fast_fmaf)] = .{\n        .llvm_name = \"fast-fmaf\",\n        .description = \"Assuming f32 fma is at least as fast as mul + add\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.flat_address_space)] = .{\n        .llvm_name = \"flat-address-space\",\n        .description = \"Support flat address space\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.flat_for_global)] = .{\n        .llvm_name = \"flat-for-global\",\n        .description = \"Force to generate flat instruction for global\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.flat_global_insts)] = .{\n        .llvm_name = \"flat-global-insts\",\n        .description = \"Have global_* flat memory instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.flat_inst_offsets)] = .{\n        .llvm_name = \"flat-inst-offsets\",\n        .description = \"Flat instructions have immediate offset addressing mode\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.flat_scratch_insts)] = .{\n        .llvm_name = \"flat-scratch-insts\",\n        .description = \"Have scratch_* flat memory instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.flat_segment_offset_bug)] = .{\n        .llvm_name = \"flat-segment-offset-bug\",\n        .description = \"GFX10 bug, inst_offset ignored in flat segment\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fma_mix_insts)] = .{\n        .llvm_name = \"fma-mix-insts\",\n        .description = \"Has v_fma_mix_f32, v_fma_mixlo_f16, v_fma_mixhi_f16 instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fmaf)] = .{\n        .llvm_name = \"fmaf\",\n        .description = \"Enable single precision FMA (not as fast as mul+add, but fused)\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fp64)] = .{\n        .llvm_name = \"fp64\",\n        .description = \"Enable double precision operations\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.g16)] = .{\n        .llvm_name = \"g16\",\n        .description = \"Support G16 for 16-bit gradient image operands\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.gcn3_encoding)] = .{\n        .llvm_name = \"gcn3-encoding\",\n        .description = \"Encoding format for VI\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.get_wave_id_inst)] = .{\n        .llvm_name = \"get-wave-id-inst\",\n        .description = \"Has s_get_waveid_in_workgroup instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.gfx10)] = .{\n        .llvm_name = \"gfx10\",\n        .description = \"GFX10 GPU generation\",\n        .dependencies = featureSet(&[_]Feature{\n            .@\"16_bit_insts\",\n            .a16,\n            .add_no_carry_insts,\n            .aperture_regs,\n            .ci_insts,\n            .dpp,\n            .dpp8,\n            .fast_denormal_f32,\n            .fast_fmaf,\n            .flat_address_space,\n            .flat_global_insts,\n            .flat_inst_offsets,\n            .flat_scratch_insts,\n            .fma_mix_insts,\n            .fp64,\n            .g16,\n            .gfx10_insts,\n            .gfx8_insts,\n            .gfx9_insts,\n            .int_clamp_insts,\n            .inv_2pi_inline_imm,\n            .localmemorysize65536,\n            .mimg_r128,\n            .movrel,\n            .no_data_dep_hazard,\n            .no_sdst_cmpx,\n            .no_sram_ecc_support,\n            .pk_fmac_f16_inst,\n            .register_banking,\n            .s_memrealtime,\n            .sdwa,\n            .sdwa_omod,\n            .sdwa_scalar,\n            .sdwa_sdst,\n            .vop3_literal,\n            .vop3p,\n            .vscnt,\n        }),\n    };\n    result[@enumToInt(Feature.gfx10_3_insts)] = .{\n        .llvm_name = \"gfx10-3-insts\",\n        .description = \"Additional instructions for GFX10.3\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.gfx10_insts)] = .{\n        .llvm_name = \"gfx10-insts\",\n        .description = \"Additional instructions for GFX10+\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.gfx10_b_encoding)] = .{\n        .llvm_name = \"gfx10_b-encoding\",\n        .description = \"Encoding format GFX10_B\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.gfx7_gfx8_gfx9_insts)] = .{\n        .llvm_name = \"gfx7-gfx8-gfx9-insts\",\n        .description = \"Instructions shared in GFX7, GFX8, GFX9\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.gfx8_insts)] = .{\n        .llvm_name = \"gfx8-insts\",\n        .description = \"Additional instructions for GFX8+\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.gfx9)] = .{\n        .llvm_name = \"gfx9\",\n        .description = \"GFX9 GPU generation\",\n        .dependencies = featureSet(&[_]Feature{\n            .@\"16_bit_insts\",\n            .add_no_carry_insts,\n            .aperture_regs,\n            .ci_insts,\n            .dpp,\n            .ds_src2_insts,\n            .fast_denormal_f32,\n            .fast_fmaf,\n            .flat_address_space,\n            .flat_global_insts,\n            .flat_inst_offsets,\n            .flat_scratch_insts,\n            .fp64,\n            .gcn3_encoding,\n            .gfx7_gfx8_gfx9_insts,\n            .gfx8_insts,\n            .gfx9_insts,\n            .int_clamp_insts,\n            .inv_2pi_inline_imm,\n            .localmemorysize65536,\n            .mad_mac_f32_insts,\n            .r128_a16,\n            .s_memrealtime,\n            .s_memtime_inst,\n            .scalar_atomics,\n            .scalar_flat_scratch_insts,\n            .scalar_stores,\n            .sdwa,\n            .sdwa_omod,\n            .sdwa_scalar,\n            .sdwa_sdst,\n            .vgpr_index_mode,\n            .vop3p,\n            .wavefrontsize64,\n        }),\n    };\n    result[@enumToInt(Feature.gfx9_insts)] = .{\n        .llvm_name = \"gfx9-insts\",\n        .description = \"Additional instructions for GFX9+\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.half_rate_64_ops)] = .{\n        .llvm_name = \"half-rate-64-ops\",\n        .description = \"Most fp64 instructions are half rate instead of quarter\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.inst_fwd_prefetch_bug)] = .{\n        .llvm_name = \"inst-fwd-prefetch-bug\",\n        .description = \"S_INST_PREFETCH instruction causes shader to hang\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.int_clamp_insts)] = .{\n        .llvm_name = \"int-clamp-insts\",\n        .description = \"Support clamp for integer destination\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.inv_2pi_inline_imm)] = .{\n        .llvm_name = \"inv-2pi-inline-imm\",\n        .description = \"Has 1 / (2 * pi) as inline immediate\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.lds_branch_vmem_war_hazard)] = .{\n        .llvm_name = \"lds-branch-vmem-war-hazard\",\n        .description = \"Switching between LDS and VMEM-tex not waiting VM_VSRC=0\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.lds_misaligned_bug)] = .{\n        .llvm_name = \"lds-misaligned-bug\",\n        .description = \"Some GFX10 bug with misaligned multi-dword LDS access in WGP mode\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.ldsbankcount16)] = .{\n        .llvm_name = \"ldsbankcount16\",\n        .description = \"The number of LDS banks per compute unit.\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.ldsbankcount32)] = .{\n        .llvm_name = \"ldsbankcount32\",\n        .description = \"The number of LDS banks per compute unit.\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.load_store_opt)] = .{\n        .llvm_name = \"load-store-opt\",\n        .description = \"Enable SI load/store optimizer pass\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.localmemorysize0)] = .{\n        .llvm_name = \"localmemorysize0\",\n        .description = \"The size of local memory in bytes\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.localmemorysize32768)] = .{\n        .llvm_name = \"localmemorysize32768\",\n        .description = \"The size of local memory in bytes\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.localmemorysize65536)] = .{\n        .llvm_name = \"localmemorysize65536\",\n        .description = \"The size of local memory in bytes\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mad_mac_f32_insts)] = .{\n        .llvm_name = \"mad-mac-f32-insts\",\n        .description = \"Has v_mad_f32/v_mac_f32/v_madak_f32/v_madmk_f32 instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mad_mix_insts)] = .{\n        .llvm_name = \"mad-mix-insts\",\n        .description = \"Has v_mad_mix_f32, v_mad_mixlo_f16, v_mad_mixhi_f16 instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mai_insts)] = .{\n        .llvm_name = \"mai-insts\",\n        .description = \"Has mAI instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.max_private_element_size_16)] = .{\n        .llvm_name = \"max-private-element-size-16\",\n        .description = \"Maximum private access size may be 16\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.max_private_element_size_4)] = .{\n        .llvm_name = \"max-private-element-size-4\",\n        .description = \"Maximum private access size may be 4\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.max_private_element_size_8)] = .{\n        .llvm_name = \"max-private-element-size-8\",\n        .description = \"Maximum private access size may be 8\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mfma_inline_literal_bug)] = .{\n        .llvm_name = \"mfma-inline-literal-bug\",\n        .description = \"MFMA cannot use inline literal as SrcC\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mimg_r128)] = .{\n        .llvm_name = \"mimg-r128\",\n        .description = \"Support 128-bit texture resources\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.movrel)] = .{\n        .llvm_name = \"movrel\",\n        .description = \"Has v_movrel*_b32 instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.no_data_dep_hazard)] = .{\n        .llvm_name = \"no-data-dep-hazard\",\n        .description = \"Does not need SW waitstates\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.no_sdst_cmpx)] = .{\n        .llvm_name = \"no-sdst-cmpx\",\n        .description = \"V_CMPX does not write VCC/SGPR in addition to EXEC\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.no_sram_ecc_support)] = .{\n        .llvm_name = \"no-sram-ecc-support\",\n        .description = \"Hardware does not support SRAM ECC\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.no_xnack_support)] = .{\n        .llvm_name = \"no-xnack-support\",\n        .description = \"Hardware does not support XNACK\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.nsa_encoding)] = .{\n        .llvm_name = \"nsa-encoding\",\n        .description = \"Support NSA encoding for image instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.nsa_to_vmem_bug)] = .{\n        .llvm_name = \"nsa-to-vmem-bug\",\n        .description = \"MIMG-NSA followed by VMEM fail if EXEC_LO or EXEC_HI equals zero\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.offset_3f_bug)] = .{\n        .llvm_name = \"offset-3f-bug\",\n        .description = \"Branch offset of 3f hardware bug\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.pk_fmac_f16_inst)] = .{\n        .llvm_name = \"pk-fmac-f16-inst\",\n        .description = \"Has v_pk_fmac_f16 instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.promote_alloca)] = .{\n        .llvm_name = \"promote-alloca\",\n        .description = \"Enable promote alloca pass\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.r128_a16)] = .{\n        .llvm_name = \"r128-a16\",\n        .description = \"Support gfx9-style A16 for 16-bit coordinates/gradients/lod/clamp/mip image operands, where a16 is aliased with r128\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.register_banking)] = .{\n        .llvm_name = \"register-banking\",\n        .description = \"Has register banking\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.s_memrealtime)] = .{\n        .llvm_name = \"s-memrealtime\",\n        .description = \"Has s_memrealtime instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.s_memtime_inst)] = .{\n        .llvm_name = \"s-memtime-inst\",\n        .description = \"Has s_memtime instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.scalar_atomics)] = .{\n        .llvm_name = \"scalar-atomics\",\n        .description = \"Has atomic scalar memory instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.scalar_flat_scratch_insts)] = .{\n        .llvm_name = \"scalar-flat-scratch-insts\",\n        .description = \"Have s_scratch_* flat memory instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.scalar_stores)] = .{\n        .llvm_name = \"scalar-stores\",\n        .description = \"Has store scalar memory instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.sdwa)] = .{\n        .llvm_name = \"sdwa\",\n        .description = \"Support SDWA (Sub-DWORD Addressing) extension\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.sdwa_mav)] = .{\n        .llvm_name = \"sdwa-mav\",\n        .description = \"Support v_mac_f32/f16 with SDWA (Sub-DWORD Addressing) extension\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.sdwa_omod)] = .{\n        .llvm_name = \"sdwa-omod\",\n        .description = \"Support OMod with SDWA (Sub-DWORD Addressing) extension\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.sdwa_out_mods_vopc)] = .{\n        .llvm_name = \"sdwa-out-mods-vopc\",\n        .description = \"Support clamp for VOPC with SDWA (Sub-DWORD Addressing) extension\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.sdwa_scalar)] = .{\n        .llvm_name = \"sdwa-scalar\",\n        .description = \"Support scalar register with SDWA (Sub-DWORD Addressing) extension\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.sdwa_sdst)] = .{\n        .llvm_name = \"sdwa-sdst\",\n        .description = \"Support scalar dst for VOPC with SDWA (Sub-DWORD Addressing) extension\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.sea_islands)] = .{\n        .llvm_name = \"sea-islands\",\n        .description = \"SEA_ISLANDS GPU generation\",\n        .dependencies = featureSet(&[_]Feature{\n            .ci_insts,\n            .ds_src2_insts,\n            .flat_address_space,\n            .fp64,\n            .gfx7_gfx8_gfx9_insts,\n            .localmemorysize65536,\n            .mad_mac_f32_insts,\n            .mimg_r128,\n            .movrel,\n            .no_sram_ecc_support,\n            .s_memtime_inst,\n            .trig_reduced_range,\n            .wavefrontsize64,\n        }),\n    };\n    result[@enumToInt(Feature.sgpr_init_bug)] = .{\n        .llvm_name = \"sgpr-init-bug\",\n        .description = \"VI SGPR initialization bug requiring a fixed SGPR allocation size\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.si_scheduler)] = .{\n        .llvm_name = \"si-scheduler\",\n        .description = \"Enable SI Machine Scheduler\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.smem_to_vector_write_hazard)] = .{\n        .llvm_name = \"smem-to-vector-write-hazard\",\n        .description = \"s_load_dword followed by v_cmp page faults\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.southern_islands)] = .{\n        .llvm_name = \"southern-islands\",\n        .description = \"SOUTHERN_ISLANDS GPU generation\",\n        .dependencies = featureSet(&[_]Feature{\n            .ds_src2_insts,\n            .fp64,\n            .ldsbankcount32,\n            .localmemorysize32768,\n            .mad_mac_f32_insts,\n            .mimg_r128,\n            .movrel,\n            .no_sram_ecc_support,\n            .no_xnack_support,\n            .s_memtime_inst,\n            .trig_reduced_range,\n            .wavefrontsize64,\n        }),\n    };\n    result[@enumToInt(Feature.sram_ecc)] = .{\n        .llvm_name = \"sram-ecc\",\n        .description = \"Enable SRAM ECC\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.trap_handler)] = .{\n        .llvm_name = \"trap-handler\",\n        .description = \"Trap handler support\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.trig_reduced_range)] = .{\n        .llvm_name = \"trig-reduced-range\",\n        .description = \"Requires use of fract on arguments to trig instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.unaligned_buffer_access)] = .{\n        .llvm_name = \"unaligned-buffer-access\",\n        .description = \"Support unaligned global loads and stores\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.unaligned_scratch_access)] = .{\n        .llvm_name = \"unaligned-scratch-access\",\n        .description = \"Support unaligned scratch loads and stores\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.unpacked_d16_vmem)] = .{\n        .llvm_name = \"unpacked-d16-vmem\",\n        .description = \"Has unpacked d16 vmem instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.unsafe_ds_offset_folding)] = .{\n        .llvm_name = \"unsafe-ds-offset-folding\",\n        .description = \"Force using DS instruction immediate offsets on SI\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.vcmpx_exec_war_hazard)] = .{\n        .llvm_name = \"vcmpx-exec-war-hazard\",\n        .description = \"V_CMPX WAR hazard on EXEC (V_CMPX issue ONLY)\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.vcmpx_permlane_hazard)] = .{\n        .llvm_name = \"vcmpx-permlane-hazard\",\n        .description = \"TODO: describe me\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.vgpr_index_mode)] = .{\n        .llvm_name = \"vgpr-index-mode\",\n        .description = \"Has VGPR mode register indexing\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.vmem_to_scalar_write_hazard)] = .{\n        .llvm_name = \"vmem-to-scalar-write-hazard\",\n        .description = \"VMEM instruction followed by scalar writing to EXEC mask, M0 or SGPR leads to incorrect execution.\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.volcanic_islands)] = .{\n        .llvm_name = \"volcanic-islands\",\n        .description = \"VOLCANIC_ISLANDS GPU generation\",\n        .dependencies = featureSet(&[_]Feature{\n            .@\"16_bit_insts\",\n            .ci_insts,\n            .dpp,\n            .ds_src2_insts,\n            .fast_denormal_f32,\n            .flat_address_space,\n            .fp64,\n            .gcn3_encoding,\n            .gfx7_gfx8_gfx9_insts,\n            .gfx8_insts,\n            .int_clamp_insts,\n            .inv_2pi_inline_imm,\n            .localmemorysize65536,\n            .mad_mac_f32_insts,\n            .mimg_r128,\n            .movrel,\n            .no_sram_ecc_support,\n            .s_memrealtime,\n            .s_memtime_inst,\n            .scalar_stores,\n            .sdwa,\n            .sdwa_mav,\n            .sdwa_out_mods_vopc,\n            .trig_reduced_range,\n            .vgpr_index_mode,\n            .wavefrontsize64,\n        }),\n    };\n    result[@enumToInt(Feature.vop3_literal)] = .{\n        .llvm_name = \"vop3-literal\",\n        .description = \"Can use one literal in VOP3\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.vop3p)] = .{\n        .llvm_name = \"vop3p\",\n        .description = \"Has VOP3P packed instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.vscnt)] = .{\n        .llvm_name = \"vscnt\",\n        .description = \"Has separate store vscnt counter\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.wavefrontsize16)] = .{\n        .llvm_name = \"wavefrontsize16\",\n        .description = \"The number of threads per wavefront\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.wavefrontsize32)] = .{\n        .llvm_name = \"wavefrontsize32\",\n        .description = \"The number of threads per wavefront\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.wavefrontsize64)] = .{\n        .llvm_name = \"wavefrontsize64\",\n        .description = \"The number of threads per wavefront\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.xnack)] = .{\n        .llvm_name = \"xnack\",\n        .description = \"Enable XNACK support\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    const ti = @typeInfo(Feature);\n    for (result) |*elem, i| {\n        elem.index = i;\n        elem.name = ti.Enum.fields[i].name;\n    }\n    break :blk result;\n}","src":126,"more_decls":null}]