[{"pl":"pub const Feature = enum ","src":9,"more_decls":{"pl":"@\"64bit\"","src":10,"more_decls":null}{"pl":"@\"64bitregs\"","src":11,"more_decls":null}{"pl":"allow_unaligned_fp_access","src":12,"more_decls":null}{"pl":"altivec","src":13,"more_decls":null}{"pl":"booke","src":14,"more_decls":null}{"pl":"bpermd","src":15,"more_decls":null}{"pl":"cmpb","src":16,"more_decls":null}{"pl":"crbits","src":17,"more_decls":null}{"pl":"crypto","src":18,"more_decls":null}{"pl":"direct_move","src":19,"more_decls":null}{"pl":"e500","src":20,"more_decls":null}{"pl":"extdiv","src":21,"more_decls":null}{"pl":"fcpsgn","src":22,"more_decls":null}{"pl":"float128","src":23,"more_decls":null}{"pl":"fpcvt","src":24,"more_decls":null}{"pl":"fprnd","src":25,"more_decls":null}{"pl":"fpu","src":26,"more_decls":null}{"pl":"fre","src":27,"more_decls":null}{"pl":"fres","src":28,"more_decls":null}{"pl":"frsqrte","src":29,"more_decls":null}{"pl":"frsqrtes","src":30,"more_decls":null}{"pl":"fsqrt","src":31,"more_decls":null}{"pl":"fuse_addi_load","src":32,"more_decls":null}{"pl":"fuse_addis_load","src":33,"more_decls":null}{"pl":"fusion","src":34,"more_decls":null}{"pl":"hard_float","src":35,"more_decls":null}{"pl":"htm","src":36,"more_decls":null}{"pl":"icbt","src":37,"more_decls":null}{"pl":"invariant_function_descriptors","src":38,"more_decls":null}{"pl":"isa_v30_instructions","src":39,"more_decls":null}{"pl":"isa_v31_instructions","src":40,"more_decls":null}{"pl":"isel","src":41,"more_decls":null}{"pl":"ldbrx","src":42,"more_decls":null}{"pl":"lfiwax","src":43,"more_decls":null}{"pl":"longcall","src":44,"more_decls":null}{"pl":"mfocrf","src":45,"more_decls":null}{"pl":"msync","src":46,"more_decls":null}{"pl":"partword_atomics","src":47,"more_decls":null}{"pl":"pcrelative_memops","src":48,"more_decls":null}{"pl":"popcntd","src":49,"more_decls":null}{"pl":"power10_vector","src":50,"more_decls":null}{"pl":"power8_altivec","src":51,"more_decls":null}{"pl":"power8_vector","src":52,"more_decls":null}{"pl":"power9_altivec","src":53,"more_decls":null}{"pl":"power9_vector","src":54,"more_decls":null}{"pl":"ppc_postra_sched","src":55,"more_decls":null}{"pl":"ppc_prera_sched","src":56,"more_decls":null}{"pl":"ppc4xx","src":57,"more_decls":null}{"pl":"ppc6xx","src":58,"more_decls":null}{"pl":"predictable_select_expensive","src":59,"more_decls":null}{"pl":"prefix_instrs","src":60,"more_decls":null}{"pl":"qpx","src":61,"more_decls":null}{"pl":"recipprec","src":62,"more_decls":null}{"pl":"secure_plt","src":63,"more_decls":null}{"pl":"slow_popcntd","src":64,"more_decls":null}{"pl":"spe","src":65,"more_decls":null}{"pl":"stfiwx","src":66,"more_decls":null}{"pl":"two_const_nr","src":67,"more_decls":null}{"pl":"vectors_use_two_units","src":68,"more_decls":null}{"pl":"vsx","src":69,"more_decls":null}}{"pl":"pub const cpu = struct ","src":453,"more_decls":{"pl":"const @\"ppc440\" = CpuModel{\n        .name = \"ppc440\",\n        .llvm_name = \"440\",\n        .features = featureSet(&[_]Feature{\n            .booke,\n            .fres,\n            .frsqrte,\n            .icbt,\n            .isel,\n            .msync,\n        }),\n    }","src":454,"more_decls":null}{"pl":"const @\"ppc450\" = CpuModel{\n        .name = \"ppc450\",\n        .llvm_name = \"450\",\n        .features = featureSet(&[_]Feature{\n            .booke,\n            .fres,\n            .frsqrte,\n            .icbt,\n            .isel,\n            .msync,\n        }),\n    }","src":466,"more_decls":null}{"pl":"const @\"ppc601\" = CpuModel{\n        .name = \"ppc601\",\n        .llvm_name = \"601\",\n        .features = featureSet(&[_]Feature{\n            .fpu,\n        }),\n    }","src":478,"more_decls":null}{"pl":"const @\"ppc602\" = CpuModel{\n        .name = \"ppc602\",\n        .llvm_name = \"602\",\n        .features = featureSet(&[_]Feature{\n            .fpu,\n        }),\n    }","src":485,"more_decls":null}{"pl":"const @\"ppc603\" = CpuModel{\n        .name = \"ppc603\",\n        .llvm_name = \"603\",\n        .features = featureSet(&[_]Feature{\n            .fres,\n            .frsqrte,\n        }),\n    }","src":492,"more_decls":null}{"pl":"const @\"ppc603e\" = CpuModel{\n        .name = \"ppc603e\",\n        .llvm_name = \"603e\",\n        .features = featureSet(&[_]Feature{\n            .fres,\n            .frsqrte,\n        }),\n    }","src":500,"more_decls":null}{"pl":"const @\"ppc603ev\" = CpuModel{\n        .name = \"ppc603ev\",\n        .llvm_name = \"603ev\",\n        .features = featureSet(&[_]Feature{\n            .fres,\n            .frsqrte,\n        }),\n    }","src":508,"more_decls":null}{"pl":"const @\"ppc604\" = CpuModel{\n        .name = \"ppc604\",\n        .llvm_name = \"604\",\n        .features = featureSet(&[_]Feature{\n            .fres,\n            .frsqrte,\n        }),\n    }","src":516,"more_decls":null}{"pl":"const @\"ppc604e\" = CpuModel{\n        .name = \"ppc604e\",\n        .llvm_name = \"604e\",\n        .features = featureSet(&[_]Feature{\n            .fres,\n            .frsqrte,\n        }),\n    }","src":524,"more_decls":null}{"pl":"const @\"ppc620\" = CpuModel{\n        .name = \"ppc620\",\n        .llvm_name = \"620\",\n        .features = featureSet(&[_]Feature{\n            .fres,\n            .frsqrte,\n        }),\n    }","src":532,"more_decls":null}{"pl":"const @\"ppc7400\" = CpuModel{\n        .name = \"ppc7400\",\n        .llvm_name = \"7400\",\n        .features = featureSet(&[_]Feature{\n            .altivec,\n            .fres,\n            .frsqrte,\n        }),\n    }","src":540,"more_decls":null}{"pl":"const @\"ppc7450\" = CpuModel{\n        .name = \"ppc7450\",\n        .llvm_name = \"7450\",\n        .features = featureSet(&[_]Feature{\n            .altivec,\n            .fres,\n            .frsqrte,\n        }),\n    }","src":549,"more_decls":null}{"pl":"const @\"ppc750\" = CpuModel{\n        .name = \"ppc750\",\n        .llvm_name = \"750\",\n        .features = featureSet(&[_]Feature{\n            .fres,\n            .frsqrte,\n        }),\n    }","src":558,"more_decls":null}{"pl":"const @\"ppc970\" = CpuModel{\n        .name = \"ppc970\",\n        .llvm_name = \"970\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .altivec,\n            .fres,\n            .frsqrte,\n            .fsqrt,\n            .mfocrf,\n            .stfiwx,\n        }),\n    }","src":566,"more_decls":null}{"pl":"const a2 = CpuModel{\n        .name = \"a2\",\n        .llvm_name = \"a2\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .booke,\n            .cmpb,\n            .fcpsgn,\n            .fpcvt,\n            .fprnd,\n            .fre,\n            .fres,\n            .frsqrte,\n            .frsqrtes,\n            .fsqrt,\n            .icbt,\n            .isel,\n            .ldbrx,\n            .lfiwax,\n            .mfocrf,\n            .recipprec,\n            .slow_popcntd,\n            .stfiwx,\n        }),\n    }","src":579,"more_decls":null}{"pl":"const a2q = CpuModel{\n        .name = \"a2q\",\n        .llvm_name = \"a2q\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .booke,\n            .cmpb,\n            .fcpsgn,\n            .fpcvt,\n            .fprnd,\n            .fre,\n            .fres,\n            .frsqrte,\n            .frsqrtes,\n            .fsqrt,\n            .icbt,\n            .isel,\n            .ldbrx,\n            .lfiwax,\n            .mfocrf,\n            .qpx,\n            .recipprec,\n            .slow_popcntd,\n            .stfiwx,\n        }),\n    }","src":604,"more_decls":null}{"pl":"const e500 = CpuModel{\n        .name = \"e500\",\n        .llvm_name = \"e500\",\n        .features = featureSet(&[_]Feature{\n            .booke,\n            .icbt,\n            .isel,\n            .msync,\n            .spe,\n        }),\n    }","src":630,"more_decls":null}{"pl":"const e500mc = CpuModel{\n        .name = \"e500mc\",\n        .llvm_name = \"e500mc\",\n        .features = featureSet(&[_]Feature{\n            .booke,\n            .icbt,\n            .isel,\n            .stfiwx,\n        }),\n    }","src":641,"more_decls":null}{"pl":"const e5500 = CpuModel{\n        .name = \"e5500\",\n        .llvm_name = \"e5500\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .booke,\n            .icbt,\n            .isel,\n            .mfocrf,\n            .stfiwx,\n        }),\n    }","src":651,"more_decls":null}{"pl":"const future = CpuModel{\n        .name = \"future\",\n        .llvm_name = \"future\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .allow_unaligned_fp_access,\n            .altivec,\n            .bpermd,\n            .cmpb,\n            .crypto,\n            .direct_move,\n            .extdiv,\n            .fcpsgn,\n            .fpcvt,\n            .fprnd,\n            .fre,\n            .fres,\n            .frsqrte,\n            .frsqrtes,\n            .fsqrt,\n            .htm,\n            .icbt,\n            .isa_v30_instructions,\n            .isa_v31_instructions,\n            .isel,\n            .ldbrx,\n            .lfiwax,\n            .mfocrf,\n            .partword_atomics,\n            .pcrelative_memops,\n            .popcntd,\n            .power10_vector,\n            .power8_altivec,\n            .power8_vector,\n            .power9_altivec,\n            .power9_vector,\n            .predictable_select_expensive,\n            .prefix_instrs,\n            .recipprec,\n            .stfiwx,\n            .two_const_nr,\n            .vsx,\n        }),\n    }","src":663,"more_decls":null}{"pl":"const g3 = CpuModel{\n        .name = \"g3\",\n        .llvm_name = \"g3\",\n        .features = featureSet(&[_]Feature{\n            .fres,\n            .frsqrte,\n        }),\n    }","src":707,"more_decls":null}{"pl":"const g4 = CpuModel{\n        .name = \"g4\",\n        .llvm_name = \"g4\",\n        .features = featureSet(&[_]Feature{\n            .altivec,\n            .fres,\n            .frsqrte,\n        }),\n    }","src":715,"more_decls":null}{"pl":"const @\"g4+\" = CpuModel{\n        .name = \"g4+\",\n        .llvm_name = \"g4+\",\n        .features = featureSet(&[_]Feature{\n            .altivec,\n            .fres,\n            .frsqrte,\n        }),\n    }","src":724,"more_decls":null}{"pl":"const g5 = CpuModel{\n        .name = \"g5\",\n        .llvm_name = \"g5\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .altivec,\n            .fres,\n            .frsqrte,\n            .fsqrt,\n            .mfocrf,\n            .stfiwx,\n        }),\n    }","src":733,"more_decls":null}{"pl":"const generic = CpuModel{\n        .name = \"generic\",\n        .llvm_name = \"generic\",\n        .features = featureSet(&[_]Feature{\n            .hard_float,\n        }),\n    }","src":746,"more_decls":null}{"pl":"const ppc = CpuModel{\n        .name = \"ppc\",\n        .llvm_name = \"ppc\",\n        .features = featureSet(&[_]Feature{\n            .hard_float,\n        }),\n    }","src":753,"more_decls":null}{"pl":"const ppc32 = CpuModel{\n        .name = \"ppc32\",\n        .llvm_name = \"ppc\",\n        .features = featureSet(&[_]Feature{\n            .hard_float,\n        }),\n    }","src":760,"more_decls":null}{"pl":"const ppc64 = CpuModel{\n        .name = \"ppc64\",\n        .llvm_name = \"ppc64\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .altivec,\n            .fres,\n            .frsqrte,\n            .fsqrt,\n            .mfocrf,\n            .stfiwx,\n        }),\n    }","src":767,"more_decls":null}{"pl":"const ppc64le = CpuModel{\n        .name = \"ppc64le\",\n        .llvm_name = \"ppc64le\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .allow_unaligned_fp_access,\n            .altivec,\n            .bpermd,\n            .cmpb,\n            .crypto,\n            .direct_move,\n            .extdiv,\n            .fcpsgn,\n            .fpcvt,\n            .fprnd,\n            .fre,\n            .fres,\n            .frsqrte,\n            .frsqrtes,\n            .fsqrt,\n            .fuse_addi_load,\n            .fuse_addis_load,\n            .htm,\n            .icbt,\n            .isel,\n            .ldbrx,\n            .lfiwax,\n            .mfocrf,\n            .partword_atomics,\n            .popcntd,\n            .power8_altivec,\n            .power8_vector,\n            .predictable_select_expensive,\n            .recipprec,\n            .stfiwx,\n            .two_const_nr,\n            .vsx,\n        }),\n    }","src":780,"more_decls":null}{"pl":"const pwr10 = CpuModel{\n        .name = \"pwr10\",\n        .llvm_name = \"pwr10\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .allow_unaligned_fp_access,\n            .altivec,\n            .bpermd,\n            .cmpb,\n            .crypto,\n            .direct_move,\n            .extdiv,\n            .fcpsgn,\n            .fpcvt,\n            .fprnd,\n            .fre,\n            .fres,\n            .frsqrte,\n            .frsqrtes,\n            .fsqrt,\n            .htm,\n            .icbt,\n            .isa_v30_instructions,\n            .isa_v31_instructions,\n            .isel,\n            .ldbrx,\n            .lfiwax,\n            .mfocrf,\n            .partword_atomics,\n            .pcrelative_memops,\n            .popcntd,\n            .power10_vector,\n            .power8_altivec,\n            .power8_vector,\n            .power9_altivec,\n            .power9_vector,\n            .predictable_select_expensive,\n            .prefix_instrs,\n            .recipprec,\n            .stfiwx,\n            .two_const_nr,\n            .vsx,\n        }),\n    }","src":819,"more_decls":null}{"pl":"const pwr3 = CpuModel{\n        .name = \"pwr3\",\n        .llvm_name = \"pwr3\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .altivec,\n            .fres,\n            .frsqrte,\n            .mfocrf,\n            .stfiwx,\n        }),\n    }","src":863,"more_decls":null}{"pl":"const pwr4 = CpuModel{\n        .name = \"pwr4\",\n        .llvm_name = \"pwr4\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .altivec,\n            .fres,\n            .frsqrte,\n            .fsqrt,\n            .mfocrf,\n            .stfiwx,\n        }),\n    }","src":875,"more_decls":null}{"pl":"const pwr5 = CpuModel{\n        .name = \"pwr5\",\n        .llvm_name = \"pwr5\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .altivec,\n            .fre,\n            .fres,\n            .frsqrte,\n            .frsqrtes,\n            .fsqrt,\n            .mfocrf,\n            .stfiwx,\n        }),\n    }","src":888,"more_decls":null}{"pl":"const pwr5x = CpuModel{\n        .name = \"pwr5x\",\n        .llvm_name = \"pwr5x\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .altivec,\n            .fprnd,\n            .fre,\n            .fres,\n            .frsqrte,\n            .frsqrtes,\n            .fsqrt,\n            .mfocrf,\n            .stfiwx,\n        }),\n    }","src":903,"more_decls":null}{"pl":"const pwr6 = CpuModel{\n        .name = \"pwr6\",\n        .llvm_name = \"pwr6\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .altivec,\n            .cmpb,\n            .fcpsgn,\n            .fprnd,\n            .fre,\n            .fres,\n            .frsqrte,\n            .frsqrtes,\n            .fsqrt,\n            .lfiwax,\n            .mfocrf,\n            .recipprec,\n            .stfiwx,\n        }),\n    }","src":919,"more_decls":null}{"pl":"const pwr6x = CpuModel{\n        .name = \"pwr6x\",\n        .llvm_name = \"pwr6x\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .altivec,\n            .cmpb,\n            .fcpsgn,\n            .fprnd,\n            .fre,\n            .fres,\n            .frsqrte,\n            .frsqrtes,\n            .fsqrt,\n            .lfiwax,\n            .mfocrf,\n            .recipprec,\n            .stfiwx,\n        }),\n    }","src":939,"more_decls":null}{"pl":"const pwr7 = CpuModel{\n        .name = \"pwr7\",\n        .llvm_name = \"pwr7\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .allow_unaligned_fp_access,\n            .altivec,\n            .bpermd,\n            .cmpb,\n            .extdiv,\n            .fcpsgn,\n            .fpcvt,\n            .fprnd,\n            .fre,\n            .fres,\n            .frsqrte,\n            .frsqrtes,\n            .fsqrt,\n            .isel,\n            .ldbrx,\n            .lfiwax,\n            .mfocrf,\n            .popcntd,\n            .recipprec,\n            .stfiwx,\n            .two_const_nr,\n            .vsx,\n        }),\n    }","src":959,"more_decls":null}{"pl":"const pwr8 = CpuModel{\n        .name = \"pwr8\",\n        .llvm_name = \"pwr8\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .allow_unaligned_fp_access,\n            .altivec,\n            .bpermd,\n            .cmpb,\n            .crypto,\n            .direct_move,\n            .extdiv,\n            .fcpsgn,\n            .fpcvt,\n            .fprnd,\n            .fre,\n            .fres,\n            .frsqrte,\n            .frsqrtes,\n            .fsqrt,\n            .fuse_addi_load,\n            .fuse_addis_load,\n            .htm,\n            .icbt,\n            .isel,\n            .ldbrx,\n            .lfiwax,\n            .mfocrf,\n            .partword_atomics,\n            .popcntd,\n            .power8_altivec,\n            .power8_vector,\n            .predictable_select_expensive,\n            .recipprec,\n            .stfiwx,\n            .two_const_nr,\n            .vsx,\n        }),\n    }","src":988,"more_decls":null}{"pl":"const pwr9 = CpuModel{\n        .name = \"pwr9\",\n        .llvm_name = \"pwr9\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .allow_unaligned_fp_access,\n            .altivec,\n            .bpermd,\n            .cmpb,\n            .crypto,\n            .direct_move,\n            .extdiv,\n            .fcpsgn,\n            .fpcvt,\n            .fprnd,\n            .fre,\n            .fres,\n            .frsqrte,\n            .frsqrtes,\n            .fsqrt,\n            .htm,\n            .icbt,\n            .isa_v30_instructions,\n            .isel,\n            .ldbrx,\n            .lfiwax,\n            .mfocrf,\n            .partword_atomics,\n            .popcntd,\n            .power8_altivec,\n            .power8_vector,\n            .power9_altivec,\n            .power9_vector,\n            .ppc_postra_sched,\n            .ppc_prera_sched,\n            .predictable_select_expensive,\n            .recipprec,\n            .stfiwx,\n            .two_const_nr,\n            .vectors_use_two_units,\n            .vsx,\n        }),\n    }","src":1027,"more_decls":null}}{"pl":"const all_features = blk: {\n    const len = @typeInfo(Feature).Enum.fields.len;\n    std.debug.assert(len <= CpuFeature.Set.needed_bit_count);\n    var result: [len]CpuFeature = undefined;\n    result[@enumToInt(Feature.@\"64bit\")] = .{\n        .llvm_name = \"64bit\",\n        .description = \"Enable 64-bit instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.@\"64bitregs\")] = .{\n        .llvm_name = \"64bitregs\",\n        .description = \"Enable 64-bit registers usage for ppc32 [beta]\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.allow_unaligned_fp_access)] = .{\n        .llvm_name = \"allow-unaligned-fp-access\",\n        .description = \"CPU does not trap on unaligned FP access\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.altivec)] = .{\n        .llvm_name = \"altivec\",\n        .description = \"Enable Altivec instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .fpu,\n        }),\n    };\n    result[@enumToInt(Feature.booke)] = .{\n        .llvm_name = \"booke\",\n        .description = \"Enable Book E instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .icbt,\n        }),\n    };\n    result[@enumToInt(Feature.bpermd)] = .{\n        .llvm_name = \"bpermd\",\n        .description = \"Enable the bpermd instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.cmpb)] = .{\n        .llvm_name = \"cmpb\",\n        .description = \"Enable the cmpb instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.crbits)] = .{\n        .llvm_name = \"crbits\",\n        .description = \"Use condition-register bits individually\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.crypto)] = .{\n        .llvm_name = \"crypto\",\n        .description = \"Enable POWER8 Crypto instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .power8_altivec,\n        }),\n    };\n    result[@enumToInt(Feature.direct_move)] = .{\n        .llvm_name = \"direct-move\",\n        .description = \"Enable Power8 direct move instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .vsx,\n        }),\n    };\n    result[@enumToInt(Feature.e500)] = .{\n        .llvm_name = \"e500\",\n        .description = \"Enable E500/E500mc instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.extdiv)] = .{\n        .llvm_name = \"extdiv\",\n        .description = \"Enable extended divide instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fcpsgn)] = .{\n        .llvm_name = \"fcpsgn\",\n        .description = \"Enable the fcpsgn instruction\",\n        .dependencies = featureSet(&[_]Feature{\n            .fpu,\n        }),\n    };\n    result[@enumToInt(Feature.float128)] = .{\n        .llvm_name = \"float128\",\n        .description = \"Enable the __float128 data type for IEEE-754R Binary128.\",\n        .dependencies = featureSet(&[_]Feature{\n            .vsx,\n        }),\n    };\n    result[@enumToInt(Feature.fpcvt)] = .{\n        .llvm_name = \"fpcvt\",\n        .description = \"Enable fc[ft]* (unsigned and single-precision) and lfiwzx instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .fpu,\n        }),\n    };\n    result[@enumToInt(Feature.fprnd)] = .{\n        .llvm_name = \"fprnd\",\n        .description = \"Enable the fri[mnpz] instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .fpu,\n        }),\n    };\n    result[@enumToInt(Feature.fpu)] = .{\n        .llvm_name = \"fpu\",\n        .description = \"Enable classic FPU instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .hard_float,\n        }),\n    };\n    result[@enumToInt(Feature.fre)] = .{\n        .llvm_name = \"fre\",\n        .description = \"Enable the fre instruction\",\n        .dependencies = featureSet(&[_]Feature{\n            .fpu,\n        }),\n    };\n    result[@enumToInt(Feature.fres)] = .{\n        .llvm_name = \"fres\",\n        .description = \"Enable the fres instruction\",\n        .dependencies = featureSet(&[_]Feature{\n            .fpu,\n        }),\n    };\n    result[@enumToInt(Feature.frsqrte)] = .{\n        .llvm_name = \"frsqrte\",\n        .description = \"Enable the frsqrte instruction\",\n        .dependencies = featureSet(&[_]Feature{\n            .fpu,\n        }),\n    };\n    result[@enumToInt(Feature.frsqrtes)] = .{\n        .llvm_name = \"frsqrtes\",\n        .description = \"Enable the frsqrtes instruction\",\n        .dependencies = featureSet(&[_]Feature{\n            .fpu,\n        }),\n    };\n    result[@enumToInt(Feature.fsqrt)] = .{\n        .llvm_name = \"fsqrt\",\n        .description = \"Enable the fsqrt instruction\",\n        .dependencies = featureSet(&[_]Feature{\n            .fpu,\n        }),\n    };\n    result[@enumToInt(Feature.fuse_addi_load)] = .{\n        .llvm_name = \"fuse-addi-load\",\n        .description = \"Power8 Addi-Load fusion\",\n        .dependencies = featureSet(&[_]Feature{\n            .fusion,\n        }),\n    };\n    result[@enumToInt(Feature.fuse_addis_load)] = .{\n        .llvm_name = \"fuse-addis-load\",\n        .description = \"Power8 Addis-Load fusion\",\n        .dependencies = featureSet(&[_]Feature{\n            .fusion,\n        }),\n    };\n    result[@enumToInt(Feature.fusion)] = .{\n        .llvm_name = \"fusion\",\n        .description = \"Target supports instruction fusion\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.hard_float)] = .{\n        .llvm_name = \"hard-float\",\n        .description = \"Enable floating-point instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.htm)] = .{\n        .llvm_name = \"htm\",\n        .description = \"Enable Hardware Transactional Memory instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.icbt)] = .{\n        .llvm_name = \"icbt\",\n        .description = \"Enable icbt instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.invariant_function_descriptors)] = .{\n        .llvm_name = \"invariant-function-descriptors\",\n        .description = \"Assume function descriptors are invariant\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.isa_v30_instructions)] = .{\n        .llvm_name = \"isa-v30-instructions\",\n        .description = \"Enable instructions in ISA 3.0.\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.isa_v31_instructions)] = .{\n        .llvm_name = \"isa-v31-instructions\",\n        .description = \"Enable instructions in ISA 3.1.\",\n        .dependencies = featureSet(&[_]Feature{\n            .isa_v30_instructions,\n        }),\n    };\n    result[@enumToInt(Feature.isel)] = .{\n        .llvm_name = \"isel\",\n        .description = \"Enable the isel instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.ldbrx)] = .{\n        .llvm_name = \"ldbrx\",\n        .description = \"Enable the ldbrx instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.lfiwax)] = .{\n        .llvm_name = \"lfiwax\",\n        .description = \"Enable the lfiwax instruction\",\n        .dependencies = featureSet(&[_]Feature{\n            .fpu,\n        }),\n    };\n    result[@enumToInt(Feature.longcall)] = .{\n        .llvm_name = \"longcall\",\n        .description = \"Always use indirect calls\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mfocrf)] = .{\n        .llvm_name = \"mfocrf\",\n        .description = \"Enable the MFOCRF instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.msync)] = .{\n        .llvm_name = \"msync\",\n        .description = \"Has only the msync instruction instead of sync\",\n        .dependencies = featureSet(&[_]Feature{\n            .booke,\n        }),\n    };\n    result[@enumToInt(Feature.partword_atomics)] = .{\n        .llvm_name = \"partword-atomics\",\n        .description = \"Enable l[bh]arx and st[bh]cx.\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.pcrelative_memops)] = .{\n        .llvm_name = \"pcrelative-memops\",\n        .description = \"Enable PC relative Memory Ops\",\n        .dependencies = featureSet(&[_]Feature{\n            .isa_v30_instructions,\n        }),\n    };\n    result[@enumToInt(Feature.popcntd)] = .{\n        .llvm_name = \"popcntd\",\n        .description = \"Enable the popcnt[dw] instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.power10_vector)] = .{\n        .llvm_name = \"power10-vector\",\n        .description = \"Enable POWER10 vector instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .isa_v31_instructions,\n            .power9_vector,\n        }),\n    };\n    result[@enumToInt(Feature.power8_altivec)] = .{\n        .llvm_name = \"power8-altivec\",\n        .description = \"Enable POWER8 Altivec instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .altivec,\n        }),\n    };\n    result[@enumToInt(Feature.power8_vector)] = .{\n        .llvm_name = \"power8-vector\",\n        .description = \"Enable POWER8 vector instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .power8_altivec,\n            .vsx,\n        }),\n    };\n    result[@enumToInt(Feature.power9_altivec)] = .{\n        .llvm_name = \"power9-altivec\",\n        .description = \"Enable POWER9 Altivec instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .isa_v30_instructions,\n            .power8_altivec,\n        }),\n    };\n    result[@enumToInt(Feature.power9_vector)] = .{\n        .llvm_name = \"power9-vector\",\n        .description = \"Enable POWER9 vector instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .isa_v30_instructions,\n            .power8_vector,\n            .power9_altivec,\n        }),\n    };\n    result[@enumToInt(Feature.ppc_postra_sched)] = .{\n        .llvm_name = \"ppc-postra-sched\",\n        .description = \"Use PowerPC post-RA scheduling strategy\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.ppc_prera_sched)] = .{\n        .llvm_name = \"ppc-prera-sched\",\n        .description = \"Use PowerPC pre-RA scheduling strategy\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.ppc4xx)] = .{\n        .llvm_name = \"ppc4xx\",\n        .description = \"Enable PPC 4xx instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.ppc6xx)] = .{\n        .llvm_name = \"ppc6xx\",\n        .description = \"Enable PPC 6xx instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.predictable_select_expensive)] = .{\n        .llvm_name = \"predictable-select-expensive\",\n        .description = \"Prefer likely predicted branches over selects\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.prefix_instrs)] = .{\n        .llvm_name = \"prefix-instrs\",\n        .description = \"Enable prefixed instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .isa_v30_instructions,\n            .power8_vector,\n            .power9_altivec,\n        }),\n    };\n    result[@enumToInt(Feature.qpx)] = .{\n        .llvm_name = \"qpx\",\n        .description = \"Enable QPX instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .fpu,\n        }),\n    };\n    result[@enumToInt(Feature.recipprec)] = .{\n        .llvm_name = \"recipprec\",\n        .description = \"Assume higher precision reciprocal estimates\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.secure_plt)] = .{\n        .llvm_name = \"secure-plt\",\n        .description = \"Enable secure plt mode\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.slow_popcntd)] = .{\n        .llvm_name = \"slow-popcntd\",\n        .description = \"Has slow popcnt[dw] instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.spe)] = .{\n        .llvm_name = \"spe\",\n        .description = \"Enable SPE instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .hard_float,\n        }),\n    };\n    result[@enumToInt(Feature.stfiwx)] = .{\n        .llvm_name = \"stfiwx\",\n        .description = \"Enable the stfiwx instruction\",\n        .dependencies = featureSet(&[_]Feature{\n            .fpu,\n        }),\n    };\n    result[@enumToInt(Feature.two_const_nr)] = .{\n        .llvm_name = \"two-const-nr\",\n        .description = \"Requires two constant Newton-Raphson computation\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.vectors_use_two_units)] = .{\n        .llvm_name = \"vectors-use-two-units\",\n        .description = \"Vectors use two units\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.vsx)] = .{\n        .llvm_name = \"vsx\",\n        .description = \"Enable VSX instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .altivec,\n        }),\n    };\n    const ti = @typeInfo(Feature);\n    for (result) |*elem, i| {\n        elem.index = i;\n        elem.name = ti.Enum.fields[i].name;\n    }\n    break :blk result;\n}","src":74,"more_decls":null}]