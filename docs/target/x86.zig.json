[{"pl":"pub const Feature = enum ","src":9,"more_decls":{"pl":"@\"3dnow\"","src":10,"more_decls":null}{"pl":"@\"3dnowa\"","src":11,"more_decls":null}{"pl":"@\"64bit\"","src":12,"more_decls":null}{"pl":"adx","src":13,"more_decls":null}{"pl":"aes","src":14,"more_decls":null}{"pl":"amx_bf16","src":15,"more_decls":null}{"pl":"amx_int8","src":16,"more_decls":null}{"pl":"amx_tile","src":17,"more_decls":null}{"pl":"avx","src":18,"more_decls":null}{"pl":"avx2","src":19,"more_decls":null}{"pl":"avx512bf16","src":20,"more_decls":null}{"pl":"avx512bitalg","src":21,"more_decls":null}{"pl":"avx512bw","src":22,"more_decls":null}{"pl":"avx512cd","src":23,"more_decls":null}{"pl":"avx512dq","src":24,"more_decls":null}{"pl":"avx512er","src":25,"more_decls":null}{"pl":"avx512f","src":26,"more_decls":null}{"pl":"avx512ifma","src":27,"more_decls":null}{"pl":"avx512pf","src":28,"more_decls":null}{"pl":"avx512vbmi","src":29,"more_decls":null}{"pl":"avx512vbmi2","src":30,"more_decls":null}{"pl":"avx512vl","src":31,"more_decls":null}{"pl":"avx512vnni","src":32,"more_decls":null}{"pl":"avx512vp2intersect","src":33,"more_decls":null}{"pl":"avx512vpopcntdq","src":34,"more_decls":null}{"pl":"bmi","src":35,"more_decls":null}{"pl":"bmi2","src":36,"more_decls":null}{"pl":"branchfusion","src":37,"more_decls":null}{"pl":"cldemote","src":38,"more_decls":null}{"pl":"clflushopt","src":39,"more_decls":null}{"pl":"clwb","src":40,"more_decls":null}{"pl":"clzero","src":41,"more_decls":null}{"pl":"cmov","src":42,"more_decls":null}{"pl":"cx16","src":43,"more_decls":null}{"pl":"cx8","src":44,"more_decls":null}{"pl":"enqcmd","src":45,"more_decls":null}{"pl":"ermsb","src":46,"more_decls":null}{"pl":"f16c","src":47,"more_decls":null}{"pl":"false_deps_lzcnt_tzcnt","src":48,"more_decls":null}{"pl":"false_deps_popcnt","src":49,"more_decls":null}{"pl":"fast_11bytenop","src":50,"more_decls":null}{"pl":"fast_15bytenop","src":51,"more_decls":null}{"pl":"fast_7bytenop","src":52,"more_decls":null}{"pl":"fast_bextr","src":53,"more_decls":null}{"pl":"fast_gather","src":54,"more_decls":null}{"pl":"fast_hops","src":55,"more_decls":null}{"pl":"fast_lzcnt","src":56,"more_decls":null}{"pl":"fast_scalar_fsqrt","src":57,"more_decls":null}{"pl":"fast_scalar_shift_masks","src":58,"more_decls":null}{"pl":"fast_shld_rotate","src":59,"more_decls":null}{"pl":"fast_variable_shuffle","src":60,"more_decls":null}{"pl":"fast_vector_fsqrt","src":61,"more_decls":null}{"pl":"fast_vector_shift_masks","src":62,"more_decls":null}{"pl":"fma","src":63,"more_decls":null}{"pl":"fma4","src":64,"more_decls":null}{"pl":"fsgsbase","src":65,"more_decls":null}{"pl":"fxsr","src":66,"more_decls":null}{"pl":"gfni","src":67,"more_decls":null}{"pl":"idivl_to_divb","src":68,"more_decls":null}{"pl":"idivq_to_divl","src":69,"more_decls":null}{"pl":"invpcid","src":70,"more_decls":null}{"pl":"lea_sp","src":71,"more_decls":null}{"pl":"lea_uses_ag","src":72,"more_decls":null}{"pl":"lvi_cfi","src":73,"more_decls":null}{"pl":"lvi_load_hardening","src":74,"more_decls":null}{"pl":"lwp","src":75,"more_decls":null}{"pl":"lzcnt","src":76,"more_decls":null}{"pl":"macrofusion","src":77,"more_decls":null}{"pl":"merge_to_threeway_branch","src":78,"more_decls":null}{"pl":"mmx","src":79,"more_decls":null}{"pl":"movbe","src":80,"more_decls":null}{"pl":"movdir64b","src":81,"more_decls":null}{"pl":"movdiri","src":82,"more_decls":null}{"pl":"mpx","src":83,"more_decls":null}{"pl":"mwaitx","src":84,"more_decls":null}{"pl":"nopl","src":85,"more_decls":null}{"pl":"pad_short_functions","src":86,"more_decls":null}{"pl":"pclmul","src":87,"more_decls":null}{"pl":"pconfig","src":88,"more_decls":null}{"pl":"pku","src":89,"more_decls":null}{"pl":"popcnt","src":90,"more_decls":null}{"pl":"prefer_128_bit","src":91,"more_decls":null}{"pl":"prefer_256_bit","src":92,"more_decls":null}{"pl":"prefer_mask_registers","src":93,"more_decls":null}{"pl":"prefetchwt1","src":94,"more_decls":null}{"pl":"prfchw","src":95,"more_decls":null}{"pl":"ptwrite","src":96,"more_decls":null}{"pl":"rdpid","src":97,"more_decls":null}{"pl":"rdrnd","src":98,"more_decls":null}{"pl":"rdseed","src":99,"more_decls":null}{"pl":"retpoline","src":100,"more_decls":null}{"pl":"retpoline_external_thunk","src":101,"more_decls":null}{"pl":"retpoline_indirect_branches","src":102,"more_decls":null}{"pl":"retpoline_indirect_calls","src":103,"more_decls":null}{"pl":"rtm","src":104,"more_decls":null}{"pl":"sahf","src":105,"more_decls":null}{"pl":"serialize","src":106,"more_decls":null}{"pl":"seses","src":107,"more_decls":null}{"pl":"sgx","src":108,"more_decls":null}{"pl":"sha","src":109,"more_decls":null}{"pl":"shstk","src":110,"more_decls":null}{"pl":"slow_3ops_lea","src":111,"more_decls":null}{"pl":"slow_incdec","src":112,"more_decls":null}{"pl":"slow_lea","src":113,"more_decls":null}{"pl":"slow_pmaddwd","src":114,"more_decls":null}{"pl":"slow_pmulld","src":115,"more_decls":null}{"pl":"slow_shld","src":116,"more_decls":null}{"pl":"slow_two_mem_ops","src":117,"more_decls":null}{"pl":"slow_unaligned_mem_16","src":118,"more_decls":null}{"pl":"slow_unaligned_mem_32","src":119,"more_decls":null}{"pl":"soft_float","src":120,"more_decls":null}{"pl":"sse","src":121,"more_decls":null}{"pl":"sse_unaligned_mem","src":122,"more_decls":null}{"pl":"sse2","src":123,"more_decls":null}{"pl":"sse3","src":124,"more_decls":null}{"pl":"sse4_1","src":125,"more_decls":null}{"pl":"sse4_2","src":126,"more_decls":null}{"pl":"sse4a","src":127,"more_decls":null}{"pl":"ssse3","src":128,"more_decls":null}{"pl":"tbm","src":129,"more_decls":null}{"pl":"tsxldtrk","src":130,"more_decls":null}{"pl":"use_aa","src":131,"more_decls":null}{"pl":"use_glm_div_sqrt_costs","src":132,"more_decls":null}{"pl":"vaes","src":133,"more_decls":null}{"pl":"vpclmulqdq","src":134,"more_decls":null}{"pl":"vzeroupper","src":135,"more_decls":null}{"pl":"waitpkg","src":136,"more_decls":null}{"pl":"wbnoinvd","src":137,"more_decls":null}{"pl":"x87","src":138,"more_decls":null}{"pl":"xop","src":139,"more_decls":null}{"pl":"xsave","src":140,"more_decls":null}{"pl":"xsavec","src":141,"more_decls":null}{"pl":"xsaveopt","src":142,"more_decls":null}{"pl":"xsaves","src":143,"more_decls":null}}{"pl":"pub const cpu = struct ","src":924,"more_decls":{"pl":"const amdfam10 = CpuModel{\n        .name = \"amdfam10\",\n        .llvm_name = \"amdfam10\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnowa\",\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .fast_scalar_shift_masks,\n            .fxsr,\n            .lzcnt,\n            .nopl,\n            .popcnt,\n            .prfchw,\n            .sahf,\n            .slow_shld,\n            .sse4a,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":925,"more_decls":null}{"pl":"const athlon = CpuModel{\n        .name = \"athlon\",\n        .llvm_name = \"athlon\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnowa\",\n            .cmov,\n            .cx8,\n            .nopl,\n            .slow_shld,\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":947,"more_decls":null}{"pl":"const athlon_4 = CpuModel{\n        .name = \"athlon_4\",\n        .llvm_name = \"athlon-4\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnowa\",\n            .cmov,\n            .cx8,\n            .fxsr,\n            .nopl,\n            .slow_shld,\n            .slow_unaligned_mem_16,\n            .sse,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":961,"more_decls":null}{"pl":"const athlon_fx = CpuModel{\n        .name = \"athlon_fx\",\n        .llvm_name = \"athlon-fx\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnowa\",\n            .@\"64bit\",\n            .cmov,\n            .cx8,\n            .fast_scalar_shift_masks,\n            .fxsr,\n            .nopl,\n            .slow_shld,\n            .slow_unaligned_mem_16,\n            .sse2,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":977,"more_decls":null}{"pl":"const athlon_mp = CpuModel{\n        .name = \"athlon_mp\",\n        .llvm_name = \"athlon-mp\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnowa\",\n            .cmov,\n            .cx8,\n            .fxsr,\n            .nopl,\n            .slow_shld,\n            .slow_unaligned_mem_16,\n            .sse,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":995,"more_decls":null}{"pl":"const athlon_tbird = CpuModel{\n        .name = \"athlon_tbird\",\n        .llvm_name = \"athlon-tbird\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnowa\",\n            .cmov,\n            .cx8,\n            .nopl,\n            .slow_shld,\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1011,"more_decls":null}{"pl":"const athlon_xp = CpuModel{\n        .name = \"athlon_xp\",\n        .llvm_name = \"athlon-xp\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnowa\",\n            .cmov,\n            .cx8,\n            .fxsr,\n            .nopl,\n            .slow_shld,\n            .slow_unaligned_mem_16,\n            .sse,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1025,"more_decls":null}{"pl":"const athlon64 = CpuModel{\n        .name = \"athlon64\",\n        .llvm_name = \"athlon64\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnowa\",\n            .@\"64bit\",\n            .cmov,\n            .cx8,\n            .fast_scalar_shift_masks,\n            .fxsr,\n            .nopl,\n            .slow_shld,\n            .slow_unaligned_mem_16,\n            .sse2,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1041,"more_decls":null}{"pl":"const athlon64_sse3 = CpuModel{\n        .name = \"athlon64_sse3\",\n        .llvm_name = \"athlon64-sse3\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnowa\",\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .fast_scalar_shift_masks,\n            .fxsr,\n            .nopl,\n            .slow_shld,\n            .slow_unaligned_mem_16,\n            .sse3,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1059,"more_decls":null}{"pl":"const atom = CpuModel{\n        .name = \"atom\",\n        .llvm_name = \"atom\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .fxsr,\n            .idivl_to_divb,\n            .idivq_to_divl,\n            .lea_sp,\n            .lea_uses_ag,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pad_short_functions,\n            .sahf,\n            .slow_two_mem_ops,\n            .slow_unaligned_mem_16,\n            .ssse3,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1078,"more_decls":null}{"pl":"const barcelona = CpuModel{\n        .name = \"barcelona\",\n        .llvm_name = \"barcelona\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnowa\",\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .fast_scalar_shift_masks,\n            .fxsr,\n            .lzcnt,\n            .nopl,\n            .popcnt,\n            .prfchw,\n            .sahf,\n            .slow_shld,\n            .sse4a,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1103,"more_decls":null}{"pl":"const bdver1 = CpuModel{\n        .name = \"bdver1\",\n        .llvm_name = \"bdver1\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .aes,\n            .branchfusion,\n            .cmov,\n            .cx16,\n            .cx8,\n            .fast_11bytenop,\n            .fast_scalar_shift_masks,\n            .fxsr,\n            .lwp,\n            .lzcnt,\n            .mmx,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prfchw,\n            .sahf,\n            .slow_shld,\n            .vzeroupper,\n            .x87,\n            .xop,\n            .xsave,\n        }),\n    }","src":1125,"more_decls":null}{"pl":"const bdver2 = CpuModel{\n        .name = \"bdver2\",\n        .llvm_name = \"bdver2\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .aes,\n            .bmi,\n            .branchfusion,\n            .cmov,\n            .cx16,\n            .cx8,\n            .f16c,\n            .fast_11bytenop,\n            .fast_bextr,\n            .fast_scalar_shift_masks,\n            .fma,\n            .fxsr,\n            .lwp,\n            .lzcnt,\n            .mmx,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prfchw,\n            .sahf,\n            .slow_shld,\n            .tbm,\n            .vzeroupper,\n            .x87,\n            .xop,\n            .xsave,\n        }),\n    }","src":1153,"more_decls":null}{"pl":"const bdver3 = CpuModel{\n        .name = \"bdver3\",\n        .llvm_name = \"bdver3\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .aes,\n            .bmi,\n            .branchfusion,\n            .cmov,\n            .cx16,\n            .cx8,\n            .f16c,\n            .fast_11bytenop,\n            .fast_bextr,\n            .fast_scalar_shift_masks,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .lwp,\n            .lzcnt,\n            .mmx,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prfchw,\n            .sahf,\n            .slow_shld,\n            .tbm,\n            .vzeroupper,\n            .x87,\n            .xop,\n            .xsave,\n            .xsaveopt,\n        }),\n    }","src":1186,"more_decls":null}{"pl":"const bdver4 = CpuModel{\n        .name = \"bdver4\",\n        .llvm_name = \"bdver4\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .aes,\n            .avx2,\n            .bmi,\n            .bmi2,\n            .branchfusion,\n            .cmov,\n            .cx16,\n            .cx8,\n            .f16c,\n            .fast_11bytenop,\n            .fast_bextr,\n            .fast_scalar_shift_masks,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .lwp,\n            .lzcnt,\n            .mmx,\n            .movbe,\n            .mwaitx,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prfchw,\n            .rdrnd,\n            .sahf,\n            .slow_shld,\n            .tbm,\n            .vzeroupper,\n            .x87,\n            .xop,\n            .xsave,\n            .xsaveopt,\n        }),\n    }","src":1221,"more_decls":null}{"pl":"const bonnell = CpuModel{\n        .name = \"bonnell\",\n        .llvm_name = \"bonnell\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .fxsr,\n            .idivl_to_divb,\n            .idivq_to_divl,\n            .lea_sp,\n            .lea_uses_ag,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pad_short_functions,\n            .sahf,\n            .slow_two_mem_ops,\n            .slow_unaligned_mem_16,\n            .ssse3,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1261,"more_decls":null}{"pl":"const broadwell = CpuModel{\n        .name = \"broadwell\",\n        .llvm_name = \"broadwell\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .adx,\n            .avx,\n            .avx2,\n            .bmi,\n            .bmi2,\n            .cmov,\n            .cx16,\n            .cx8,\n            .ermsb,\n            .f16c,\n            .false_deps_lzcnt_tzcnt,\n            .false_deps_popcnt,\n            .fast_15bytenop,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fast_variable_shuffle,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .idivq_to_divl,\n            .invpcid,\n            .lzcnt,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prfchw,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .slow_3ops_lea,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsaveopt,\n        }),\n    }","src":1286,"more_decls":null}{"pl":"const btver1 = CpuModel{\n        .name = \"btver1\",\n        .llvm_name = \"btver1\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .fast_15bytenop,\n            .fast_scalar_shift_masks,\n            .fast_vector_shift_masks,\n            .fxsr,\n            .lzcnt,\n            .mmx,\n            .nopl,\n            .popcnt,\n            .prfchw,\n            .sahf,\n            .slow_shld,\n            .sse4a,\n            .ssse3,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1332,"more_decls":null}{"pl":"const btver2 = CpuModel{\n        .name = \"btver2\",\n        .llvm_name = \"btver2\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .aes,\n            .avx,\n            .bmi,\n            .cmov,\n            .cx16,\n            .cx8,\n            .f16c,\n            .fast_15bytenop,\n            .fast_bextr,\n            .fast_hops,\n            .fast_lzcnt,\n            .fast_scalar_shift_masks,\n            .fast_vector_shift_masks,\n            .fxsr,\n            .lzcnt,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prfchw,\n            .sahf,\n            .slow_shld,\n            .sse4a,\n            .ssse3,\n            .x87,\n            .xsave,\n            .xsaveopt,\n        }),\n    }","src":1357,"more_decls":null}{"pl":"const c3 = CpuModel{\n        .name = \"c3\",\n        .llvm_name = \"c3\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnow\",\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1392,"more_decls":null}{"pl":"const c3_2 = CpuModel{\n        .name = \"c3_2\",\n        .llvm_name = \"c3-2\",\n        .features = featureSet(&[_]Feature{\n            .cmov,\n            .cx8,\n            .fxsr,\n            .mmx,\n            .slow_unaligned_mem_16,\n            .sse,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1402,"more_decls":null}{"pl":"const cannonlake = CpuModel{\n        .name = \"cannonlake\",\n        .llvm_name = \"cannonlake\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .adx,\n            .aes,\n            .avx,\n            .avx2,\n            .avx512bw,\n            .avx512cd,\n            .avx512dq,\n            .avx512f,\n            .avx512ifma,\n            .avx512vbmi,\n            .avx512vl,\n            .bmi,\n            .bmi2,\n            .clflushopt,\n            .cmov,\n            .cx16,\n            .cx8,\n            .ermsb,\n            .f16c,\n            .fast_15bytenop,\n            .fast_gather,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fast_variable_shuffle,\n            .fast_vector_fsqrt,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .idivq_to_divl,\n            .invpcid,\n            .lzcnt,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .pku,\n            .popcnt,\n            .prefer_256_bit,\n            .prfchw,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .sgx,\n            .sha,\n            .slow_3ops_lea,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsavec,\n            .xsaveopt,\n            .xsaves,\n        }),\n    }","src":1416,"more_decls":null}{"pl":"const cascadelake = CpuModel{\n        .name = \"cascadelake\",\n        .llvm_name = \"cascadelake\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .adx,\n            .aes,\n            .avx,\n            .avx2,\n            .avx512bw,\n            .avx512cd,\n            .avx512dq,\n            .avx512f,\n            .avx512vl,\n            .avx512vnni,\n            .bmi,\n            .bmi2,\n            .clflushopt,\n            .clwb,\n            .cmov,\n            .cx16,\n            .cx8,\n            .ermsb,\n            .f16c,\n            .false_deps_popcnt,\n            .fast_15bytenop,\n            .fast_gather,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fast_variable_shuffle,\n            .fast_vector_fsqrt,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .idivq_to_divl,\n            .invpcid,\n            .lzcnt,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .pku,\n            .popcnt,\n            .prefer_256_bit,\n            .prfchw,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .slow_3ops_lea,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsavec,\n            .xsaveopt,\n            .xsaves,\n        }),\n    }","src":1477,"more_decls":null}{"pl":"const cooperlake = CpuModel{\n        .name = \"cooperlake\",\n        .llvm_name = \"cooperlake\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .adx,\n            .aes,\n            .avx,\n            .avx2,\n            .avx512bf16,\n            .avx512bw,\n            .avx512cd,\n            .avx512dq,\n            .avx512f,\n            .avx512vl,\n            .avx512vnni,\n            .bmi,\n            .bmi2,\n            .clflushopt,\n            .clwb,\n            .cmov,\n            .cx16,\n            .cx8,\n            .ermsb,\n            .f16c,\n            .false_deps_popcnt,\n            .fast_15bytenop,\n            .fast_gather,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fast_variable_shuffle,\n            .fast_vector_fsqrt,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .idivq_to_divl,\n            .invpcid,\n            .lzcnt,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .pku,\n            .popcnt,\n            .prefer_256_bit,\n            .prfchw,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .slow_3ops_lea,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsavec,\n            .xsaveopt,\n            .xsaves,\n        }),\n    }","src":1537,"more_decls":null}{"pl":"const core_avx_i = CpuModel{\n        .name = \"core_avx_i\",\n        .llvm_name = \"core-avx-i\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .avx,\n            .cmov,\n            .cx16,\n            .cx8,\n            .f16c,\n            .false_deps_popcnt,\n            .fast_15bytenop,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fsgsbase,\n            .fxsr,\n            .idivq_to_divl,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .rdrnd,\n            .sahf,\n            .slow_3ops_lea,\n            .slow_unaligned_mem_32,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsaveopt,\n        }),\n    }","src":1598,"more_decls":null}{"pl":"const core_avx2 = CpuModel{\n        .name = \"core_avx2\",\n        .llvm_name = \"core-avx2\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .avx,\n            .avx2,\n            .bmi,\n            .bmi2,\n            .cmov,\n            .cx16,\n            .cx8,\n            .ermsb,\n            .f16c,\n            .false_deps_lzcnt_tzcnt,\n            .false_deps_popcnt,\n            .fast_15bytenop,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fast_variable_shuffle,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .idivq_to_divl,\n            .invpcid,\n            .lzcnt,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .rdrnd,\n            .sahf,\n            .slow_3ops_lea,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsaveopt,\n        }),\n    }","src":1632,"more_decls":null}{"pl":"const core2 = CpuModel{\n        .name = \"core2\",\n        .llvm_name = \"core2\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .fxsr,\n            .macrofusion,\n            .mmx,\n            .nopl,\n            .sahf,\n            .slow_unaligned_mem_16,\n            .ssse3,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1675,"more_decls":null}{"pl":"const corei7 = CpuModel{\n        .name = \"corei7\",\n        .llvm_name = \"corei7\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .fxsr,\n            .macrofusion,\n            .mmx,\n            .nopl,\n            .popcnt,\n            .sahf,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1694,"more_decls":null}{"pl":"const corei7_avx = CpuModel{\n        .name = \"corei7_avx\",\n        .llvm_name = \"corei7-avx\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .avx,\n            .cmov,\n            .cx16,\n            .cx8,\n            .false_deps_popcnt,\n            .fast_15bytenop,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fxsr,\n            .idivq_to_divl,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .sahf,\n            .slow_3ops_lea,\n            .slow_unaligned_mem_32,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsaveopt,\n        }),\n    }","src":1713,"more_decls":null}{"pl":"const generic = CpuModel{\n        .name = \"generic\",\n        .llvm_name = \"generic\",\n        .features = featureSet(&[_]Feature{\n            .cx8,\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1744,"more_decls":null}{"pl":"const geode = CpuModel{\n        .name = \"geode\",\n        .llvm_name = \"geode\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnowa\",\n            .cx8,\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1754,"more_decls":null}{"pl":"const goldmont = CpuModel{\n        .name = \"goldmont\",\n        .llvm_name = \"goldmont\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .aes,\n            .clflushopt,\n            .cmov,\n            .cx16,\n            .cx8,\n            .false_deps_popcnt,\n            .fsgsbase,\n            .fxsr,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prfchw,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .sha,\n            .slow_incdec,\n            .slow_lea,\n            .slow_two_mem_ops,\n            .sse4_2,\n            .ssse3,\n            .use_glm_div_sqrt_costs,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsavec,\n            .xsaveopt,\n            .xsaves,\n        }),\n    }","src":1765,"more_decls":null}{"pl":"const goldmont_plus = CpuModel{\n        .name = \"goldmont_plus\",\n        .llvm_name = \"goldmont-plus\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .aes,\n            .clflushopt,\n            .cmov,\n            .cx16,\n            .cx8,\n            .fsgsbase,\n            .fxsr,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prfchw,\n            .ptwrite,\n            .rdpid,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .sgx,\n            .sha,\n            .slow_incdec,\n            .slow_lea,\n            .slow_two_mem_ops,\n            .sse4_2,\n            .ssse3,\n            .use_glm_div_sqrt_costs,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsavec,\n            .xsaveopt,\n            .xsaves,\n        }),\n    }","src":1802,"more_decls":null}{"pl":"const haswell = CpuModel{\n        .name = \"haswell\",\n        .llvm_name = \"haswell\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .avx,\n            .avx2,\n            .bmi,\n            .bmi2,\n            .cmov,\n            .cx16,\n            .cx8,\n            .ermsb,\n            .f16c,\n            .false_deps_lzcnt_tzcnt,\n            .false_deps_popcnt,\n            .fast_15bytenop,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fast_variable_shuffle,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .idivq_to_divl,\n            .invpcid,\n            .lzcnt,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .rdrnd,\n            .sahf,\n            .slow_3ops_lea,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsaveopt,\n        }),\n    }","src":1841,"more_decls":null}{"pl":"const _i386 = CpuModel{\n        .name = \"_i386\",\n        .llvm_name = \"i386\",\n        .features = featureSet(&[_]Feature{\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1884,"more_decls":null}{"pl":"const _i486 = CpuModel{\n        .name = \"_i486\",\n        .llvm_name = \"i486\",\n        .features = featureSet(&[_]Feature{\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1893,"more_decls":null}{"pl":"const _i586 = CpuModel{\n        .name = \"_i586\",\n        .llvm_name = \"i586\",\n        .features = featureSet(&[_]Feature{\n            .cx8,\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1902,"more_decls":null}{"pl":"const _i686 = CpuModel{\n        .name = \"_i686\",\n        .llvm_name = \"i686\",\n        .features = featureSet(&[_]Feature{\n            .cmov,\n            .cx8,\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":1912,"more_decls":null}{"pl":"const icelake_client = CpuModel{\n        .name = \"icelake_client\",\n        .llvm_name = \"icelake-client\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .adx,\n            .aes,\n            .avx,\n            .avx2,\n            .avx512bitalg,\n            .avx512bw,\n            .avx512cd,\n            .avx512dq,\n            .avx512f,\n            .avx512ifma,\n            .avx512vbmi,\n            .avx512vbmi2,\n            .avx512vl,\n            .avx512vnni,\n            .avx512vpopcntdq,\n            .bmi,\n            .bmi2,\n            .clflushopt,\n            .clwb,\n            .cmov,\n            .cx16,\n            .cx8,\n            .ermsb,\n            .f16c,\n            .fast_15bytenop,\n            .fast_gather,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fast_variable_shuffle,\n            .fast_vector_fsqrt,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .gfni,\n            .idivq_to_divl,\n            .invpcid,\n            .lzcnt,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .pku,\n            .popcnt,\n            .prefer_256_bit,\n            .prfchw,\n            .rdpid,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .sgx,\n            .sha,\n            .slow_3ops_lea,\n            .sse4_2,\n            .vaes,\n            .vpclmulqdq,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsavec,\n            .xsaveopt,\n            .xsaves,\n        }),\n    }","src":1923,"more_decls":null}{"pl":"const icelake_server = CpuModel{\n        .name = \"icelake_server\",\n        .llvm_name = \"icelake-server\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .adx,\n            .aes,\n            .avx,\n            .avx2,\n            .avx512bitalg,\n            .avx512bw,\n            .avx512cd,\n            .avx512dq,\n            .avx512f,\n            .avx512ifma,\n            .avx512vbmi,\n            .avx512vbmi2,\n            .avx512vl,\n            .avx512vnni,\n            .avx512vpopcntdq,\n            .bmi,\n            .bmi2,\n            .clflushopt,\n            .clwb,\n            .cmov,\n            .cx16,\n            .cx8,\n            .ermsb,\n            .f16c,\n            .fast_15bytenop,\n            .fast_gather,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fast_variable_shuffle,\n            .fast_vector_fsqrt,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .gfni,\n            .idivq_to_divl,\n            .invpcid,\n            .lzcnt,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .pconfig,\n            .pku,\n            .popcnt,\n            .prefer_256_bit,\n            .prfchw,\n            .rdpid,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .sgx,\n            .sha,\n            .slow_3ops_lea,\n            .sse4_2,\n            .vaes,\n            .vpclmulqdq,\n            .vzeroupper,\n            .wbnoinvd,\n            .x87,\n            .xsave,\n            .xsavec,\n            .xsaveopt,\n            .xsaves,\n        }),\n    }","src":1993,"more_decls":null}{"pl":"const ivybridge = CpuModel{\n        .name = \"ivybridge\",\n        .llvm_name = \"ivybridge\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .avx,\n            .cmov,\n            .cx16,\n            .cx8,\n            .f16c,\n            .false_deps_popcnt,\n            .fast_15bytenop,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fsgsbase,\n            .fxsr,\n            .idivq_to_divl,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .rdrnd,\n            .sahf,\n            .slow_3ops_lea,\n            .slow_unaligned_mem_32,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsaveopt,\n        }),\n    }","src":2065,"more_decls":null}{"pl":"const k6 = CpuModel{\n        .name = \"k6\",\n        .llvm_name = \"k6\",\n        .features = featureSet(&[_]Feature{\n            .cx8,\n            .mmx,\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2099,"more_decls":null}{"pl":"const k6_2 = CpuModel{\n        .name = \"k6_2\",\n        .llvm_name = \"k6-2\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnow\",\n            .cx8,\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2110,"more_decls":null}{"pl":"const k6_3 = CpuModel{\n        .name = \"k6_3\",\n        .llvm_name = \"k6-3\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnow\",\n            .cx8,\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2121,"more_decls":null}{"pl":"const k8 = CpuModel{\n        .name = \"k8\",\n        .llvm_name = \"k8\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnowa\",\n            .@\"64bit\",\n            .cmov,\n            .cx8,\n            .fast_scalar_shift_masks,\n            .fxsr,\n            .nopl,\n            .slow_shld,\n            .slow_unaligned_mem_16,\n            .sse2,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2132,"more_decls":null}{"pl":"const k8_sse3 = CpuModel{\n        .name = \"k8_sse3\",\n        .llvm_name = \"k8-sse3\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnowa\",\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .fast_scalar_shift_masks,\n            .fxsr,\n            .nopl,\n            .slow_shld,\n            .slow_unaligned_mem_16,\n            .sse3,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2150,"more_decls":null}{"pl":"const knl = CpuModel{\n        .name = \"knl\",\n        .llvm_name = \"knl\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .adx,\n            .aes,\n            .avx512cd,\n            .avx512er,\n            .avx512f,\n            .avx512pf,\n            .bmi,\n            .bmi2,\n            .cmov,\n            .cx16,\n            .cx8,\n            .f16c,\n            .fast_gather,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .idivq_to_divl,\n            .lzcnt,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prefer_mask_registers,\n            .prefetchwt1,\n            .prfchw,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .slow_3ops_lea,\n            .slow_incdec,\n            .slow_pmaddwd,\n            .slow_two_mem_ops,\n            .x87,\n            .xsave,\n            .xsaveopt,\n        }),\n    }","src":2169,"more_decls":null}{"pl":"const knm = CpuModel{\n        .name = \"knm\",\n        .llvm_name = \"knm\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .adx,\n            .aes,\n            .avx512cd,\n            .avx512er,\n            .avx512f,\n            .avx512pf,\n            .avx512vpopcntdq,\n            .bmi,\n            .bmi2,\n            .cmov,\n            .cx16,\n            .cx8,\n            .f16c,\n            .fast_gather,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .idivq_to_divl,\n            .lzcnt,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prefer_mask_registers,\n            .prefetchwt1,\n            .prfchw,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .slow_3ops_lea,\n            .slow_incdec,\n            .slow_pmaddwd,\n            .slow_two_mem_ops,\n            .x87,\n            .xsave,\n            .xsaveopt,\n        }),\n    }","src":2212,"more_decls":null}{"pl":"const lakemont = CpuModel{\n        .name = \"lakemont\",\n        .llvm_name = \"lakemont\",\n        .features = featureSet(&[_]Feature{\n            .vzeroupper,\n        }),\n    }","src":2256,"more_decls":null}{"pl":"const nehalem = CpuModel{\n        .name = \"nehalem\",\n        .llvm_name = \"nehalem\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .fxsr,\n            .macrofusion,\n            .mmx,\n            .nopl,\n            .popcnt,\n            .sahf,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2263,"more_decls":null}{"pl":"const nocona = CpuModel{\n        .name = \"nocona\",\n        .llvm_name = \"nocona\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .fxsr,\n            .mmx,\n            .nopl,\n            .slow_unaligned_mem_16,\n            .sse3,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2282,"more_decls":null}{"pl":"const opteron = CpuModel{\n        .name = \"opteron\",\n        .llvm_name = \"opteron\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnowa\",\n            .@\"64bit\",\n            .cmov,\n            .cx8,\n            .fast_scalar_shift_masks,\n            .fxsr,\n            .nopl,\n            .slow_shld,\n            .slow_unaligned_mem_16,\n            .sse2,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2299,"more_decls":null}{"pl":"const opteron_sse3 = CpuModel{\n        .name = \"opteron_sse3\",\n        .llvm_name = \"opteron-sse3\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnowa\",\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .fast_scalar_shift_masks,\n            .fxsr,\n            .nopl,\n            .slow_shld,\n            .slow_unaligned_mem_16,\n            .sse3,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2317,"more_decls":null}{"pl":"const penryn = CpuModel{\n        .name = \"penryn\",\n        .llvm_name = \"penryn\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .fxsr,\n            .macrofusion,\n            .mmx,\n            .nopl,\n            .sahf,\n            .slow_unaligned_mem_16,\n            .sse4_1,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2336,"more_decls":null}{"pl":"const pentium = CpuModel{\n        .name = \"pentium\",\n        .llvm_name = \"pentium\",\n        .features = featureSet(&[_]Feature{\n            .cx8,\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2355,"more_decls":null}{"pl":"const pentium_m = CpuModel{\n        .name = \"pentium_m\",\n        .llvm_name = \"pentium-m\",\n        .features = featureSet(&[_]Feature{\n            .cmov,\n            .cx8,\n            .fxsr,\n            .mmx,\n            .nopl,\n            .slow_unaligned_mem_16,\n            .sse2,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2365,"more_decls":null}{"pl":"const pentium_mmx = CpuModel{\n        .name = \"pentium_mmx\",\n        .llvm_name = \"pentium-mmx\",\n        .features = featureSet(&[_]Feature{\n            .cx8,\n            .mmx,\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2380,"more_decls":null}{"pl":"const pentium2 = CpuModel{\n        .name = \"pentium2\",\n        .llvm_name = \"pentium2\",\n        .features = featureSet(&[_]Feature{\n            .cmov,\n            .cx8,\n            .fxsr,\n            .mmx,\n            .nopl,\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2391,"more_decls":null}{"pl":"const pentium3 = CpuModel{\n        .name = \"pentium3\",\n        .llvm_name = \"pentium3\",\n        .features = featureSet(&[_]Feature{\n            .cmov,\n            .cx8,\n            .fxsr,\n            .mmx,\n            .nopl,\n            .slow_unaligned_mem_16,\n            .sse,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2405,"more_decls":null}{"pl":"const pentium3m = CpuModel{\n        .name = \"pentium3m\",\n        .llvm_name = \"pentium3m\",\n        .features = featureSet(&[_]Feature{\n            .cmov,\n            .cx8,\n            .fxsr,\n            .mmx,\n            .nopl,\n            .slow_unaligned_mem_16,\n            .sse,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2420,"more_decls":null}{"pl":"const pentium4 = CpuModel{\n        .name = \"pentium4\",\n        .llvm_name = \"pentium4\",\n        .features = featureSet(&[_]Feature{\n            .cmov,\n            .cx8,\n            .fxsr,\n            .mmx,\n            .nopl,\n            .slow_unaligned_mem_16,\n            .sse2,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2435,"more_decls":null}{"pl":"const pentium4m = CpuModel{\n        .name = \"pentium4m\",\n        .llvm_name = \"pentium4m\",\n        .features = featureSet(&[_]Feature{\n            .cmov,\n            .cx8,\n            .fxsr,\n            .mmx,\n            .nopl,\n            .slow_unaligned_mem_16,\n            .sse2,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2450,"more_decls":null}{"pl":"const pentiumpro = CpuModel{\n        .name = \"pentiumpro\",\n        .llvm_name = \"pentiumpro\",\n        .features = featureSet(&[_]Feature{\n            .cmov,\n            .cx8,\n            .nopl,\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2465,"more_decls":null}{"pl":"const prescott = CpuModel{\n        .name = \"prescott\",\n        .llvm_name = \"prescott\",\n        .features = featureSet(&[_]Feature{\n            .cmov,\n            .cx8,\n            .fxsr,\n            .mmx,\n            .nopl,\n            .slow_unaligned_mem_16,\n            .sse3,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2477,"more_decls":null}{"pl":"const sandybridge = CpuModel{\n        .name = \"sandybridge\",\n        .llvm_name = \"sandybridge\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .avx,\n            .cmov,\n            .cx16,\n            .cx8,\n            .false_deps_popcnt,\n            .fast_15bytenop,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fxsr,\n            .idivq_to_divl,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .sahf,\n            .slow_3ops_lea,\n            .slow_unaligned_mem_32,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsaveopt,\n        }),\n    }","src":2492,"more_decls":null}{"pl":"const silvermont = CpuModel{\n        .name = \"silvermont\",\n        .llvm_name = \"silvermont\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .false_deps_popcnt,\n            .fast_7bytenop,\n            .fxsr,\n            .idivq_to_divl,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prfchw,\n            .rdrnd,\n            .sahf,\n            .slow_incdec,\n            .slow_lea,\n            .slow_pmulld,\n            .slow_two_mem_ops,\n            .sse4_2,\n            .ssse3,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2523,"more_decls":null}{"pl":"const skx = CpuModel{\n        .name = \"skx\",\n        .llvm_name = \"skx\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .adx,\n            .aes,\n            .avx,\n            .avx2,\n            .avx512bw,\n            .avx512cd,\n            .avx512dq,\n            .avx512f,\n            .avx512vl,\n            .bmi,\n            .bmi2,\n            .clflushopt,\n            .clwb,\n            .cmov,\n            .cx16,\n            .cx8,\n            .ermsb,\n            .f16c,\n            .false_deps_popcnt,\n            .fast_15bytenop,\n            .fast_gather,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fast_variable_shuffle,\n            .fast_vector_fsqrt,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .idivq_to_divl,\n            .invpcid,\n            .lzcnt,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .pku,\n            .popcnt,\n            .prefer_256_bit,\n            .prfchw,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .slow_3ops_lea,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsavec,\n            .xsaveopt,\n            .xsaves,\n        }),\n    }","src":2553,"more_decls":null}{"pl":"const skylake = CpuModel{\n        .name = \"skylake\",\n        .llvm_name = \"skylake\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .adx,\n            .aes,\n            .avx,\n            .avx2,\n            .bmi,\n            .bmi2,\n            .clflushopt,\n            .cmov,\n            .cx16,\n            .cx8,\n            .ermsb,\n            .f16c,\n            .false_deps_popcnt,\n            .fast_15bytenop,\n            .fast_gather,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fast_variable_shuffle,\n            .fast_vector_fsqrt,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .idivq_to_divl,\n            .invpcid,\n            .lzcnt,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prfchw,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .sgx,\n            .slow_3ops_lea,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsavec,\n            .xsaveopt,\n            .xsaves,\n        }),\n    }","src":2612,"more_decls":null}{"pl":"const skylake_avx512 = CpuModel{\n        .name = \"skylake_avx512\",\n        .llvm_name = \"skylake-avx512\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .adx,\n            .aes,\n            .avx,\n            .avx2,\n            .avx512bw,\n            .avx512cd,\n            .avx512dq,\n            .avx512f,\n            .avx512vl,\n            .bmi,\n            .bmi2,\n            .clflushopt,\n            .clwb,\n            .cmov,\n            .cx16,\n            .cx8,\n            .ermsb,\n            .f16c,\n            .false_deps_popcnt,\n            .fast_15bytenop,\n            .fast_gather,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fast_variable_shuffle,\n            .fast_vector_fsqrt,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .idivq_to_divl,\n            .invpcid,\n            .lzcnt,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .pku,\n            .popcnt,\n            .prefer_256_bit,\n            .prfchw,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .slow_3ops_lea,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsavec,\n            .xsaveopt,\n            .xsaves,\n        }),\n    }","src":2664,"more_decls":null}{"pl":"const slm = CpuModel{\n        .name = \"slm\",\n        .llvm_name = \"slm\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .false_deps_popcnt,\n            .fast_7bytenop,\n            .fxsr,\n            .idivq_to_divl,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prfchw,\n            .rdrnd,\n            .sahf,\n            .slow_incdec,\n            .slow_lea,\n            .slow_pmulld,\n            .slow_two_mem_ops,\n            .sse4_2,\n            .ssse3,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2723,"more_decls":null}{"pl":"const tigerlake = CpuModel{\n        .name = \"tigerlake\",\n        .llvm_name = \"tigerlake\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .adx,\n            .aes,\n            .avx,\n            .avx2,\n            .avx512bitalg,\n            .avx512bw,\n            .avx512cd,\n            .avx512dq,\n            .avx512f,\n            .avx512ifma,\n            .avx512vbmi,\n            .avx512vbmi2,\n            .avx512vl,\n            .avx512vnni,\n            .avx512vp2intersect,\n            .avx512vpopcntdq,\n            .bmi,\n            .bmi2,\n            .clflushopt,\n            .clwb,\n            .cmov,\n            .cx16,\n            .cx8,\n            .ermsb,\n            .f16c,\n            .fast_15bytenop,\n            .fast_gather,\n            .fast_scalar_fsqrt,\n            .fast_shld_rotate,\n            .fast_variable_shuffle,\n            .fast_vector_fsqrt,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .gfni,\n            .idivq_to_divl,\n            .invpcid,\n            .lzcnt,\n            .macrofusion,\n            .merge_to_threeway_branch,\n            .mmx,\n            .movbe,\n            .movdir64b,\n            .movdiri,\n            .nopl,\n            .pclmul,\n            .pku,\n            .popcnt,\n            .prefer_256_bit,\n            .prfchw,\n            .rdpid,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .sgx,\n            .sha,\n            .shstk,\n            .slow_3ops_lea,\n            .sse4_2,\n            .vaes,\n            .vpclmulqdq,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsavec,\n            .xsaveopt,\n            .xsaves,\n        }),\n    }","src":2753,"more_decls":null}{"pl":"const tremont = CpuModel{\n        .name = \"tremont\",\n        .llvm_name = \"tremont\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .aes,\n            .clflushopt,\n            .clwb,\n            .cmov,\n            .cx16,\n            .cx8,\n            .fsgsbase,\n            .fxsr,\n            .gfni,\n            .mmx,\n            .movbe,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prfchw,\n            .ptwrite,\n            .rdpid,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .sgx,\n            .sha,\n            .slow_incdec,\n            .slow_lea,\n            .slow_two_mem_ops,\n            .sse4_2,\n            .ssse3,\n            .use_glm_div_sqrt_costs,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsavec,\n            .xsaveopt,\n            .xsaves,\n        }),\n    }","src":2827,"more_decls":null}{"pl":"const westmere = CpuModel{\n        .name = \"westmere\",\n        .llvm_name = \"westmere\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .cmov,\n            .cx16,\n            .cx8,\n            .fxsr,\n            .macrofusion,\n            .mmx,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .sahf,\n            .sse4_2,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2868,"more_decls":null}{"pl":"const winchip_c6 = CpuModel{\n        .name = \"winchip_c6\",\n        .llvm_name = \"winchip-c6\",\n        .features = featureSet(&[_]Feature{\n            .mmx,\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2888,"more_decls":null}{"pl":"const winchip2 = CpuModel{\n        .name = \"winchip2\",\n        .llvm_name = \"winchip2\",\n        .features = featureSet(&[_]Feature{\n            .@\"3dnow\",\n            .slow_unaligned_mem_16,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2898,"more_decls":null}{"pl":"const x86_64 = CpuModel{\n        .name = \"x86_64\",\n        .llvm_name = \"x86-64\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .cmov,\n            .cx8,\n            .fxsr,\n            .idivq_to_divl,\n            .macrofusion,\n            .mmx,\n            .nopl,\n            .slow_3ops_lea,\n            .slow_incdec,\n            .sse2,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2908,"more_decls":null}{"pl":"const yonah = CpuModel{\n        .name = \"yonah\",\n        .llvm_name = \"yonah\",\n        .features = featureSet(&[_]Feature{\n            .cmov,\n            .cx8,\n            .fxsr,\n            .mmx,\n            .nopl,\n            .slow_unaligned_mem_16,\n            .sse3,\n            .vzeroupper,\n            .x87,\n        }),\n    }","src":2927,"more_decls":null}{"pl":"const znver1 = CpuModel{\n        .name = \"znver1\",\n        .llvm_name = \"znver1\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .adx,\n            .aes,\n            .avx2,\n            .bmi,\n            .bmi2,\n            .branchfusion,\n            .clflushopt,\n            .clzero,\n            .cmov,\n            .cx16,\n            .f16c,\n            .fast_15bytenop,\n            .fast_bextr,\n            .fast_lzcnt,\n            .fast_scalar_shift_masks,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .lzcnt,\n            .mmx,\n            .movbe,\n            .mwaitx,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prfchw,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .sha,\n            .slow_shld,\n            .sse4a,\n            .vzeroupper,\n            .x87,\n            .xsave,\n            .xsavec,\n            .xsaveopt,\n            .xsaves,\n        }),\n    }","src":2942,"more_decls":null}{"pl":"const znver2 = CpuModel{\n        .name = \"znver2\",\n        .llvm_name = \"znver2\",\n        .features = featureSet(&[_]Feature{\n            .@\"64bit\",\n            .adx,\n            .aes,\n            .avx2,\n            .bmi,\n            .bmi2,\n            .branchfusion,\n            .clflushopt,\n            .clwb,\n            .clzero,\n            .cmov,\n            .cx16,\n            .f16c,\n            .fast_15bytenop,\n            .fast_bextr,\n            .fast_lzcnt,\n            .fast_scalar_shift_masks,\n            .fma,\n            .fsgsbase,\n            .fxsr,\n            .lzcnt,\n            .mmx,\n            .movbe,\n            .mwaitx,\n            .nopl,\n            .pclmul,\n            .popcnt,\n            .prfchw,\n            .rdpid,\n            .rdrnd,\n            .rdseed,\n            .sahf,\n            .sha,\n            .slow_shld,\n            .sse4a,\n            .vzeroupper,\n            .wbnoinvd,\n            .x87,\n            .xsave,\n            .xsavec,\n            .xsaveopt,\n            .xsaves,\n        }),\n    }","src":2987,"more_decls":null}}{"pl":"const all_features = blk: {\n    const len = @typeInfo(Feature).Enum.fields.len;\n    std.debug.assert(len <= CpuFeature.Set.needed_bit_count);\n    var result: [len]CpuFeature = undefined;\n    result[@enumToInt(Feature.@\"3dnow\")] = .{\n        .llvm_name = \"3dnow\",\n        .description = \"Enable 3DNow! instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .mmx,\n        }),\n    };\n    result[@enumToInt(Feature.@\"3dnowa\")] = .{\n        .llvm_name = \"3dnowa\",\n        .description = \"Enable 3DNow! Athlon instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .@\"3dnow\",\n        }),\n    };\n    result[@enumToInt(Feature.@\"64bit\")] = .{\n        .llvm_name = \"64bit\",\n        .description = \"Support 64-bit instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.adx)] = .{\n        .llvm_name = \"adx\",\n        .description = \"Support ADX instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.aes)] = .{\n        .llvm_name = \"aes\",\n        .description = \"Enable AES instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .sse2,\n        }),\n    };\n    result[@enumToInt(Feature.amx_bf16)] = .{\n        .llvm_name = \"amx-bf16\",\n        .description = \"Support AMX-BF16 instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .amx_tile,\n        }),\n    };\n    result[@enumToInt(Feature.amx_int8)] = .{\n        .llvm_name = \"amx-int8\",\n        .description = \"Support AMX-INT8 instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .amx_tile,\n        }),\n    };\n    result[@enumToInt(Feature.amx_tile)] = .{\n        .llvm_name = \"amx-tile\",\n        .description = \"Support AMX-TILE instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.avx)] = .{\n        .llvm_name = \"avx\",\n        .description = \"Enable AVX instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .sse4_2,\n        }),\n    };\n    result[@enumToInt(Feature.avx2)] = .{\n        .llvm_name = \"avx2\",\n        .description = \"Enable AVX2 instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx,\n        }),\n    };\n    result[@enumToInt(Feature.avx512bf16)] = .{\n        .llvm_name = \"avx512bf16\",\n        .description = \"Support bfloat16 floating point\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx512bw,\n        }),\n    };\n    result[@enumToInt(Feature.avx512bitalg)] = .{\n        .llvm_name = \"avx512bitalg\",\n        .description = \"Enable AVX-512 Bit Algorithms\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx512bw,\n        }),\n    };\n    result[@enumToInt(Feature.avx512bw)] = .{\n        .llvm_name = \"avx512bw\",\n        .description = \"Enable AVX-512 Byte and Word Instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx512f,\n        }),\n    };\n    result[@enumToInt(Feature.avx512cd)] = .{\n        .llvm_name = \"avx512cd\",\n        .description = \"Enable AVX-512 Conflict Detection Instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx512f,\n        }),\n    };\n    result[@enumToInt(Feature.avx512dq)] = .{\n        .llvm_name = \"avx512dq\",\n        .description = \"Enable AVX-512 Doubleword and Quadword Instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx512f,\n        }),\n    };\n    result[@enumToInt(Feature.avx512er)] = .{\n        .llvm_name = \"avx512er\",\n        .description = \"Enable AVX-512 Exponential and Reciprocal Instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx512f,\n        }),\n    };\n    result[@enumToInt(Feature.avx512f)] = .{\n        .llvm_name = \"avx512f\",\n        .description = \"Enable AVX-512 instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx2,\n            .f16c,\n            .fma,\n        }),\n    };\n    result[@enumToInt(Feature.avx512ifma)] = .{\n        .llvm_name = \"avx512ifma\",\n        .description = \"Enable AVX-512 Integer Fused Multiple-Add\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx512f,\n        }),\n    };\n    result[@enumToInt(Feature.avx512pf)] = .{\n        .llvm_name = \"avx512pf\",\n        .description = \"Enable AVX-512 PreFetch Instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx512f,\n        }),\n    };\n    result[@enumToInt(Feature.avx512vbmi)] = .{\n        .llvm_name = \"avx512vbmi\",\n        .description = \"Enable AVX-512 Vector Byte Manipulation Instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx512bw,\n        }),\n    };\n    result[@enumToInt(Feature.avx512vbmi2)] = .{\n        .llvm_name = \"avx512vbmi2\",\n        .description = \"Enable AVX-512 further Vector Byte Manipulation Instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx512bw,\n        }),\n    };\n    result[@enumToInt(Feature.avx512vl)] = .{\n        .llvm_name = \"avx512vl\",\n        .description = \"Enable AVX-512 Vector Length eXtensions\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx512f,\n        }),\n    };\n    result[@enumToInt(Feature.avx512vnni)] = .{\n        .llvm_name = \"avx512vnni\",\n        .description = \"Enable AVX-512 Vector Neural Network Instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx512f,\n        }),\n    };\n    result[@enumToInt(Feature.avx512vp2intersect)] = .{\n        .llvm_name = \"avx512vp2intersect\",\n        .description = \"Enable AVX-512 vp2intersect\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx512f,\n        }),\n    };\n    result[@enumToInt(Feature.avx512vpopcntdq)] = .{\n        .llvm_name = \"avx512vpopcntdq\",\n        .description = \"Enable AVX-512 Population Count Instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx512f,\n        }),\n    };\n    result[@enumToInt(Feature.bmi)] = .{\n        .llvm_name = \"bmi\",\n        .description = \"Support BMI instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.bmi2)] = .{\n        .llvm_name = \"bmi2\",\n        .description = \"Support BMI2 instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.branchfusion)] = .{\n        .llvm_name = \"branchfusion\",\n        .description = \"CMP/TEST can be fused with conditional branches\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.cldemote)] = .{\n        .llvm_name = \"cldemote\",\n        .description = \"Enable Cache Demote\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.clflushopt)] = .{\n        .llvm_name = \"clflushopt\",\n        .description = \"Flush A Cache Line Optimized\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.clwb)] = .{\n        .llvm_name = \"clwb\",\n        .description = \"Cache Line Write Back\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.clzero)] = .{\n        .llvm_name = \"clzero\",\n        .description = \"Enable Cache Line Zero\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.cmov)] = .{\n        .llvm_name = \"cmov\",\n        .description = \"Enable conditional move instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.cx16)] = .{\n        .llvm_name = \"cx16\",\n        .description = \"64-bit with cmpxchg16b\",\n        .dependencies = featureSet(&[_]Feature{\n            .cx8,\n        }),\n    };\n    result[@enumToInt(Feature.cx8)] = .{\n        .llvm_name = \"cx8\",\n        .description = \"Support CMPXCHG8B instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.enqcmd)] = .{\n        .llvm_name = \"enqcmd\",\n        .description = \"Has ENQCMD instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.ermsb)] = .{\n        .llvm_name = \"ermsb\",\n        .description = \"REP MOVS/STOS are fast\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.f16c)] = .{\n        .llvm_name = \"f16c\",\n        .description = \"Support 16-bit floating point conversion instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx,\n        }),\n    };\n    result[@enumToInt(Feature.false_deps_lzcnt_tzcnt)] = .{\n        .llvm_name = \"false-deps-lzcnt-tzcnt\",\n        .description = \"LZCNT/TZCNT have a false dependency on dest register\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.false_deps_popcnt)] = .{\n        .llvm_name = \"false-deps-popcnt\",\n        .description = \"POPCNT has a false dependency on dest register\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fast_11bytenop)] = .{\n        .llvm_name = \"fast-11bytenop\",\n        .description = \"Target can quickly decode up to 11 byte NOPs\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fast_15bytenop)] = .{\n        .llvm_name = \"fast-15bytenop\",\n        .description = \"Target can quickly decode up to 15 byte NOPs\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fast_7bytenop)] = .{\n        .llvm_name = \"fast-7bytenop\",\n        .description = \"Target can quickly decode up to 7 byte NOPs\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fast_bextr)] = .{\n        .llvm_name = \"fast-bextr\",\n        .description = \"Indicates that the BEXTR instruction is implemented as a single uop with good throughput\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fast_gather)] = .{\n        .llvm_name = \"fast-gather\",\n        .description = \"Indicates if gather is reasonably fast\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fast_hops)] = .{\n        .llvm_name = \"fast-hops\",\n        .description = \"Prefer horizontal vector math instructions (haddp, phsub, etc.) over normal vector instructions with shuffles\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fast_lzcnt)] = .{\n        .llvm_name = \"fast-lzcnt\",\n        .description = \"LZCNT instructions are as fast as most simple integer ops\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fast_scalar_fsqrt)] = .{\n        .llvm_name = \"fast-scalar-fsqrt\",\n        .description = \"Scalar SQRT is fast (disable Newton-Raphson)\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fast_scalar_shift_masks)] = .{\n        .llvm_name = \"fast-scalar-shift-masks\",\n        .description = \"Prefer a left/right scalar logical shift pair over a shift+and pair\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fast_shld_rotate)] = .{\n        .llvm_name = \"fast-shld-rotate\",\n        .description = \"SHLD can be used as a faster rotate\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fast_variable_shuffle)] = .{\n        .llvm_name = \"fast-variable-shuffle\",\n        .description = \"Shuffles with variable masks are fast\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fast_vector_fsqrt)] = .{\n        .llvm_name = \"fast-vector-fsqrt\",\n        .description = \"Vector SQRT is fast (disable Newton-Raphson)\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fast_vector_shift_masks)] = .{\n        .llvm_name = \"fast-vector-shift-masks\",\n        .description = \"Prefer a left/right vector logical shift pair over a shift+and pair\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fma)] = .{\n        .llvm_name = \"fma\",\n        .description = \"Enable three-operand fused multiple-add\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx,\n        }),\n    };\n    result[@enumToInt(Feature.fma4)] = .{\n        .llvm_name = \"fma4\",\n        .description = \"Enable four-operand fused multiple-add\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx,\n            .sse4a,\n        }),\n    };\n    result[@enumToInt(Feature.fsgsbase)] = .{\n        .llvm_name = \"fsgsbase\",\n        .description = \"Support FS/GS Base instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fxsr)] = .{\n        .llvm_name = \"fxsr\",\n        .description = \"Support fxsave/fxrestore instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.gfni)] = .{\n        .llvm_name = \"gfni\",\n        .description = \"Enable Galois Field Arithmetic Instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .sse2,\n        }),\n    };\n    result[@enumToInt(Feature.idivl_to_divb)] = .{\n        .llvm_name = \"idivl-to-divb\",\n        .description = \"Use 8-bit divide for positive values less than 256\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.idivq_to_divl)] = .{\n        .llvm_name = \"idivq-to-divl\",\n        .description = \"Use 32-bit divide for positive values less than 2^32\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.invpcid)] = .{\n        .llvm_name = \"invpcid\",\n        .description = \"Invalidate Process-Context Identifier\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.lea_sp)] = .{\n        .llvm_name = \"lea-sp\",\n        .description = \"Use LEA for adjusting the stack pointer\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.lea_uses_ag)] = .{\n        .llvm_name = \"lea-uses-ag\",\n        .description = \"LEA instruction needs inputs at AG stage\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.lvi_cfi)] = .{\n        .llvm_name = \"lvi-cfi\",\n        .description = \"Prevent indirect calls/branches from using a memory operand, and precede all indirect calls/branches from a register with an LFENCE instruction to serialize control flow. Also decompose RET instructions into a POP+LFENCE+JMP sequence.\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.lvi_load_hardening)] = .{\n        .llvm_name = \"lvi-load-hardening\",\n        .description = \"Insert LFENCE instructions to prevent data speculatively injected into loads from being used maliciously.\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.lwp)] = .{\n        .llvm_name = \"lwp\",\n        .description = \"Enable LWP instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.lzcnt)] = .{\n        .llvm_name = \"lzcnt\",\n        .description = \"Support LZCNT instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.macrofusion)] = .{\n        .llvm_name = \"macrofusion\",\n        .description = \"Various instructions can be fused with conditional branches\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.merge_to_threeway_branch)] = .{\n        .llvm_name = \"merge-to-threeway-branch\",\n        .description = \"Merge branches to a three-way conditional branch\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mmx)] = .{\n        .llvm_name = \"mmx\",\n        .description = \"Enable MMX instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.movbe)] = .{\n        .llvm_name = \"movbe\",\n        .description = \"Support MOVBE instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.movdir64b)] = .{\n        .llvm_name = \"movdir64b\",\n        .description = \"Support movdir64b instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.movdiri)] = .{\n        .llvm_name = \"movdiri\",\n        .description = \"Support movdiri instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mpx)] = .{\n        .llvm_name = \"mpx\",\n        .description = \"Deprecated. Support MPX instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mwaitx)] = .{\n        .llvm_name = \"mwaitx\",\n        .description = \"Enable MONITORX/MWAITX timer functionality\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.nopl)] = .{\n        .llvm_name = \"nopl\",\n        .description = \"Enable NOPL instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.pad_short_functions)] = .{\n        .llvm_name = \"pad-short-functions\",\n        .description = \"Pad short functions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.pclmul)] = .{\n        .llvm_name = \"pclmul\",\n        .description = \"Enable packed carry-less multiplication instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .sse2,\n        }),\n    };\n    result[@enumToInt(Feature.pconfig)] = .{\n        .llvm_name = \"pconfig\",\n        .description = \"platform configuration instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.pku)] = .{\n        .llvm_name = \"pku\",\n        .description = \"Enable protection keys\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.popcnt)] = .{\n        .llvm_name = \"popcnt\",\n        .description = \"Support POPCNT instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.prefer_128_bit)] = .{\n        .llvm_name = \"prefer-128-bit\",\n        .description = \"Prefer 128-bit AVX instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.prefer_256_bit)] = .{\n        .llvm_name = \"prefer-256-bit\",\n        .description = \"Prefer 256-bit AVX instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.prefer_mask_registers)] = .{\n        .llvm_name = \"prefer-mask-registers\",\n        .description = \"Prefer AVX512 mask registers over PTEST/MOVMSK\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.prefetchwt1)] = .{\n        .llvm_name = \"prefetchwt1\",\n        .description = \"Prefetch with Intent to Write and T1 Hint\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.prfchw)] = .{\n        .llvm_name = \"prfchw\",\n        .description = \"Support PRFCHW instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.ptwrite)] = .{\n        .llvm_name = \"ptwrite\",\n        .description = \"Support ptwrite instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.rdpid)] = .{\n        .llvm_name = \"rdpid\",\n        .description = \"Support RDPID instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.rdrnd)] = .{\n        .llvm_name = \"rdrnd\",\n        .description = \"Support RDRAND instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.rdseed)] = .{\n        .llvm_name = \"rdseed\",\n        .description = \"Support RDSEED instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.retpoline)] = .{\n        .llvm_name = \"retpoline\",\n        .description = \"Remove speculation of indirect branches from the generated code, either by avoiding them entirely or lowering them with a speculation blocking construct\",\n        .dependencies = featureSet(&[_]Feature{\n            .retpoline_indirect_branches,\n            .retpoline_indirect_calls,\n        }),\n    };\n    result[@enumToInt(Feature.retpoline_external_thunk)] = .{\n        .llvm_name = \"retpoline-external-thunk\",\n        .description = \"When lowering an indirect call or branch using a `retpoline`, rely on the specified user provided thunk rather than emitting one ourselves. Only has effect when combined with some other retpoline feature\",\n        .dependencies = featureSet(&[_]Feature{\n            .retpoline_indirect_calls,\n        }),\n    };\n    result[@enumToInt(Feature.retpoline_indirect_branches)] = .{\n        .llvm_name = \"retpoline-indirect-branches\",\n        .description = \"Remove speculation of indirect branches from the generated code\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.retpoline_indirect_calls)] = .{\n        .llvm_name = \"retpoline-indirect-calls\",\n        .description = \"Remove speculation of indirect calls from the generated code\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.rtm)] = .{\n        .llvm_name = \"rtm\",\n        .description = \"Support RTM instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.sahf)] = .{\n        .llvm_name = \"sahf\",\n        .description = \"Support LAHF and SAHF instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.serialize)] = .{\n        .llvm_name = \"serialize\",\n        .description = \"Has serialize instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.seses)] = .{\n        .llvm_name = \"seses\",\n        .description = \"Prevent speculative execution side channel timing attacks by inserting a speculation barrier before memory reads, memory writes, and conditional branches. Implies LVI Control Flow integrity.\",\n        .dependencies = featureSet(&[_]Feature{\n            .lvi_cfi,\n        }),\n    };\n    result[@enumToInt(Feature.sgx)] = .{\n        .llvm_name = \"sgx\",\n        .description = \"Enable Software Guard Extensions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.sha)] = .{\n        .llvm_name = \"sha\",\n        .description = \"Enable SHA instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .sse2,\n        }),\n    };\n    result[@enumToInt(Feature.shstk)] = .{\n        .llvm_name = \"shstk\",\n        .description = \"Support CET Shadow-Stack instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.slow_3ops_lea)] = .{\n        .llvm_name = \"slow-3ops-lea\",\n        .description = \"LEA instruction with 3 ops or certain registers is slow\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.slow_incdec)] = .{\n        .llvm_name = \"slow-incdec\",\n        .description = \"INC and DEC instructions are slower than ADD and SUB\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.slow_lea)] = .{\n        .llvm_name = \"slow-lea\",\n        .description = \"LEA instruction with certain arguments is slow\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.slow_pmaddwd)] = .{\n        .llvm_name = \"slow-pmaddwd\",\n        .description = \"PMADDWD is slower than PMULLD\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.slow_pmulld)] = .{\n        .llvm_name = \"slow-pmulld\",\n        .description = \"PMULLD instruction is slow\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.slow_shld)] = .{\n        .llvm_name = \"slow-shld\",\n        .description = \"SHLD instruction is slow\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.slow_two_mem_ops)] = .{\n        .llvm_name = \"slow-two-mem-ops\",\n        .description = \"Two memory operand instructions are slow\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.slow_unaligned_mem_16)] = .{\n        .llvm_name = \"slow-unaligned-mem-16\",\n        .description = \"Slow unaligned 16-byte memory access\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.slow_unaligned_mem_32)] = .{\n        .llvm_name = \"slow-unaligned-mem-32\",\n        .description = \"Slow unaligned 32-byte memory access\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.soft_float)] = .{\n        .llvm_name = \"soft-float\",\n        .description = \"Use software floating point features\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.sse)] = .{\n        .llvm_name = \"sse\",\n        .description = \"Enable SSE instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.sse_unaligned_mem)] = .{\n        .llvm_name = \"sse-unaligned-mem\",\n        .description = \"Allow unaligned memory operands with SSE instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.sse2)] = .{\n        .llvm_name = \"sse2\",\n        .description = \"Enable SSE2 instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .sse,\n        }),\n    };\n    result[@enumToInt(Feature.sse3)] = .{\n        .llvm_name = \"sse3\",\n        .description = \"Enable SSE3 instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .sse2,\n        }),\n    };\n    result[@enumToInt(Feature.sse4_1)] = .{\n        .llvm_name = \"sse4.1\",\n        .description = \"Enable SSE 4.1 instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .ssse3,\n        }),\n    };\n    result[@enumToInt(Feature.sse4_2)] = .{\n        .llvm_name = \"sse4.2\",\n        .description = \"Enable SSE 4.2 instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .sse4_1,\n        }),\n    };\n    result[@enumToInt(Feature.sse4a)] = .{\n        .llvm_name = \"sse4a\",\n        .description = \"Support SSE 4a instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .sse3,\n        }),\n    };\n    result[@enumToInt(Feature.ssse3)] = .{\n        .llvm_name = \"ssse3\",\n        .description = \"Enable SSSE3 instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .sse3,\n        }),\n    };\n    result[@enumToInt(Feature.tbm)] = .{\n        .llvm_name = \"tbm\",\n        .description = \"Enable TBM instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.tsxldtrk)] = .{\n        .llvm_name = \"tsxldtrk\",\n        .description = \"Support TSXLDTRK instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.use_aa)] = .{\n        .llvm_name = \"use-aa\",\n        .description = \"Use alias analysis during codegen\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.use_glm_div_sqrt_costs)] = .{\n        .llvm_name = \"use-glm-div-sqrt-costs\",\n        .description = \"Use Goldmont specific floating point div/sqrt costs\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.vaes)] = .{\n        .llvm_name = \"vaes\",\n        .description = \"Promote selected AES instructions to AVX512/AVX registers\",\n        .dependencies = featureSet(&[_]Feature{\n            .aes,\n            .avx,\n        }),\n    };\n    result[@enumToInt(Feature.vpclmulqdq)] = .{\n        .llvm_name = \"vpclmulqdq\",\n        .description = \"Enable vpclmulqdq instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .avx,\n            .pclmul,\n        }),\n    };\n    result[@enumToInt(Feature.vzeroupper)] = .{\n        .llvm_name = \"vzeroupper\",\n        .description = \"Should insert vzeroupper instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.waitpkg)] = .{\n        .llvm_name = \"waitpkg\",\n        .description = \"Wait and pause enhancements\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.wbnoinvd)] = .{\n        .llvm_name = \"wbnoinvd\",\n        .description = \"Write Back No Invalidate\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.x87)] = .{\n        .llvm_name = \"x87\",\n        .description = \"Enable X87 float instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.xop)] = .{\n        .llvm_name = \"xop\",\n        .description = \"Enable XOP instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .fma4,\n        }),\n    };\n    result[@enumToInt(Feature.xsave)] = .{\n        .llvm_name = \"xsave\",\n        .description = \"Support xsave instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.xsavec)] = .{\n        .llvm_name = \"xsavec\",\n        .description = \"Support xsavec instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .xsave,\n        }),\n    };\n    result[@enumToInt(Feature.xsaveopt)] = .{\n        .llvm_name = \"xsaveopt\",\n        .description = \"Support xsaveopt instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .xsave,\n        }),\n    };\n    result[@enumToInt(Feature.xsaves)] = .{\n        .llvm_name = \"xsaves\",\n        .description = \"Support xsaves instructions\",\n        .dependencies = featureSet(&[_]Feature{\n            .xsave,\n        }),\n    };\n    const ti = @typeInfo(Feature);\n    for (result) |*elem, i| {\n        elem.index = i;\n        elem.name = ti.Enum.fields[i].name;\n    }\n    break :blk result;\n}","src":148,"more_decls":null}]