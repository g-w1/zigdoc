[{"pl":"pub const Feature = enum ","src":9,"more_decls":{"pl":"atomics","src":10,"more_decls":null}{"pl":"bulk_memory","src":11,"more_decls":null}{"pl":"exception_handling","src":12,"more_decls":null}{"pl":"multivalue","src":13,"more_decls":null}{"pl":"mutable_globals","src":14,"more_decls":null}{"pl":"nontrapping_fptoint","src":15,"more_decls":null}{"pl":"reference_types","src":16,"more_decls":null}{"pl":"sign_ext","src":17,"more_decls":null}{"pl":"simd128","src":18,"more_decls":null}{"pl":"tail_call","src":19,"more_decls":null}{"pl":"unimplemented_simd128","src":20,"more_decls":null}}{"pl":"pub const cpu = struct ","src":94,"more_decls":{"pl":"const bleeding_edge = CpuModel{\n        .name = \"bleeding_edge\",\n        .llvm_name = \"bleeding-edge\",\n        .features = featureSet(&[_]Feature{\n            .atomics,\n            .bulk_memory,\n            .mutable_globals,\n            .nontrapping_fptoint,\n            .sign_ext,\n            .simd128,\n            .tail_call,\n        }),\n    }","src":95,"more_decls":null}{"pl":"const generic = CpuModel{\n        .name = \"generic\",\n        .llvm_name = \"generic\",\n        .features = featureSet(&[_]Feature{}),\n    }","src":108,"more_decls":null}{"pl":"const mvp = CpuModel{\n        .name = \"mvp\",\n        .llvm_name = \"mvp\",\n        .features = featureSet(&[_]Feature{}),\n    }","src":113,"more_decls":null}}{"pl":"const all_features = blk: {\n    const len = @typeInfo(Feature).Enum.fields.len;\n    std.debug.assert(len <= CpuFeature.Set.needed_bit_count);\n    var result: [len]CpuFeature = undefined;\n    result[@enumToInt(Feature.atomics)] = .{\n        .llvm_name = \"atomics\",\n        .description = \"Enable Atomics\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.bulk_memory)] = .{\n        .llvm_name = \"bulk-memory\",\n        .description = \"Enable bulk memory operations\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.exception_handling)] = .{\n        .llvm_name = \"exception-handling\",\n        .description = \"Enable Wasm exception handling\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.multivalue)] = .{\n        .llvm_name = \"multivalue\",\n        .description = \"Enable multivalue blocks, instructions, and functions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mutable_globals)] = .{\n        .llvm_name = \"mutable-globals\",\n        .description = \"Enable mutable globals\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.nontrapping_fptoint)] = .{\n        .llvm_name = \"nontrapping-fptoint\",\n        .description = \"Enable non-trapping float-to-int conversion operators\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.reference_types)] = .{\n        .llvm_name = \"reference-types\",\n        .description = \"Enable reference types\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.sign_ext)] = .{\n        .llvm_name = \"sign-ext\",\n        .description = \"Enable sign extension operators\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.simd128)] = .{\n        .llvm_name = \"simd128\",\n        .description = \"Enable 128-bit SIMD\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.tail_call)] = .{\n        .llvm_name = \"tail-call\",\n        .description = \"Enable tail call instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.unimplemented_simd128)] = .{\n        .llvm_name = \"unimplemented-simd128\",\n        .description = \"Enable 128-bit SIMD not yet implemented in engines\",\n        .dependencies = featureSet(&[_]Feature{\n            .simd128,\n        }),\n    };\n    const ti = @typeInfo(Feature);\n    for (result) |*elem, i| {\n        elem.index = i;\n        elem.name = ti.Enum.fields[i].name;\n    }\n    break :blk result;\n}","src":25,"more_decls":null}]