[{"pl":"pub const Feature = enum ","src":9,"more_decls":{"pl":"abs2008","src":10,"more_decls":null}{"pl":"cnmips","src":11,"more_decls":null}{"pl":"cnmipsp","src":12,"more_decls":null}{"pl":"crc","src":13,"more_decls":null}{"pl":"dsp","src":14,"more_decls":null}{"pl":"dspr2","src":15,"more_decls":null}{"pl":"dspr3","src":16,"more_decls":null}{"pl":"eva","src":17,"more_decls":null}{"pl":"fp64","src":18,"more_decls":null}{"pl":"fpxx","src":19,"more_decls":null}{"pl":"ginv","src":20,"more_decls":null}{"pl":"gp64","src":21,"more_decls":null}{"pl":"long_calls","src":22,"more_decls":null}{"pl":"micromips","src":23,"more_decls":null}{"pl":"mips1","src":24,"more_decls":null}{"pl":"mips16","src":25,"more_decls":null}{"pl":"mips2","src":26,"more_decls":null}{"pl":"mips3","src":27,"more_decls":null}{"pl":"mips32","src":28,"more_decls":null}{"pl":"mips32r2","src":29,"more_decls":null}{"pl":"mips32r3","src":30,"more_decls":null}{"pl":"mips32r5","src":31,"more_decls":null}{"pl":"mips32r6","src":32,"more_decls":null}{"pl":"mips3_32","src":33,"more_decls":null}{"pl":"mips3_32r2","src":34,"more_decls":null}{"pl":"mips3d","src":35,"more_decls":null}{"pl":"mips4","src":36,"more_decls":null}{"pl":"mips4_32","src":37,"more_decls":null}{"pl":"mips4_32r2","src":38,"more_decls":null}{"pl":"mips5","src":39,"more_decls":null}{"pl":"mips5_32r2","src":40,"more_decls":null}{"pl":"mips64","src":41,"more_decls":null}{"pl":"mips64r2","src":42,"more_decls":null}{"pl":"mips64r3","src":43,"more_decls":null}{"pl":"mips64r5","src":44,"more_decls":null}{"pl":"mips64r6","src":45,"more_decls":null}{"pl":"msa","src":46,"more_decls":null}{"pl":"mt","src":47,"more_decls":null}{"pl":"nan2008","src":48,"more_decls":null}{"pl":"noabicalls","src":49,"more_decls":null}{"pl":"nomadd4","src":50,"more_decls":null}{"pl":"nooddspreg","src":51,"more_decls":null}{"pl":"p5600","src":52,"more_decls":null}{"pl":"ptr64","src":53,"more_decls":null}{"pl":"single_float","src":54,"more_decls":null}{"pl":"soft_float","src":55,"more_decls":null}{"pl":"sym32","src":56,"more_decls":null}{"pl":"use_indirect_jump_hazard","src":57,"more_decls":null}{"pl":"use_tcc_in_div","src":58,"more_decls":null}{"pl":"vfpu","src":59,"more_decls":null}{"pl":"virt","src":60,"more_decls":null}{"pl":"xgot","src":61,"more_decls":null}}{"pl":"pub const cpu = struct ","src":399,"more_decls":{"pl":"const generic = CpuModel{\n        .name = \"generic\",\n        .llvm_name = \"generic\",\n        .features = featureSet(&[_]Feature{\n            .mips32,\n        }),\n    }","src":400,"more_decls":null}{"pl":"const mips1 = CpuModel{\n        .name = \"mips1\",\n        .llvm_name = \"mips1\",\n        .features = featureSet(&[_]Feature{\n            .mips1,\n        }),\n    }","src":407,"more_decls":null}{"pl":"const mips2 = CpuModel{\n        .name = \"mips2\",\n        .llvm_name = \"mips2\",\n        .features = featureSet(&[_]Feature{\n            .mips2,\n        }),\n    }","src":414,"more_decls":null}{"pl":"const mips3 = CpuModel{\n        .name = \"mips3\",\n        .llvm_name = \"mips3\",\n        .features = featureSet(&[_]Feature{\n            .mips3,\n        }),\n    }","src":421,"more_decls":null}{"pl":"const mips32 = CpuModel{\n        .name = \"mips32\",\n        .llvm_name = \"mips32\",\n        .features = featureSet(&[_]Feature{\n            .mips32,\n        }),\n    }","src":428,"more_decls":null}{"pl":"const mips32r2 = CpuModel{\n        .name = \"mips32r2\",\n        .llvm_name = \"mips32r2\",\n        .features = featureSet(&[_]Feature{\n            .mips32r2,\n        }),\n    }","src":435,"more_decls":null}{"pl":"const mips32r3 = CpuModel{\n        .name = \"mips32r3\",\n        .llvm_name = \"mips32r3\",\n        .features = featureSet(&[_]Feature{\n            .mips32r3,\n        }),\n    }","src":442,"more_decls":null}{"pl":"const mips32r5 = CpuModel{\n        .name = \"mips32r5\",\n        .llvm_name = \"mips32r5\",\n        .features = featureSet(&[_]Feature{\n            .mips32r5,\n        }),\n    }","src":449,"more_decls":null}{"pl":"const mips32r6 = CpuModel{\n        .name = \"mips32r6\",\n        .llvm_name = \"mips32r6\",\n        .features = featureSet(&[_]Feature{\n            .mips32r6,\n        }),\n    }","src":456,"more_decls":null}{"pl":"const mips4 = CpuModel{\n        .name = \"mips4\",\n        .llvm_name = \"mips4\",\n        .features = featureSet(&[_]Feature{\n            .mips4,\n        }),\n    }","src":463,"more_decls":null}{"pl":"const mips5 = CpuModel{\n        .name = \"mips5\",\n        .llvm_name = \"mips5\",\n        .features = featureSet(&[_]Feature{\n            .mips5,\n        }),\n    }","src":470,"more_decls":null}{"pl":"const mips64 = CpuModel{\n        .name = \"mips64\",\n        .llvm_name = \"mips64\",\n        .features = featureSet(&[_]Feature{\n            .mips64,\n        }),\n    }","src":477,"more_decls":null}{"pl":"const mips64r2 = CpuModel{\n        .name = \"mips64r2\",\n        .llvm_name = \"mips64r2\",\n        .features = featureSet(&[_]Feature{\n            .mips64r2,\n        }),\n    }","src":484,"more_decls":null}{"pl":"const mips64r3 = CpuModel{\n        .name = \"mips64r3\",\n        .llvm_name = \"mips64r3\",\n        .features = featureSet(&[_]Feature{\n            .mips64r3,\n        }),\n    }","src":491,"more_decls":null}{"pl":"const mips64r5 = CpuModel{\n        .name = \"mips64r5\",\n        .llvm_name = \"mips64r5\",\n        .features = featureSet(&[_]Feature{\n            .mips64r5,\n        }),\n    }","src":498,"more_decls":null}{"pl":"const mips64r6 = CpuModel{\n        .name = \"mips64r6\",\n        .llvm_name = \"mips64r6\",\n        .features = featureSet(&[_]Feature{\n            .mips64r6,\n        }),\n    }","src":505,"more_decls":null}{"pl":"const octeon = CpuModel{\n        .name = \"octeon\",\n        .llvm_name = \"octeon\",\n        .features = featureSet(&[_]Feature{\n            .cnmips,\n            .mips64r2,\n        }),\n    }","src":512,"more_decls":null}{"pl":"const @\"octeon+\" = CpuModel{\n        .name = \"octeon+\",\n        .llvm_name = \"octeon+\",\n        .features = featureSet(&[_]Feature{\n            .cnmips,\n            .cnmipsp,\n            .mips64r2,\n        }),\n    }","src":520,"more_decls":null}{"pl":"const p5600 = CpuModel{\n        .name = \"p5600\",\n        .llvm_name = \"p5600\",\n        .features = featureSet(&[_]Feature{\n            .p5600,\n        }),\n    }","src":529,"more_decls":null}}{"pl":"const all_features = blk: {\n    const len = @typeInfo(Feature).Enum.fields.len;\n    std.debug.assert(len <= CpuFeature.Set.needed_bit_count);\n    var result: [len]CpuFeature = undefined;\n    result[@enumToInt(Feature.abs2008)] = .{\n        .llvm_name = \"abs2008\",\n        .description = \"Disable IEEE 754-2008 abs.fmt mode\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.cnmips)] = .{\n        .llvm_name = \"cnmips\",\n        .description = \"Octeon cnMIPS Support\",\n        .dependencies = featureSet(&[_]Feature{\n            .mips64r2,\n        }),\n    };\n    result[@enumToInt(Feature.cnmipsp)] = .{\n        .llvm_name = \"cnmipsp\",\n        .description = \"Octeon+ cnMIPS Support\",\n        .dependencies = featureSet(&[_]Feature{\n            .cnmips,\n        }),\n    };\n    result[@enumToInt(Feature.crc)] = .{\n        .llvm_name = \"crc\",\n        .description = \"Mips R6 CRC ASE\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.dsp)] = .{\n        .llvm_name = \"dsp\",\n        .description = \"Mips DSP ASE\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.dspr2)] = .{\n        .llvm_name = \"dspr2\",\n        .description = \"Mips DSP-R2 ASE\",\n        .dependencies = featureSet(&[_]Feature{\n            .dsp,\n        }),\n    };\n    result[@enumToInt(Feature.dspr3)] = .{\n        .llvm_name = \"dspr3\",\n        .description = \"Mips DSP-R3 ASE\",\n        .dependencies = featureSet(&[_]Feature{\n            .dsp,\n            .dspr2,\n        }),\n    };\n    result[@enumToInt(Feature.eva)] = .{\n        .llvm_name = \"eva\",\n        .description = \"Mips EVA ASE\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fp64)] = .{\n        .llvm_name = \"fp64\",\n        .description = \"Support 64-bit FP registers\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.fpxx)] = .{\n        .llvm_name = \"fpxx\",\n        .description = \"Support for FPXX\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.ginv)] = .{\n        .llvm_name = \"ginv\",\n        .description = \"Mips Global Invalidate ASE\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.gp64)] = .{\n        .llvm_name = \"gp64\",\n        .description = \"General Purpose Registers are 64-bit wide\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.long_calls)] = .{\n        .llvm_name = \"long-calls\",\n        .description = \"Disable use of the jal instruction\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.micromips)] = .{\n        .llvm_name = \"micromips\",\n        .description = \"microMips mode\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mips1)] = .{\n        .llvm_name = \"mips1\",\n        .description = \"Mips I ISA Support [highly experimental]\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mips16)] = .{\n        .llvm_name = \"mips16\",\n        .description = \"Mips16 mode\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mips2)] = .{\n        .llvm_name = \"mips2\",\n        .description = \"Mips II ISA Support [highly experimental]\",\n        .dependencies = featureSet(&[_]Feature{\n            .mips1,\n        }),\n    };\n    result[@enumToInt(Feature.mips3)] = .{\n        .llvm_name = \"mips3\",\n        .description = \"MIPS III ISA Support [highly experimental]\",\n        .dependencies = featureSet(&[_]Feature{\n            .fp64,\n            .gp64,\n            .mips2,\n            .mips3_32,\n            .mips3_32r2,\n        }),\n    };\n    result[@enumToInt(Feature.mips32)] = .{\n        .llvm_name = \"mips32\",\n        .description = \"Mips32 ISA Support\",\n        .dependencies = featureSet(&[_]Feature{\n            .mips2,\n            .mips3_32,\n            .mips4_32,\n        }),\n    };\n    result[@enumToInt(Feature.mips32r2)] = .{\n        .llvm_name = \"mips32r2\",\n        .description = \"Mips32r2 ISA Support\",\n        .dependencies = featureSet(&[_]Feature{\n            .mips32,\n            .mips3_32r2,\n            .mips4_32r2,\n            .mips5_32r2,\n        }),\n    };\n    result[@enumToInt(Feature.mips32r3)] = .{\n        .llvm_name = \"mips32r3\",\n        .description = \"Mips32r3 ISA Support\",\n        .dependencies = featureSet(&[_]Feature{\n            .mips32r2,\n        }),\n    };\n    result[@enumToInt(Feature.mips32r5)] = .{\n        .llvm_name = \"mips32r5\",\n        .description = \"Mips32r5 ISA Support\",\n        .dependencies = featureSet(&[_]Feature{\n            .mips32r3,\n        }),\n    };\n    result[@enumToInt(Feature.mips32r6)] = .{\n        .llvm_name = \"mips32r6\",\n        .description = \"Mips32r6 ISA Support [experimental]\",\n        .dependencies = featureSet(&[_]Feature{\n            .abs2008,\n            .fp64,\n            .mips32r5,\n            .nan2008,\n        }),\n    };\n    result[@enumToInt(Feature.mips3_32)] = .{\n        .llvm_name = \"mips3_32\",\n        .description = \"Subset of MIPS-III that is also in MIPS32 [highly experimental]\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mips3_32r2)] = .{\n        .llvm_name = \"mips3_32r2\",\n        .description = \"Subset of MIPS-III that is also in MIPS32r2 [highly experimental]\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mips3d)] = .{\n        .llvm_name = \"mips3d\",\n        .description = \"Mips 3D ASE\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mips4)] = .{\n        .llvm_name = \"mips4\",\n        .description = \"MIPS IV ISA Support\",\n        .dependencies = featureSet(&[_]Feature{\n            .mips3,\n            .mips4_32,\n            .mips4_32r2,\n        }),\n    };\n    result[@enumToInt(Feature.mips4_32)] = .{\n        .llvm_name = \"mips4_32\",\n        .description = \"Subset of MIPS-IV that is also in MIPS32 [highly experimental]\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mips4_32r2)] = .{\n        .llvm_name = \"mips4_32r2\",\n        .description = \"Subset of MIPS-IV that is also in MIPS32r2 [highly experimental]\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mips5)] = .{\n        .llvm_name = \"mips5\",\n        .description = \"MIPS V ISA Support [highly experimental]\",\n        .dependencies = featureSet(&[_]Feature{\n            .mips4,\n            .mips5_32r2,\n        }),\n    };\n    result[@enumToInt(Feature.mips5_32r2)] = .{\n        .llvm_name = \"mips5_32r2\",\n        .description = \"Subset of MIPS-V that is also in MIPS32r2 [highly experimental]\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mips64)] = .{\n        .llvm_name = \"mips64\",\n        .description = \"Mips64 ISA Support\",\n        .dependencies = featureSet(&[_]Feature{\n            .mips32,\n            .mips5,\n        }),\n    };\n    result[@enumToInt(Feature.mips64r2)] = .{\n        .llvm_name = \"mips64r2\",\n        .description = \"Mips64r2 ISA Support\",\n        .dependencies = featureSet(&[_]Feature{\n            .mips32r2,\n            .mips64,\n        }),\n    };\n    result[@enumToInt(Feature.mips64r3)] = .{\n        .llvm_name = \"mips64r3\",\n        .description = \"Mips64r3 ISA Support\",\n        .dependencies = featureSet(&[_]Feature{\n            .mips32r3,\n            .mips64r2,\n        }),\n    };\n    result[@enumToInt(Feature.mips64r5)] = .{\n        .llvm_name = \"mips64r5\",\n        .description = \"Mips64r5 ISA Support\",\n        .dependencies = featureSet(&[_]Feature{\n            .mips32r5,\n            .mips64r3,\n        }),\n    };\n    result[@enumToInt(Feature.mips64r6)] = .{\n        .llvm_name = \"mips64r6\",\n        .description = \"Mips64r6 ISA Support [experimental]\",\n        .dependencies = featureSet(&[_]Feature{\n            .abs2008,\n            .mips32r6,\n            .mips64r5,\n            .nan2008,\n        }),\n    };\n    result[@enumToInt(Feature.msa)] = .{\n        .llvm_name = \"msa\",\n        .description = \"Mips MSA ASE\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.mt)] = .{\n        .llvm_name = \"mt\",\n        .description = \"Mips MT ASE\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.nan2008)] = .{\n        .llvm_name = \"nan2008\",\n        .description = \"IEEE 754-2008 NaN encoding\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.noabicalls)] = .{\n        .llvm_name = \"noabicalls\",\n        .description = \"Disable SVR4-style position-independent code\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.nomadd4)] = .{\n        .llvm_name = \"nomadd4\",\n        .description = \"Disable 4-operand madd.fmt and related instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.nooddspreg)] = .{\n        .llvm_name = \"nooddspreg\",\n        .description = \"Disable odd numbered single-precision registers\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.p5600)] = .{\n        .llvm_name = \"p5600\",\n        .description = \"The P5600 Processor\",\n        .dependencies = featureSet(&[_]Feature{\n            .mips32r5,\n        }),\n    };\n    result[@enumToInt(Feature.ptr64)] = .{\n        .llvm_name = \"ptr64\",\n        .description = \"Pointers are 64-bit wide\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.single_float)] = .{\n        .llvm_name = \"single-float\",\n        .description = \"Only supports single precision float\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.soft_float)] = .{\n        .llvm_name = \"soft-float\",\n        .description = \"Does not support floating point instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.sym32)] = .{\n        .llvm_name = \"sym32\",\n        .description = \"Symbols are 32 bit on Mips64\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.use_indirect_jump_hazard)] = .{\n        .llvm_name = \"use-indirect-jump-hazard\",\n        .description = \"Use indirect jump guards to prevent certain speculation based attacks\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.use_tcc_in_div)] = .{\n        .llvm_name = \"use-tcc-in-div\",\n        .description = \"Force the assembler to use trapping\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.vfpu)] = .{\n        .llvm_name = \"vfpu\",\n        .description = \"Enable vector FPU instructions\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.virt)] = .{\n        .llvm_name = \"virt\",\n        .description = \"Mips Virtualization ASE\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    result[@enumToInt(Feature.xgot)] = .{\n        .llvm_name = \"xgot\",\n        .description = \"Assume 32-bit GOT\",\n        .dependencies = featureSet(&[_]Feature{}),\n    };\n    const ti = @typeInfo(Feature);\n    for (result) |*elem, i| {\n        elem.index = i;\n        elem.name = ti.Enum.fields[i].name;\n    }\n    break :blk result;\n}","src":66,"more_decls":null}]