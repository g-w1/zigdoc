[{"pl":"major: usize","src":13,"more_decls":null}{"pl":"minor: usize","src":14,"more_decls":null}{"pl":"patch: usize","src":15,"more_decls":null}{"pl":"pre: ?[]const u8 = null","src":16,"more_decls":null}{"pl":"build: ?[]const u8 = null","src":17,"more_decls":null}{"pl":"pub const Range = struct ","src":19,"more_decls":{"pl":"min: Version","src":20,"more_decls":null}{"pl":"max: Version","src":21,"more_decls":null}{"pl":"pub fn includesVersion(self: Range, ver: Version) bool {\n    if (self.min.order(ver) == .gt) return false;\n    if (self.max.order(ver) == .lt) return false;\n    return true;\n}","src":23,"more_decls":null}{"doc_comment":"Checks if system is guaranteed to be at least `version` or older than `version`.\nReturns `null` if a runtime check is required.","pl":"pub fn isAtLeast(self: Range, ver: Version) ?bool {\n    if (self.min.order(ver) != .lt) return true;\n    if (self.max.order(ver) == .lt) return false;\n    return null;\n}","src":31,"more_decls":null}}{"pl":"fn order(lhs: Version, rhs: Version) std.math.Order","src":38,"more_decls":null}{"pl":"fn parse(text: []const u8) !Version","src":90,"more_decls":null}{"pl":"fn format(\n    self: Version,\n    comptime fmt: []const u8,\n    options: std.fmt.FormatOptions,\n    out_stream: anytype,\n) !void","src":158,"more_decls":null}]