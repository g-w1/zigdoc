[{"pl":"pub const NullTerminated2DArray = struct ","src":54,"more_decls":{"pl":"allocator: *mem.Allocator","src":55,"more_decls":null}{"pl":"byte_count: usize","src":56,"more_decls":null}{"pl":"ptr: ?[*:null]?[*:0]u8","src":57,"more_decls":null}{"doc_comment":"Takes N lists of strings, concatenates the lists together, and adds a null terminator\nCaller must deinit result","pl":"fn fromSlices(allocator: *mem.Allocator, slices: []const []const []const u8) !NullTerminated2DArray","src":61,"more_decls":null}{"pl":"pub fn deinit(self: *NullTerminated2DArray) void {\n    const buf = @ptrCast([*]u8, self.ptr);\n    self.allocator.free(buf[0..self.byte_count]);\n}","src":101,"more_decls":null}}{"pl":"fn cmp(a: [*:0]const u8, b: [*:0]const u8) i8","src":16,"more_decls":null}{"doc_comment":"Returns a mutable, null-terminated slice with the same length as `slice`.\nCaller owns the returned memory.","pl":"pub fn addNullByte(allocator: *mem.Allocator, slice: []const u8) ![:0]u8 {\n    const result = try allocator.alloc(u8, slice.len + 1);\n    mem.copy(u8, result, slice);\n    result[slice.len] = 0;\n    return result[0..slice.len :0];\n}","src":40,"more_decls":null}{"pl":"const line_sep = switch (builtin.os.tag) {\n    .windows => \"\\r\\n\",\n    else => \"\\n\",\n}","src":11,"more_decls":null}]