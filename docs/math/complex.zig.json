[{"doc_comment":"A complex number consisting of a real an imaginary part. T must be a floating-point value.","pl":"fn Complex(comptime T: type) type","sub_container_type":"struct ","src":31,"more_decls":{"doc_comment":"Real part.","pl":"re: T","src":36,"more_decls":null}{"doc_comment":"Imaginary part.","pl":"im: T","src":39,"more_decls":null}{"doc_comment":"Create a new Complex number from the given real and imaginary parts.","pl":"pub fn new(re: T, im: T) Self {\n    return Self{\n        .re = re,\n        .im = im,\n    };\n}","src":42,"more_decls":null}{"doc_comment":"Returns the sum of two complex numbers.","pl":"pub fn add(self: Self, other: Self) Self {\n    return Self{\n        .re = self.re + other.re,\n        .im = self.im + other.im,\n    };\n}","src":50,"more_decls":null}{"doc_comment":"Returns the subtraction of two complex numbers.","pl":"pub fn sub(self: Self, other: Self) Self {\n    return Self{\n        .re = self.re - other.re,\n        .im = self.im - other.im,\n    };\n}","src":58,"more_decls":null}{"doc_comment":"Returns the product of two complex numbers.","pl":"pub fn mul(self: Self, other: Self) Self {\n    return Self{\n        .re = self.re * other.re - self.im * other.im,\n        .im = self.im * other.re + self.re * other.im,\n    };\n}","src":66,"more_decls":null}{"doc_comment":"Returns the quotient of two complex numbers.","pl":"fn div(self: Self, other: Self) Self","src":74,"more_decls":null}{"doc_comment":"Returns the complex conjugate of a number.","pl":"pub fn conjugate(self: Self) Self {\n    return Self{\n        .re = self.re,\n        .im = -self.im,\n    };\n}","src":86,"more_decls":null}{"doc_comment":"Returns the reciprocal of a complex number.","pl":"fn reciprocal(self: Self) Self","src":94,"more_decls":null}{"doc_comment":"Returns the magnitude of a complex number.","pl":"pub fn magnitude(self: Self) T {\n    return math.sqrt(self.re * self.re + self.im * self.im);\n}","src":103,"more_decls":null}}{"pl":"const abs = @import(\"complex/abs.zig\").abs","src":9,"more_decls":null}{"pl":"const acosh = @import(\"complex/acosh.zig\").acosh","src":10,"more_decls":null}{"pl":"const acos = @import(\"complex/acos.zig\").acos","src":11,"more_decls":null}{"pl":"const arg = @import(\"complex/arg.zig\").arg","src":12,"more_decls":null}{"pl":"const asinh = @import(\"complex/asinh.zig\").asinh","src":13,"more_decls":null}{"pl":"const asin = @import(\"complex/asin.zig\").asin","src":14,"more_decls":null}{"pl":"const atanh = @import(\"complex/atanh.zig\").atanh","src":15,"more_decls":null}{"pl":"const atan = @import(\"complex/atan.zig\").atan","src":16,"more_decls":null}{"pl":"const conj = @import(\"complex/conj.zig\").conj","src":17,"more_decls":null}{"pl":"const cosh = @import(\"complex/cosh.zig\").cosh","src":18,"more_decls":null}{"pl":"const cos = @import(\"complex/cos.zig\").cos","src":19,"more_decls":null}{"pl":"const exp = @import(\"complex/exp.zig\").exp","src":20,"more_decls":null}{"pl":"const log = @import(\"complex/log.zig\").log","src":21,"more_decls":null}{"pl":"const pow = @import(\"complex/pow.zig\").pow","src":22,"more_decls":null}{"pl":"const proj = @import(\"complex/proj.zig\").proj","src":23,"more_decls":null}{"pl":"const sinh = @import(\"complex/sinh.zig\").sinh","src":24,"more_decls":null}{"pl":"const sin = @import(\"complex/sin.zig\").sin","src":25,"more_decls":null}{"pl":"const sqrt = @import(\"complex/sqrt.zig\").sqrt","src":26,"more_decls":null}{"pl":"const tanh = @import(\"complex/tanh.zig\").tanh","src":27,"more_decls":null}{"pl":"const tan = @import(\"complex/tan.zig\").tan","src":28,"more_decls":null}]