[{"pl":"pub const Level = enum ","src":80,"more_decls":{"doc_comment":"Emergency: a condition that cannot be handled, usually followed by a\npanic.","pl":"emerg","src":83,"more_decls":null}{"doc_comment":"Alert: a condition that should be corrected immediately (e.g. database\ncorruption).","pl":"alert","src":86,"more_decls":null}{"doc_comment":"Critical: A bug has been detected or something has gone wrong and it\nwill have an effect on the operation of the program.","pl":"crit","src":89,"more_decls":null}{"doc_comment":"Error: A bug has been detected or something has gone wrong but it is\nrecoverable.","pl":"err","src":92,"more_decls":null}{"doc_comment":"Warning: it is uncertain if something has gone wrong or not, but the\ncircumstances would be worth investigating.","pl":"warn","src":95,"more_decls":null}{"doc_comment":"Notice: non-error but significant conditions.","pl":"notice","src":97,"more_decls":null}{"doc_comment":"Informational: general messages about the state of the program.","pl":"info","src":99,"more_decls":null}{"doc_comment":"Debug: messages only useful for debugging.","pl":"debug","src":101,"more_decls":null}}{"doc_comment":"Returns a scoped logging namespace that logs all messages using the scope\nprovided here.","pl":"fn scoped(comptime scope: @Type(.EnumLiteral)) type","sub_container_type":"struct ","src":154,"more_decls":{"doc_comment":"Log an emergency message. This log level is intended to be used\nfor conditions that cannot be handled and is usually followed by a panic.","pl":"fn emerg(\n    comptime format: []const u8,\n    args: anytype,\n) void","src":158,"more_decls":null}{"doc_comment":"Log an alert message. This log level is intended to be used for\nconditions that should be corrected immediately (e.g. database corruption).","pl":"fn alert(\n    comptime format: []const u8,\n    args: anytype,\n) void","src":168,"more_decls":null}{"doc_comment":"Log a critical message. This log level is intended to be used\nwhen a bug has been detected or something has gone wrong and it will have\nan effect on the operation of the program.","pl":"fn crit(\n    comptime format: []const u8,\n    args: anytype,\n) void","src":179,"more_decls":null}{"doc_comment":"Log an error message. This log level is intended to be used when\na bug has been detected or something has gone wrong but it is recoverable.","pl":"fn err(\n    comptime format: []const u8,\n    args: anytype,\n) void","src":189,"more_decls":null}{"doc_comment":"Log a warning message. This log level is intended to be used if\nit is uncertain whether something has gone wrong or not, but the\ncircumstances would be worth investigating.","pl":"pub fn warn(\n    comptime format: []const u8,\n    args: anytype,\n) void {\n    log(.warn, scope, format, args);\n}","src":200,"more_decls":null}{"doc_comment":"Log a notice message. This log level is intended to be used for\nnon-error but significant conditions.","pl":"pub fn notice(\n    comptime format: []const u8,\n    args: anytype,\n) void {\n    log(.notice, scope, format, args);\n}","src":209,"more_decls":null}{"doc_comment":"Log an info message. This log level is intended to be used for\ngeneral messages about the state of the program.","pl":"pub fn info(\n    comptime format: []const u8,\n    args: anytype,\n) void {\n    log(.info, scope, format, args);\n}","src":218,"more_decls":null}{"doc_comment":"Log a debug message. This log level is intended to be used for\nmessages which are only useful for debugging.","pl":"pub fn debug(\n    comptime format: []const u8,\n    args: anytype,\n) void {\n    log(.debug, scope, format, args);\n}","src":227,"more_decls":null}}{"doc_comment":"The default log level is based on build mode.","pl":"const default_level: Level = switch (builtin.mode) {\n    .Debug => .debug,\n    .ReleaseSafe => .notice,\n    .ReleaseFast => .err,\n    .ReleaseSmall => .err,\n}","src":105,"more_decls":null}{"doc_comment":"The current log level. This is set to root.log_level if present, otherwise\nlog.default_level.","pl":"const level: Level = if (@hasDecl(root, \"log_level\"))\n    root.log_level\nelse\n    default_level","src":114,"more_decls":null}{"doc_comment":"The default scoped logging namespace.","pl":"const default = scoped(.default)","src":237,"more_decls":null}{"doc_comment":"Log an emergency message using the default scope. This log level is\nintended to be used for conditions that cannot be handled and is usually\nfollowed by a panic.","pl":"const emerg = default.emerg","src":242,"more_decls":null}{"doc_comment":"Log an alert message using the default scope. This log level is intended to\nbe used for conditions that should be corrected immediately (e.g. database\ncorruption).","pl":"const alert = default.alert","src":247,"more_decls":null}{"doc_comment":"Log a critical message using the default scope. This log level is intended\nto be used when a bug has been detected or something has gone wrong and it\nwill have an effect on the operation of the program.","pl":"const crit = default.crit","src":252,"more_decls":null}{"doc_comment":"Log an error message using the default scope. This log level is intended to\nbe used when a bug has been detected or something has gone wrong but it is\nrecoverable.","pl":"const err = default.err","src":257,"more_decls":null}{"doc_comment":"Log a warning message using the default scope. This log level is intended\nto be used if it is uncertain whether something has gone wrong or not, but\nthe circumstances would be worth investigating.","pl":"const warn = default.warn","src":262,"more_decls":null}{"doc_comment":"Log a notice message using the default scope. This log level is intended to\nbe used for non-error but significant conditions.","pl":"const notice = default.notice","src":266,"more_decls":null}{"doc_comment":"Log an info message using the default scope. This log level is intended to\nbe used for general messages about the state of the program.","pl":"const info = default.info","src":270,"more_decls":null}{"doc_comment":"Log a debug message using the default scope. This log level is intended to\nbe used for messages which are only useful for debugging.","pl":"const debug = default.debug","src":274,"more_decls":null}]