[{"pl":"pub const RunStep = struct ","src":21,"more_decls":{"pl":"step: Step","src":22,"more_decls":null}{"pl":"builder: *Builder","src":23,"more_decls":null}{"doc_comment":"See also addArg and addArgs to modifying this directly","pl":"argv: ArrayList(Arg)","src":26,"more_decls":null}{"doc_comment":"Set this to modify the current working directory","pl":"cwd: ?[]const u8","src":29,"more_decls":null}{"doc_comment":"Override this field to modify the environment, or use setEnvironmentVariable","pl":"env_map: ?*BufMap","src":32,"more_decls":null}{"pl":"stdout_action: StdIoAction = .inherit","src":34,"more_decls":null}{"pl":"stderr_action: StdIoAction = .inherit","src":35,"more_decls":null}{"pl":"stdin_behavior: std.ChildProcess.StdIo = .Inherit","src":37,"more_decls":null}{"pl":"expected_exit_code: u8 = 0","src":39,"more_decls":null}{"pl":"pub const StdIoAction = union(enum) ","src":41,"more_decls":{"pl":"inherit","src":42,"more_decls":null}{"pl":"ignore","src":43,"more_decls":null}{"pl":"expect_exact: []const u8","src":44,"more_decls":null}{"pl":"expect_matches: []const []const u8","src":45,"more_decls":null}}{"pl":"pub const Arg = union(enum) ","src":48,"more_decls":{"pl":"Artifact: *LibExeObjStep","src":49,"more_decls":null}{"pl":"WriteFile: struct {\n            step: *WriteFileStep,\n            file_name: []const u8,\n        }","src":50,"more_decls":null}{"pl":"Bytes: []u8","src":54,"more_decls":null}}{"pl":"fn create(builder: *Builder, name: []const u8) *RunStep","src":57,"more_decls":null}{"pl":"pub fn addArtifactArg(self: *RunStep, artifact: *LibExeObjStep) void {\n    self.argv.append(Arg{ .Artifact = artifact }) catch unreachable;\n    self.step.dependOn(&artifact.step);\n}","src":69,"more_decls":null}{"pl":"fn addWriteFileArg(self: *RunStep, write_file: *WriteFileStep, file_name: []const u8) void","src":74,"more_decls":null}{"pl":"pub fn addArg(self: *RunStep, arg: []const u8) void {\n    self.argv.append(Arg{ .Bytes = self.builder.dupe(arg) }) catch unreachable;\n}","src":84,"more_decls":null}{"pl":"pub fn addArgs(self: *RunStep, args: []const []const u8) void {\n    for (args) |arg| {\n        self.addArg(arg);\n    }\n}","src":88,"more_decls":null}{"pl":"pub fn clearEnvironment(self: *RunStep) void {\n    const new_env_map = self.builder.allocator.create(BufMap) catch unreachable;\n    new_env_map.* = BufMap.init(self.builder.allocator);\n    self.env_map = new_env_map;\n}","src":94,"more_decls":null}{"pl":"fn addPathDir(self: *RunStep, search_path: []const u8) void","src":100,"more_decls":null}{"pl":"fn getEnvMap(self: *RunStep) *BufMap","src":125,"more_decls":null}{"pl":"fn setEnvironmentVariable(self: *RunStep, key: []const u8, value: []const u8) void","src":134,"more_decls":null}{"pl":"pub fn expectStdErrEqual(self: *RunStep, bytes: []const u8) void {\n    self.stderr_action = .{ .expect_exact = self.builder.dupe(bytes) };\n}","src":142,"more_decls":null}{"pl":"pub fn expectStdOutEqual(self: *RunStep, bytes: []const u8) void {\n    self.stdout_action = .{ .expect_exact = self.builder.dupe(bytes) };\n}","src":146,"more_decls":null}}]