[{"pl":"pub const BufSet = struct ","src":11,"more_decls":{"pl":"hash_map: BufSetHashMap","src":12,"more_decls":null}{"pl":"pub fn init(a: *Allocator) BufSet {\n    var self = BufSet{ .hash_map = BufSetHashMap.init(a) };\n    return self;\n}","src":16,"more_decls":null}{"pl":"fn deinit(self: *BufSet) void","src":21,"more_decls":null}{"pl":"fn put(self: *BufSet, key: []const u8) !void","src":30,"more_decls":null}{"pl":"pub fn exists(self: BufSet, key: []const u8) bool {\n    return self.hash_map.get(key) != null;\n}","src":38,"more_decls":null}{"pl":"pub fn delete(self: *BufSet, key: []const u8) void {\n    const entry = self.hash_map.remove(key) orelse return;\n    self.free(entry.key);\n}","src":42,"more_decls":null}{"pl":"pub fn count(self: *const BufSet) usize {\n    return self.hash_map.count();\n}","src":47,"more_decls":null}{"pl":"pub fn iterator(self: *const BufSet) BufSetHashMap.Iterator {\n    return self.hash_map.iterator();\n}","src":51,"more_decls":null}{"pl":"pub fn allocator(self: *const BufSet) *Allocator {\n    return self.hash_map.allocator;\n}","src":55,"more_decls":null}}]