[{"pl":"fn binarySearch(\n    comptime T: type,\n    key: T,\n    items: []const T,\n    context: anytype,\n    comptime compareFn: fn (context: @TypeOf(context), lhs: T, rhs: T) math.Order,\n) ?usize","src":12,"more_decls":null}{"doc_comment":"Stable in-place sort. O(n) best case, O(pow(n, 2)) worst case. O(1) memory (no allocator required).","pl":"fn insertionSort(\n    comptime T: type,\n    items: []T,\n    context: anytype,\n    comptime lessThan: fn (context: @TypeOf(context), lhs: T, rhs: T) bool,\n) void","src":80,"more_decls":null}{"doc_comment":"Stable in-place sort. O(n) best case, O(n*log(n)) worst case and average case. O(1) memory (no allocator required).\nCurrently implemented as block sort.","pl":"fn sort(\n    comptime T: type,\n    items: []T,\n    context: anytype,\n    comptime lessThan: fn (context: @TypeOf(context), lhs: T, rhs: T) bool,\n) void","src":186,"more_decls":null}{"doc_comment":"Use to generate a comparator function for a given type. e.g. `sort(u8, slice, {}, comptime asc(u8))`.","pl":"fn asc(comptime T: type) fn (void, T, T) bool","src":1132,"more_decls":null}{"doc_comment":"Use to generate a comparator function for a given type. e.g. `sort(u8, slice, {}, comptime desc(u8))`.","pl":"fn desc(comptime T: type) fn (void, T, T) bool","src":1143,"more_decls":null}{"pl":"fn argMin(\n    comptime T: type,\n    items: []const T,\n    context: anytype,\n    comptime lessThan: fn (@TypeOf(context), lhs: T, rhs: T) bool,\n) ?usize","src":1362,"more_decls":null}{"pl":"fn min(\n    comptime T: type,\n    items: []const T,\n    context: anytype,\n    comptime lessThan: fn (context: @TypeOf(context), lhs: T, rhs: T) bool,\n) ?T","src":1394,"more_decls":null}{"pl":"fn argMax(\n    comptime T: type,\n    items: []const T,\n    context: anytype,\n    comptime lessThan: fn (context: @TypeOf(context), lhs: T, rhs: T) bool,\n) ?usize","src":1414,"more_decls":null}{"pl":"fn max(\n    comptime T: type,\n    items: []const T,\n    context: anytype,\n    comptime lessThan: fn (context: @TypeOf(context), lhs: T, rhs: T) bool,\n) ?T","src":1446,"more_decls":null}{"pl":"fn isSorted(\n    comptime T: type,\n    items: []const T,\n    context: anytype,\n    comptime lessThan: fn (context: @TypeOf(context), lhs: T, rhs: T) bool,\n) bool","src":1466,"more_decls":null}]