[{"doc_comment":"Creates a stream which allows for reading bit fields from another stream","pl":"fn BitReader(endian: builtin.Endian, comptime ReaderType: type) type","sub_container_type":"struct ","src":15,"more_decls":{"pl":"forward_reader: ReaderType","src":17,"more_decls":null}{"pl":"bit_buffer: u7","src":18,"more_decls":null}{"pl":"bit_count: u3","src":19,"more_decls":null}{"pl":"fn init(forward_reader: ReaderType) Self","src":29,"more_decls":null}{"doc_comment":"Reads `bits` bits from the stream and returns a specified unsigned int type\ncontaining them in the least significant end, returning an error if the\nspecified number of bits could not be read.","pl":"pub fn readBitsNoEof(self: *Self, comptime U: type, bits: usize) !U {\n    var n: usize = undefined;\n    const result = try self.readBits(U, bits, &n);\n    if (n < bits) return error.EndOfStream;\n    return result;\n}","src":40,"more_decls":null}{"doc_comment":"Reads `bits` bits from the stream and returns a specified unsigned int type\ncontaining them in the least significant end. The number of bits successfully\nread is placed in `out_bits`, as reaching the end of the stream is not an error.","pl":"fn readBits(self: *Self, comptime U: type, bits: usize, out_bits: *usize) Error!U","src":50,"more_decls":null}{"pl":"pub fn alignToByte(self: *Self) void {\n    self.bit_buffer = 0;\n    self.bit_count = 0;\n}","src":141,"more_decls":null}{"pl":"fn read(self: *Self, buffer: []u8) Error!usize","src":146,"more_decls":null}{"pl":"pub fn reader(self: *Self) Reader {\n    return .{ .context = self };\n}","src":162,"more_decls":null}{"pl":"const Error = ReaderType.Error","src":21,"more_decls":null}{"pl":"const Reader = io.Reader(*Self, Error, read)","src":22,"more_decls":null}}{"pl":"pub fn bitReader(\n    comptime endian: builtin.Endian,\n    underlying_stream: anytype,\n) BitReader(endian, @TypeOf(underlying_stream)) {\n    return BitReader(endian, @TypeOf(underlying_stream)).init(underlying_stream);\n}","src":168,"more_decls":null}]