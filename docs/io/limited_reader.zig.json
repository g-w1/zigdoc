[{"pl":"fn LimitedReader(comptime ReaderType: type) type","sub_container_type":"struct ","src":10,"more_decls":{"pl":"inner_reader: ReaderType","src":12,"more_decls":null}{"pl":"bytes_left: u64","src":13,"more_decls":null}{"pl":"pub fn read(self: *Self, dest: []u8) Error!usize {\n    const max_read = std.math.min(self.bytes_left, dest.len);\n    const n = try self.inner_reader.read(dest[0..max_read]);\n    self.bytes_left -= n;\n    return n;\n}","src":20,"more_decls":null}{"pl":"pub fn reader(self: *Self) Reader {\n    return .{ .context = self };\n}","src":27,"more_decls":null}{"pl":"const Error = ReaderType.Error","src":15,"more_decls":null}{"pl":"const Reader = io.Reader(*Self, Error, read)","src":16,"more_decls":null}}{"doc_comment":"Returns an initialised `LimitedReader`\n`bytes_left` is a `u64` to be able to take 64 bit file offsets","pl":"pub fn limitedReader(inner_reader: anytype, bytes_left: u64) LimitedReader(@TypeOf(inner_reader)) {\n    return .{ .inner_reader = inner_reader, .bytes_left = bytes_left };\n}","src":35,"more_decls":null}]