[{"doc_comment":"Creates a stream which supports 'un-reading' data, so that it can be read again.\nThis makes look-ahead style parsing much easier.\nTODO merge this with `std.io.BufferedReader`: https://github.com/ziglang/zig/issues/4501","pl":"fn PeekStream(\n    comptime buffer_type: std.fifo.LinearFifoBufferType,\n    comptime ReaderType: type,\n) type","sub_container_type":"struct ","src":13,"more_decls":{"pl":"unbuffered_reader: ReaderType","src":18,"more_decls":null}{"pl":"fifo: FifoType","src":19,"more_decls":null}{"pl":"pub fn putBackByte(self: *Self, byte: u8) !void {\n    try self.putBack(&[_]u8{byte});\n}","src":54,"more_decls":null}{"pl":"pub fn putBack(self: *Self, bytes: []const u8) !void {\n    try self.fifo.unget(bytes);\n}","src":58,"more_decls":null}{"pl":"fn read(self: *Self, dest: []u8) Error!usize","src":62,"more_decls":null}{"pl":"pub fn reader(self: *Self) Reader {\n    return .{ .context = self };\n}","src":72,"more_decls":null}{"pl":"const Error = ReaderType.Error","src":21,"more_decls":null}{"pl":"const Reader = io.Reader(*Self, Error, read)","src":22,"more_decls":null}}{"pl":"pub fn peekStream(\n    comptime lookahead: comptime_int,\n    underlying_stream: anytype,\n) PeekStream(.{ .Static = lookahead }, @TypeOf(underlying_stream)) {\n    return PeekStream(.{ .Static = lookahead }, @TypeOf(underlying_stream)).init(underlying_stream);\n}","src":78,"more_decls":null}]