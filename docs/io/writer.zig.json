[{"pl":"fn Writer(\n    comptime Context: type,\n    comptime WriteError: type,\n    comptime writeFn: fn (context: Context, bytes: []const u8) WriteError!usize,\n) type","sub_container_type":"struct ","src":10,"more_decls":{"pl":"context: Context","src":16,"more_decls":null}{"pl":"pub fn write(self: Self, bytes: []const u8) Error!usize {\n    return writeFn(self.context, bytes);\n}","src":21,"more_decls":null}{"pl":"pub fn writeAll(self: Self, bytes: []const u8) Error!void {\n    var index: usize = 0;\n    while (index != bytes.len) {\n        index += try self.write(bytes[index..]);\n    }\n}","src":25,"more_decls":null}{"pl":"pub fn print(self: Self, comptime format: []const u8, args: anytype) Error!void {\n    return std.fmt.format(self, format, args);\n}","src":32,"more_decls":null}{"pl":"pub fn writeByte(self: Self, byte: u8) Error!void {\n    const array = [1]u8{byte};\n    return self.writeAll(&array);\n}","src":36,"more_decls":null}{"pl":"fn writeByteNTimes(self: Self, byte: u8, n: usize) Error!void","src":41,"more_decls":null}{"doc_comment":"Write a native-endian integer.\nTODO audit non-power-of-two int sizes","pl":"pub fn writeIntNative(self: Self, comptime T: type, value: T) Error!void {\n    var bytes: [(@typeInfo(T).Int.bits + 7) / 8]u8 = undefined;\n    mem.writeIntNative(T, &bytes, value);\n    return self.writeAll(&bytes);\n}","src":55,"more_decls":null}{"doc_comment":"Write a foreign-endian integer.\nTODO audit non-power-of-two int sizes","pl":"pub fn writeIntForeign(self: Self, comptime T: type, value: T) Error!void {\n    var bytes: [(@typeInfo(T).Int.bits + 7) / 8]u8 = undefined;\n    mem.writeIntForeign(T, &bytes, value);\n    return self.writeAll(&bytes);\n}","src":63,"more_decls":null}{"doc_comment":"TODO audit non-power-of-two int sizes","pl":"pub fn writeIntLittle(self: Self, comptime T: type, value: T) Error!void {\n    var bytes: [(@typeInfo(T).Int.bits + 7) / 8]u8 = undefined;\n    mem.writeIntLittle(T, &bytes, value);\n    return self.writeAll(&bytes);\n}","src":70,"more_decls":null}{"doc_comment":"TODO audit non-power-of-two int sizes","pl":"pub fn writeIntBig(self: Self, comptime T: type, value: T) Error!void {\n    var bytes: [(@typeInfo(T).Int.bits + 7) / 8]u8 = undefined;\n    mem.writeIntBig(T, &bytes, value);\n    return self.writeAll(&bytes);\n}","src":77,"more_decls":null}{"doc_comment":"TODO audit non-power-of-two int sizes","pl":"pub fn writeInt(self: Self, comptime T: type, value: T, endian: builtin.Endian) Error!void {\n    var bytes: [(@typeInfo(T).Int.bits + 7) / 8]u8 = undefined;\n    mem.writeInt(T, &bytes, value, endian);\n    return self.writeAll(&bytes);\n}","src":84,"more_decls":null}{"pl":"pub fn writeStruct(self: Self, value: anytype) Error!void {\n    // Only extern and packed structs have defined in-memory layout.\n    comptime assert(@typeInfo(@TypeOf(value)).Struct.layout != builtin.TypeInfo.ContainerLayout.Auto);\n    return self.writeAll(mem.asBytes(&value));\n}","src":90,"more_decls":null}{"pl":"const Error = WriteError","src":19,"more_decls":null}}]