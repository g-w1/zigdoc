[{"doc_comment":"Creates a stream which allows for writing bit fields to another stream","pl":"fn BitWriter(endian: builtin.Endian, comptime WriterType: type) type","sub_container_type":"struct ","src":15,"more_decls":{"pl":"forward_writer: WriterType","src":17,"more_decls":null}{"pl":"bit_buffer: u8","src":18,"more_decls":null}{"pl":"bit_count: u4","src":19,"more_decls":null}{"pl":"fn init(forward_writer: WriterType) Self","src":28,"more_decls":null}{"doc_comment":"Write the specified number of bits to the stream from the least significant bits of\nthe specified unsigned int value. Bits will only be written to the stream when there\nare enough to fill a byte.","pl":"fn writeBits(self: *Self, value: anytype, bits: usize) Error!void","src":39,"more_decls":null}{"doc_comment":"Flush any remaining bits to the stream.","pl":"pub fn flushBits(self: *Self) Error!void {\n    if (self.bit_count == 0) return;\n    try self.forward_writer.writeByte(self.bit_buffer);\n    self.bit_buffer = 0;\n    self.bit_count = 0;\n}","src":120,"more_decls":null}{"pl":"fn write(self: *Self, buffer: []const u8) Error!usize","src":127,"more_decls":null}{"pl":"pub fn writer(self: *Self) Writer {\n    return .{ .context = self };\n}","src":138,"more_decls":null}{"pl":"const Error = WriterType.Error","src":21,"more_decls":null}{"pl":"const Writer = io.Writer(*Self, Error, write)","src":22,"more_decls":null}}{"pl":"pub fn bitWriter(\n    comptime endian: builtin.Endian,\n    underlying_stream: anytype,\n) BitWriter(endian, @TypeOf(underlying_stream)) {\n    return BitWriter(endian, @TypeOf(underlying_stream)).init(underlying_stream);\n}","src":144,"more_decls":null}]