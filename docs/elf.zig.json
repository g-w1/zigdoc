[{"doc_comment":"File types","pl":"pub const ET = extern enum","src":313,"more_decls":{"doc_comment":"No file type","pl":"NONE = 0","src":315,"more_decls":null}{"doc_comment":"Relocatable file","pl":"REL = 1","src":318,"more_decls":null}{"doc_comment":"Executable file","pl":"EXEC = 2","src":321,"more_decls":null}{"doc_comment":"Shared object file","pl":"DYN = 3","src":324,"more_decls":null}{"doc_comment":"Core file","pl":"CORE = 4","src":327,"more_decls":null}{"doc_comment":"Beginning of processor-specific codes","pl":"const LOPROC = 0xff00","src":330,"more_decls":null}{"doc_comment":"Processor-specific","pl":"const HIPROC = 0xffff","src":333,"more_decls":null}}{"doc_comment":"All integers are native endian.","pl":"pub const Header = struct ","src":337,"more_decls":{"pl":"endian: builtin.Endian","src":338,"more_decls":null}{"pl":"machine: EM","src":339,"more_decls":null}{"pl":"is_64: bool","src":340,"more_decls":null}{"pl":"entry: u64","src":341,"more_decls":null}{"pl":"phoff: u64","src":342,"more_decls":null}{"pl":"shoff: u64","src":343,"more_decls":null}{"pl":"phentsize: u16","src":344,"more_decls":null}{"pl":"phnum: u16","src":345,"more_decls":null}{"pl":"shentsize: u16","src":346,"more_decls":null}{"pl":"shnum: u16","src":347,"more_decls":null}{"pl":"shstrndx: u16","src":348,"more_decls":null}{"pl":"pub fn program_header_iterator(self: Header, parse_source: anytype) ProgramHeaderIterator(@TypeOf(parse_source)) {\n    return ProgramHeaderIterator(@TypeOf(parse_source)){\n        .elf_header = self,\n        .parse_source = parse_source,\n    };\n}","src":350,"more_decls":null}{"pl":"pub fn section_header_iterator(self: Header, parse_source: anytype) SectionHeaderIterator(@TypeOf(parse_source)) {\n    return SectionHeaderIterator(@TypeOf(parse_source)){\n        .elf_header = self,\n        .parse_source = parse_source,\n    };\n}","src":357,"more_decls":null}{"pl":"pub fn read(parse_source: anytype) !Header {\n    var hdr_buf: [@sizeOf(Elf64_Ehdr)]u8 align(@alignOf(Elf64_Ehdr)) = undefined;\n    try parse_source.seekableStream().seekTo(0);\n    try parse_source.reader().readNoEof(&hdr_buf);\n    return Header.parse(&hdr_buf);\n}","src":364,"more_decls":null}{"pl":"fn parse(hdr_buf: *align(@alignOf(Elf64_Ehdr)) const [@sizeOf(Elf64_Ehdr)]u8) !Header","src":371,"more_decls":null}}{"pl":"pub const Elf32_Ehdr = extern struct ","src":608,"more_decls":{"pl":"e_ident: [EI_NIDENT]u8","src":609,"more_decls":null}{"pl":"e_type: ET","src":610,"more_decls":null}{"pl":"e_machine: EM","src":611,"more_decls":null}{"pl":"e_version: Elf32_Word","src":612,"more_decls":null}{"pl":"e_entry: Elf32_Addr","src":613,"more_decls":null}{"pl":"e_phoff: Elf32_Off","src":614,"more_decls":null}{"pl":"e_shoff: Elf32_Off","src":615,"more_decls":null}{"pl":"e_flags: Elf32_Word","src":616,"more_decls":null}{"pl":"e_ehsize: Elf32_Half","src":617,"more_decls":null}{"pl":"e_phentsize: Elf32_Half","src":618,"more_decls":null}{"pl":"e_phnum: Elf32_Half","src":619,"more_decls":null}{"pl":"e_shentsize: Elf32_Half","src":620,"more_decls":null}{"pl":"e_shnum: Elf32_Half","src":621,"more_decls":null}{"pl":"e_shstrndx: Elf32_Half","src":622,"more_decls":null}}{"pl":"pub const Elf64_Ehdr = extern struct ","src":624,"more_decls":{"pl":"e_ident: [EI_NIDENT]u8","src":625,"more_decls":null}{"pl":"e_type: ET","src":626,"more_decls":null}{"pl":"e_machine: EM","src":627,"more_decls":null}{"pl":"e_version: Elf64_Word","src":628,"more_decls":null}{"pl":"e_entry: Elf64_Addr","src":629,"more_decls":null}{"pl":"e_phoff: Elf64_Off","src":630,"more_decls":null}{"pl":"e_shoff: Elf64_Off","src":631,"more_decls":null}{"pl":"e_flags: Elf64_Word","src":632,"more_decls":null}{"pl":"e_ehsize: Elf64_Half","src":633,"more_decls":null}{"pl":"e_phentsize: Elf64_Half","src":634,"more_decls":null}{"pl":"e_phnum: Elf64_Half","src":635,"more_decls":null}{"pl":"e_shentsize: Elf64_Half","src":636,"more_decls":null}{"pl":"e_shnum: Elf64_Half","src":637,"more_decls":null}{"pl":"e_shstrndx: Elf64_Half","src":638,"more_decls":null}}{"pl":"pub const Elf32_Phdr = extern struct ","src":640,"more_decls":{"pl":"p_type: Elf32_Word","src":641,"more_decls":null}{"pl":"p_offset: Elf32_Off","src":642,"more_decls":null}{"pl":"p_vaddr: Elf32_Addr","src":643,"more_decls":null}{"pl":"p_paddr: Elf32_Addr","src":644,"more_decls":null}{"pl":"p_filesz: Elf32_Word","src":645,"more_decls":null}{"pl":"p_memsz: Elf32_Word","src":646,"more_decls":null}{"pl":"p_flags: Elf32_Word","src":647,"more_decls":null}{"pl":"p_align: Elf32_Word","src":648,"more_decls":null}}{"pl":"pub const Elf64_Phdr = extern struct ","src":650,"more_decls":{"pl":"p_type: Elf64_Word","src":651,"more_decls":null}{"pl":"p_flags: Elf64_Word","src":652,"more_decls":null}{"pl":"p_offset: Elf64_Off","src":653,"more_decls":null}{"pl":"p_vaddr: Elf64_Addr","src":654,"more_decls":null}{"pl":"p_paddr: Elf64_Addr","src":655,"more_decls":null}{"pl":"p_filesz: Elf64_Xword","src":656,"more_decls":null}{"pl":"p_memsz: Elf64_Xword","src":657,"more_decls":null}{"pl":"p_align: Elf64_Xword","src":658,"more_decls":null}}{"pl":"pub const Elf32_Shdr = extern struct ","src":660,"more_decls":{"pl":"sh_name: Elf32_Word","src":661,"more_decls":null}{"pl":"sh_type: Elf32_Word","src":662,"more_decls":null}{"pl":"sh_flags: Elf32_Word","src":663,"more_decls":null}{"pl":"sh_addr: Elf32_Addr","src":664,"more_decls":null}{"pl":"sh_offset: Elf32_Off","src":665,"more_decls":null}{"pl":"sh_size: Elf32_Word","src":666,"more_decls":null}{"pl":"sh_link: Elf32_Word","src":667,"more_decls":null}{"pl":"sh_info: Elf32_Word","src":668,"more_decls":null}{"pl":"sh_addralign: Elf32_Word","src":669,"more_decls":null}{"pl":"sh_entsize: Elf32_Word","src":670,"more_decls":null}}{"pl":"pub const Elf64_Shdr = extern struct ","src":672,"more_decls":{"pl":"sh_name: Elf64_Word","src":673,"more_decls":null}{"pl":"sh_type: Elf64_Word","src":674,"more_decls":null}{"pl":"sh_flags: Elf64_Xword","src":675,"more_decls":null}{"pl":"sh_addr: Elf64_Addr","src":676,"more_decls":null}{"pl":"sh_offset: Elf64_Off","src":677,"more_decls":null}{"pl":"sh_size: Elf64_Xword","src":678,"more_decls":null}{"pl":"sh_link: Elf64_Word","src":679,"more_decls":null}{"pl":"sh_info: Elf64_Word","src":680,"more_decls":null}{"pl":"sh_addralign: Elf64_Xword","src":681,"more_decls":null}{"pl":"sh_entsize: Elf64_Xword","src":682,"more_decls":null}}{"pl":"pub const Elf32_Chdr = extern struct ","src":684,"more_decls":{"pl":"ch_type: Elf32_Word","src":685,"more_decls":null}{"pl":"ch_size: Elf32_Word","src":686,"more_decls":null}{"pl":"ch_addralign: Elf32_Word","src":687,"more_decls":null}}{"pl":"pub const Elf64_Chdr = extern struct ","src":689,"more_decls":{"pl":"ch_type: Elf64_Word","src":690,"more_decls":null}{"pl":"ch_reserved: Elf64_Word","src":691,"more_decls":null}{"pl":"ch_size: Elf64_Xword","src":692,"more_decls":null}{"pl":"ch_addralign: Elf64_Xword","src":693,"more_decls":null}}{"pl":"pub const Elf32_Sym = extern struct ","src":695,"more_decls":{"pl":"st_name: Elf32_Word","src":696,"more_decls":null}{"pl":"st_value: Elf32_Addr","src":697,"more_decls":null}{"pl":"st_size: Elf32_Word","src":698,"more_decls":null}{"pl":"st_info: u8","src":699,"more_decls":null}{"pl":"st_other: u8","src":700,"more_decls":null}{"pl":"st_shndx: Elf32_Section","src":701,"more_decls":null}}{"pl":"pub const Elf64_Sym = extern struct ","src":703,"more_decls":{"pl":"st_name: Elf64_Word","src":704,"more_decls":null}{"pl":"st_info: u8","src":705,"more_decls":null}{"pl":"st_other: u8","src":706,"more_decls":null}{"pl":"st_shndx: Elf64_Section","src":707,"more_decls":null}{"pl":"st_value: Elf64_Addr","src":708,"more_decls":null}{"pl":"st_size: Elf64_Xword","src":709,"more_decls":null}}{"pl":"pub const Elf32_Syminfo = extern struct ","src":711,"more_decls":{"pl":"si_boundto: Elf32_Half","src":712,"more_decls":null}{"pl":"si_flags: Elf32_Half","src":713,"more_decls":null}}{"pl":"pub const Elf64_Syminfo = extern struct ","src":715,"more_decls":{"pl":"si_boundto: Elf64_Half","src":716,"more_decls":null}{"pl":"si_flags: Elf64_Half","src":717,"more_decls":null}}{"pl":"pub const Elf32_Rel = extern struct ","src":719,"more_decls":{"pl":"r_offset: Elf32_Addr","src":720,"more_decls":null}{"pl":"r_info: Elf32_Word","src":721,"more_decls":null}{"pl":"pub fn r_sym(self: @This()) callconv(.Inline) u24 {\n    return @truncate(u24, self.r_info >> 8);\n}","src":723,"more_decls":null}{"pl":"pub fn r_type(self: @This()) callconv(.Inline) u8 {\n    return @truncate(u8, self.r_info & 0xff);\n}","src":726,"more_decls":null}}{"pl":"pub const Elf64_Rel = extern struct ","src":730,"more_decls":{"pl":"r_offset: Elf64_Addr","src":731,"more_decls":null}{"pl":"r_info: Elf64_Xword","src":732,"more_decls":null}{"pl":"pub fn r_sym(self: @This()) callconv(.Inline) u32 {\n    return @truncate(u32, self.r_info >> 32);\n}","src":734,"more_decls":null}{"pl":"pub fn r_type(self: @This()) callconv(.Inline) u32 {\n    return @truncate(u32, self.r_info & 0xffffffff);\n}","src":737,"more_decls":null}}{"pl":"pub const Elf32_Rela = extern struct ","src":741,"more_decls":{"pl":"r_offset: Elf32_Addr","src":742,"more_decls":null}{"pl":"r_info: Elf32_Word","src":743,"more_decls":null}{"pl":"r_addend: Elf32_Sword","src":744,"more_decls":null}{"pl":"pub fn r_sym(self: @This()) callconv(.Inline) u24 {\n    return @truncate(u24, self.r_info >> 8);\n}","src":746,"more_decls":null}{"pl":"pub fn r_type(self: @This()) callconv(.Inline) u8 {\n    return @truncate(u8, self.r_info & 0xff);\n}","src":749,"more_decls":null}}{"pl":"pub const Elf64_Rela = extern struct ","src":753,"more_decls":{"pl":"r_offset: Elf64_Addr","src":754,"more_decls":null}{"pl":"r_info: Elf64_Xword","src":755,"more_decls":null}{"pl":"r_addend: Elf64_Sxword","src":756,"more_decls":null}{"pl":"pub fn r_sym(self: @This()) callconv(.Inline) u32 {\n    return @truncate(u32, self.r_info >> 32);\n}","src":758,"more_decls":null}{"pl":"pub fn r_type(self: @This()) callconv(.Inline) u32 {\n    return @truncate(u32, self.r_info & 0xffffffff);\n}","src":761,"more_decls":null}}{"pl":"pub const Elf32_Dyn = extern struct ","src":765,"more_decls":{"pl":"d_tag: Elf32_Sword","src":766,"more_decls":null}{"pl":"d_val: Elf32_Addr","src":767,"more_decls":null}}{"pl":"pub const Elf64_Dyn = extern struct ","src":769,"more_decls":{"pl":"d_tag: Elf64_Sxword","src":770,"more_decls":null}{"pl":"d_val: Elf64_Addr","src":771,"more_decls":null}}{"pl":"pub const Elf32_Verdef = extern struct ","src":773,"more_decls":{"pl":"vd_version: Elf32_Half","src":774,"more_decls":null}{"pl":"vd_flags: Elf32_Half","src":775,"more_decls":null}{"pl":"vd_ndx: Elf32_Half","src":776,"more_decls":null}{"pl":"vd_cnt: Elf32_Half","src":777,"more_decls":null}{"pl":"vd_hash: Elf32_Word","src":778,"more_decls":null}{"pl":"vd_aux: Elf32_Word","src":779,"more_decls":null}{"pl":"vd_next: Elf32_Word","src":780,"more_decls":null}}{"pl":"pub const Elf64_Verdef = extern struct ","src":782,"more_decls":{"pl":"vd_version: Elf64_Half","src":783,"more_decls":null}{"pl":"vd_flags: Elf64_Half","src":784,"more_decls":null}{"pl":"vd_ndx: Elf64_Half","src":785,"more_decls":null}{"pl":"vd_cnt: Elf64_Half","src":786,"more_decls":null}{"pl":"vd_hash: Elf64_Word","src":787,"more_decls":null}{"pl":"vd_aux: Elf64_Word","src":788,"more_decls":null}{"pl":"vd_next: Elf64_Word","src":789,"more_decls":null}}{"pl":"pub const Elf32_Verdaux = extern struct ","src":791,"more_decls":{"pl":"vda_name: Elf32_Word","src":792,"more_decls":null}{"pl":"vda_next: Elf32_Word","src":793,"more_decls":null}}{"pl":"pub const Elf64_Verdaux = extern struct ","src":795,"more_decls":{"pl":"vda_name: Elf64_Word","src":796,"more_decls":null}{"pl":"vda_next: Elf64_Word","src":797,"more_decls":null}}{"pl":"pub const Elf32_Verneed = extern struct ","src":799,"more_decls":{"pl":"vn_version: Elf32_Half","src":800,"more_decls":null}{"pl":"vn_cnt: Elf32_Half","src":801,"more_decls":null}{"pl":"vn_file: Elf32_Word","src":802,"more_decls":null}{"pl":"vn_aux: Elf32_Word","src":803,"more_decls":null}{"pl":"vn_next: Elf32_Word","src":804,"more_decls":null}}{"pl":"pub const Elf64_Verneed = extern struct ","src":806,"more_decls":{"pl":"vn_version: Elf64_Half","src":807,"more_decls":null}{"pl":"vn_cnt: Elf64_Half","src":808,"more_decls":null}{"pl":"vn_file: Elf64_Word","src":809,"more_decls":null}{"pl":"vn_aux: Elf64_Word","src":810,"more_decls":null}{"pl":"vn_next: Elf64_Word","src":811,"more_decls":null}}{"pl":"pub const Elf32_Vernaux = extern struct ","src":813,"more_decls":{"pl":"vna_hash: Elf32_Word","src":814,"more_decls":null}{"pl":"vna_flags: Elf32_Half","src":815,"more_decls":null}{"pl":"vna_other: Elf32_Half","src":816,"more_decls":null}{"pl":"vna_name: Elf32_Word","src":817,"more_decls":null}{"pl":"vna_next: Elf32_Word","src":818,"more_decls":null}}{"pl":"pub const Elf64_Vernaux = extern struct ","src":820,"more_decls":{"pl":"vna_hash: Elf64_Word","src":821,"more_decls":null}{"pl":"vna_flags: Elf64_Half","src":822,"more_decls":null}{"pl":"vna_other: Elf64_Half","src":823,"more_decls":null}{"pl":"vna_name: Elf64_Word","src":824,"more_decls":null}{"pl":"vna_next: Elf64_Word","src":825,"more_decls":null}}{"pl":"pub const Elf32_auxv_t = extern struct ","src":827,"more_decls":{"pl":"a_type: u32","src":828,"more_decls":null}{"pl":"a_un: extern union {\n        a_val: u32,\n    }","src":829,"more_decls":null}}{"pl":"pub const Elf64_auxv_t = extern struct ","src":833,"more_decls":{"pl":"a_type: u64","src":834,"more_decls":null}{"pl":"a_un: extern union {\n        a_val: u64,\n    }","src":835,"more_decls":null}}{"pl":"pub const Elf32_Nhdr = extern struct ","src":839,"more_decls":{"pl":"n_namesz: Elf32_Word","src":840,"more_decls":null}{"pl":"n_descsz: Elf32_Word","src":841,"more_decls":null}{"pl":"n_type: Elf32_Word","src":842,"more_decls":null}}{"pl":"pub const Elf64_Nhdr = extern struct ","src":844,"more_decls":{"pl":"n_namesz: Elf64_Word","src":845,"more_decls":null}{"pl":"n_descsz: Elf64_Word","src":846,"more_decls":null}{"pl":"n_type: Elf64_Word","src":847,"more_decls":null}}{"pl":"pub const Elf32_Move = extern struct ","src":849,"more_decls":{"pl":"m_value: Elf32_Xword","src":850,"more_decls":null}{"pl":"m_info: Elf32_Word","src":851,"more_decls":null}{"pl":"m_poffset: Elf32_Word","src":852,"more_decls":null}{"pl":"m_repeat: Elf32_Half","src":853,"more_decls":null}{"pl":"m_stride: Elf32_Half","src":854,"more_decls":null}}{"pl":"pub const Elf64_Move = extern struct ","src":856,"more_decls":{"pl":"m_value: Elf64_Xword","src":857,"more_decls":null}{"pl":"m_info: Elf64_Xword","src":858,"more_decls":null}{"pl":"m_poffset: Elf64_Xword","src":859,"more_decls":null}{"pl":"m_repeat: Elf64_Half","src":860,"more_decls":null}{"pl":"m_stride: Elf64_Half","src":861,"more_decls":null}}{"pl":"pub const Elf32_gptab = extern union ","src":863,"more_decls":{"pl":"gt_header: extern struct {\n        gt_current_g_value: Elf32_Word,\n        gt_unused: Elf32_Word,\n    }","src":864,"more_decls":null}{"pl":"gt_entry: extern struct {\n        gt_g_value: Elf32_Word,\n        gt_bytes: Elf32_Word,\n    }","src":868,"more_decls":null}}{"pl":"pub const Elf32_RegInfo = extern struct ","src":873,"more_decls":{"pl":"ri_gprmask: Elf32_Word","src":874,"more_decls":null}{"pl":"ri_cprmask: [4]Elf32_Word","src":875,"more_decls":null}{"pl":"ri_gp_value: Elf32_Sword","src":876,"more_decls":null}}{"pl":"pub const Elf_Options = extern struct ","src":878,"more_decls":{"pl":"kind: u8","src":879,"more_decls":null}{"pl":"size: u8","src":880,"more_decls":null}{"pl":"@\"section\": Elf32_Section","src":881,"more_decls":null}{"pl":"info: Elf32_Word","src":882,"more_decls":null}}{"pl":"pub const Elf_Options_Hw = extern struct ","src":884,"more_decls":{"pl":"hwp_flags1: Elf32_Word","src":885,"more_decls":null}{"pl":"hwp_flags2: Elf32_Word","src":886,"more_decls":null}}{"pl":"pub const Elf32_Lib = extern struct ","src":888,"more_decls":{"pl":"l_name: Elf32_Word","src":889,"more_decls":null}{"pl":"l_time_stamp: Elf32_Word","src":890,"more_decls":null}{"pl":"l_checksum: Elf32_Word","src":891,"more_decls":null}{"pl":"l_version: Elf32_Word","src":892,"more_decls":null}{"pl":"l_flags: Elf32_Word","src":893,"more_decls":null}}{"pl":"pub const Elf64_Lib = extern struct ","src":895,"more_decls":{"pl":"l_name: Elf64_Word","src":896,"more_decls":null}{"pl":"l_time_stamp: Elf64_Word","src":897,"more_decls":null}{"pl":"l_checksum: Elf64_Word","src":898,"more_decls":null}{"pl":"l_version: Elf64_Word","src":899,"more_decls":null}{"pl":"l_flags: Elf64_Word","src":900,"more_decls":null}}{"pl":"pub const Elf_MIPS_ABIFlags_v0 = extern struct ","src":903,"more_decls":{"pl":"version: Elf32_Half","src":904,"more_decls":null}{"pl":"isa_level: u8","src":905,"more_decls":null}{"pl":"isa_rev: u8","src":906,"more_decls":null}{"pl":"gpr_size: u8","src":907,"more_decls":null}{"pl":"cpr1_size: u8","src":908,"more_decls":null}{"pl":"cpr2_size: u8","src":909,"more_decls":null}{"pl":"fp_abi: u8","src":910,"more_decls":null}{"pl":"isa_ext: Elf32_Word","src":911,"more_decls":null}{"pl":"ases: Elf32_Word","src":912,"more_decls":null}{"pl":"flags1: Elf32_Word","src":913,"more_decls":null}{"pl":"flags2: Elf32_Word","src":914,"more_decls":null}}{"doc_comment":"Machine architectures\nSee current registered ELF machine architectures at:\nhttp://www.uxsglobal.com/developers/gabi/latest/ch4.eheader.html\nThe underscore prefix is because many of these start with numbers.","pl":"pub const EM = extern enum","src":993,"more_decls":{"doc_comment":"No machine","pl":"_NONE = 0","src":995,"more_decls":null}{"doc_comment":"AT&T WE 32100","pl":"_M32 = 1","src":998,"more_decls":null}{"doc_comment":"SPARC","pl":"_SPARC = 2","src":1001,"more_decls":null}{"doc_comment":"Intel 386","pl":"_386 = 3","src":1004,"more_decls":null}{"doc_comment":"Motorola 68000","pl":"_68K = 4","src":1007,"more_decls":null}{"doc_comment":"Motorola 88000","pl":"_88K = 5","src":1010,"more_decls":null}{"doc_comment":"Intel MCU","pl":"_IAMCU = 6","src":1013,"more_decls":null}{"doc_comment":"Intel 80860","pl":"_860 = 7","src":1016,"more_decls":null}{"doc_comment":"MIPS R3000","pl":"_MIPS = 8","src":1019,"more_decls":null}{"doc_comment":"IBM System/370","pl":"_S370 = 9","src":1022,"more_decls":null}{"doc_comment":"MIPS RS3000 Little-endian","pl":"_MIPS_RS3_LE = 10","src":1025,"more_decls":null}{"doc_comment":"SPU Mark II","pl":"_SPU_2 = 13","src":1028,"more_decls":null}{"doc_comment":"Hewlett-Packard PA-RISC","pl":"_PARISC = 15","src":1031,"more_decls":null}{"doc_comment":"Fujitsu VPP500","pl":"_VPP500 = 17","src":1034,"more_decls":null}{"doc_comment":"Enhanced instruction set SPARC","pl":"_SPARC32PLUS = 18","src":1037,"more_decls":null}{"doc_comment":"Intel 80960","pl":"_960 = 19","src":1040,"more_decls":null}{"doc_comment":"PowerPC","pl":"_PPC = 20","src":1043,"more_decls":null}{"doc_comment":"PowerPC64","pl":"_PPC64 = 21","src":1046,"more_decls":null}{"doc_comment":"IBM System/390","pl":"_S390 = 22","src":1049,"more_decls":null}{"doc_comment":"IBM SPU/SPC","pl":"_SPU = 23","src":1052,"more_decls":null}{"doc_comment":"NEC V800","pl":"_V800 = 36","src":1055,"more_decls":null}{"doc_comment":"Fujitsu FR20","pl":"_FR20 = 37","src":1058,"more_decls":null}{"doc_comment":"TRW RH-32","pl":"_RH32 = 38","src":1061,"more_decls":null}{"doc_comment":"Motorola RCE","pl":"_RCE = 39","src":1064,"more_decls":null}{"doc_comment":"ARM","pl":"_ARM = 40","src":1067,"more_decls":null}{"doc_comment":"DEC Alpha","pl":"_ALPHA = 41","src":1070,"more_decls":null}{"doc_comment":"Hitachi SH","pl":"_SH = 42","src":1073,"more_decls":null}{"doc_comment":"SPARC V9","pl":"_SPARCV9 = 43","src":1076,"more_decls":null}{"doc_comment":"Siemens TriCore","pl":"_TRICORE = 44","src":1079,"more_decls":null}{"doc_comment":"Argonaut RISC Core","pl":"_ARC = 45","src":1082,"more_decls":null}{"doc_comment":"Hitachi H8/300","pl":"_H8_300 = 46","src":1085,"more_decls":null}{"doc_comment":"Hitachi H8/300H","pl":"_H8_300H = 47","src":1088,"more_decls":null}{"doc_comment":"Hitachi H8S","pl":"_H8S = 48","src":1091,"more_decls":null}{"doc_comment":"Hitachi H8/500","pl":"_H8_500 = 49","src":1094,"more_decls":null}{"doc_comment":"Intel IA-64 processor architecture","pl":"_IA_64 = 50","src":1097,"more_decls":null}{"doc_comment":"Stanford MIPS-X","pl":"_MIPS_X = 51","src":1100,"more_decls":null}{"doc_comment":"Motorola ColdFire","pl":"_COLDFIRE = 52","src":1103,"more_decls":null}{"doc_comment":"Motorola M68HC12","pl":"_68HC12 = 53","src":1106,"more_decls":null}{"doc_comment":"Fujitsu MMA Multimedia Accelerator","pl":"_MMA = 54","src":1109,"more_decls":null}{"doc_comment":"Siemens PCP","pl":"_PCP = 55","src":1112,"more_decls":null}{"doc_comment":"Sony nCPU embedded RISC processor","pl":"_NCPU = 56","src":1115,"more_decls":null}{"doc_comment":"Denso NDR1 microprocessor","pl":"_NDR1 = 57","src":1118,"more_decls":null}{"doc_comment":"Motorola Star*Core processor","pl":"_STARCORE = 58","src":1121,"more_decls":null}{"doc_comment":"Toyota ME16 processor","pl":"_ME16 = 59","src":1124,"more_decls":null}{"doc_comment":"STMicroelectronics ST100 processor","pl":"_ST100 = 60","src":1127,"more_decls":null}{"doc_comment":"Advanced Logic Corp. TinyJ embedded processor family","pl":"_TINYJ = 61","src":1130,"more_decls":null}{"doc_comment":"AMD x86-64 architecture","pl":"_X86_64 = 62","src":1133,"more_decls":null}{"doc_comment":"Sony DSP Processor","pl":"_PDSP = 63","src":1136,"more_decls":null}{"doc_comment":"Digital Equipment Corp. PDP-10","pl":"_PDP10 = 64","src":1139,"more_decls":null}{"doc_comment":"Digital Equipment Corp. PDP-11","pl":"_PDP11 = 65","src":1142,"more_decls":null}{"doc_comment":"Siemens FX66 microcontroller","pl":"_FX66 = 66","src":1145,"more_decls":null}{"doc_comment":"STMicroelectronics ST9+ 8/16 bit microcontroller","pl":"_ST9PLUS = 67","src":1148,"more_decls":null}{"doc_comment":"STMicroelectronics ST7 8-bit microcontroller","pl":"_ST7 = 68","src":1151,"more_decls":null}{"doc_comment":"Motorola MC68HC16 Microcontroller","pl":"_68HC16 = 69","src":1154,"more_decls":null}{"doc_comment":"Motorola MC68HC11 Microcontroller","pl":"_68HC11 = 70","src":1157,"more_decls":null}{"doc_comment":"Motorola MC68HC08 Microcontroller","pl":"_68HC08 = 71","src":1160,"more_decls":null}{"doc_comment":"Motorola MC68HC05 Microcontroller","pl":"_68HC05 = 72","src":1163,"more_decls":null}{"doc_comment":"Silicon Graphics SVx","pl":"_SVX = 73","src":1166,"more_decls":null}{"doc_comment":"STMicroelectronics ST19 8-bit microcontroller","pl":"_ST19 = 74","src":1169,"more_decls":null}{"doc_comment":"Digital VAX","pl":"_VAX = 75","src":1172,"more_decls":null}{"doc_comment":"Axis Communications 32-bit embedded processor","pl":"_CRIS = 76","src":1175,"more_decls":null}{"doc_comment":"Infineon Technologies 32-bit embedded processor","pl":"_JAVELIN = 77","src":1178,"more_decls":null}{"doc_comment":"Element 14 64-bit DSP Processor","pl":"_FIREPATH = 78","src":1181,"more_decls":null}{"doc_comment":"LSI Logic 16-bit DSP Processor","pl":"_ZSP = 79","src":1184,"more_decls":null}{"doc_comment":"Donald Knuth's educational 64-bit processor","pl":"_MMIX = 80","src":1187,"more_decls":null}{"doc_comment":"Harvard University machine-independent object files","pl":"_HUANY = 81","src":1190,"more_decls":null}{"doc_comment":"SiTera Prism","pl":"_PRISM = 82","src":1193,"more_decls":null}{"doc_comment":"Atmel AVR 8-bit microcontroller","pl":"_AVR = 83","src":1196,"more_decls":null}{"doc_comment":"Fujitsu FR30","pl":"_FR30 = 84","src":1199,"more_decls":null}{"doc_comment":"Mitsubishi D10V","pl":"_D10V = 85","src":1202,"more_decls":null}{"doc_comment":"Mitsubishi D30V","pl":"_D30V = 86","src":1205,"more_decls":null}{"doc_comment":"NEC v850","pl":"_V850 = 87","src":1208,"more_decls":null}{"doc_comment":"Mitsubishi M32R","pl":"_M32R = 88","src":1211,"more_decls":null}{"doc_comment":"Matsushita MN10300","pl":"_MN10300 = 89","src":1214,"more_decls":null}{"doc_comment":"Matsushita MN10200","pl":"_MN10200 = 90","src":1217,"more_decls":null}{"doc_comment":"picoJava","pl":"_PJ = 91","src":1220,"more_decls":null}{"doc_comment":"OpenRISC 32-bit embedded processor","pl":"_OPENRISC = 92","src":1223,"more_decls":null}{"doc_comment":"ARC International ARCompact processor (old spelling/synonym: EM_ARC_A5)","pl":"_ARC_COMPACT = 93","src":1226,"more_decls":null}{"doc_comment":"Tensilica Xtensa Architecture","pl":"_XTENSA = 94","src":1229,"more_decls":null}{"doc_comment":"Alphamosaic VideoCore processor","pl":"_VIDEOCORE = 95","src":1232,"more_decls":null}{"doc_comment":"Thompson Multimedia General Purpose Processor","pl":"_TMM_GPP = 96","src":1235,"more_decls":null}{"doc_comment":"National Semiconductor 32000 series","pl":"_NS32K = 97","src":1238,"more_decls":null}{"doc_comment":"Tenor Network TPC processor","pl":"_TPC = 98","src":1241,"more_decls":null}{"doc_comment":"Trebia SNP 1000 processor","pl":"_SNP1K = 99","src":1244,"more_decls":null}{"doc_comment":"STMicroelectronics (www.st.com) ST200","pl":"_ST200 = 100","src":1247,"more_decls":null}{"doc_comment":"Ubicom IP2xxx microcontroller family","pl":"_IP2K = 101","src":1250,"more_decls":null}{"doc_comment":"MAX Processor","pl":"_MAX = 102","src":1253,"more_decls":null}{"doc_comment":"National Semiconductor CompactRISC microprocessor","pl":"_CR = 103","src":1256,"more_decls":null}{"doc_comment":"Fujitsu F2MC16","pl":"_F2MC16 = 104","src":1259,"more_decls":null}{"doc_comment":"Texas Instruments embedded microcontroller msp430","pl":"_MSP430 = 105","src":1262,"more_decls":null}{"doc_comment":"Analog Devices Blackfin (DSP) processor","pl":"_BLACKFIN = 106","src":1265,"more_decls":null}{"doc_comment":"S1C33 Family of Seiko Epson processors","pl":"_SE_C33 = 107","src":1268,"more_decls":null}{"doc_comment":"Sharp embedded microprocessor","pl":"_SEP = 108","src":1271,"more_decls":null}{"doc_comment":"Arca RISC Microprocessor","pl":"_ARCA = 109","src":1274,"more_decls":null}{"doc_comment":"Microprocessor series from PKU-Unity Ltd. and MPRC of Peking University","pl":"_UNICORE = 110","src":1277,"more_decls":null}{"doc_comment":"eXcess: 16/32/64-bit configurable embedded CPU","pl":"_EXCESS = 111","src":1280,"more_decls":null}{"doc_comment":"Icera Semiconductor Inc. Deep Execution Processor","pl":"_DXP = 112","src":1283,"more_decls":null}{"doc_comment":"Altera Nios II soft-core processor","pl":"_ALTERA_NIOS2 = 113","src":1286,"more_decls":null}{"doc_comment":"National Semiconductor CompactRISC CRX","pl":"_CRX = 114","src":1289,"more_decls":null}{"doc_comment":"Motorola XGATE embedded processor","pl":"_XGATE = 115","src":1292,"more_decls":null}{"doc_comment":"Infineon C16x/XC16x processor","pl":"_C166 = 116","src":1295,"more_decls":null}{"doc_comment":"Renesas M16C series microprocessors","pl":"_M16C = 117","src":1298,"more_decls":null}{"doc_comment":"Microchip Technology dsPIC30F Digital Signal Controller","pl":"_DSPIC30F = 118","src":1301,"more_decls":null}{"doc_comment":"Freescale Communication Engine RISC core","pl":"_CE = 119","src":1304,"more_decls":null}{"doc_comment":"Renesas M32C series microprocessors","pl":"_M32C = 120","src":1307,"more_decls":null}{"doc_comment":"Altium TSK3000 core","pl":"_TSK3000 = 131","src":1310,"more_decls":null}{"doc_comment":"Freescale RS08 embedded processor","pl":"_RS08 = 132","src":1313,"more_decls":null}{"doc_comment":"Analog Devices SHARC family of 32-bit DSP processors","pl":"_SHARC = 133","src":1316,"more_decls":null}{"doc_comment":"Cyan Technology eCOG2 microprocessor","pl":"_ECOG2 = 134","src":1319,"more_decls":null}{"doc_comment":"Sunplus S+core7 RISC processor","pl":"_SCORE7 = 135","src":1322,"more_decls":null}{"doc_comment":"New Japan Radio (NJR) 24-bit DSP Processor","pl":"_DSP24 = 136","src":1325,"more_decls":null}{"doc_comment":"Broadcom VideoCore III processor","pl":"_VIDEOCORE3 = 137","src":1328,"more_decls":null}{"doc_comment":"RISC processor for Lattice FPGA architecture","pl":"_LATTICEMICO32 = 138","src":1331,"more_decls":null}{"doc_comment":"Seiko Epson C17 family","pl":"_SE_C17 = 139","src":1334,"more_decls":null}{"doc_comment":"The Texas Instruments TMS320C6000 DSP family","pl":"_TI_C6000 = 140","src":1337,"more_decls":null}{"doc_comment":"The Texas Instruments TMS320C2000 DSP family","pl":"_TI_C2000 = 141","src":1340,"more_decls":null}{"doc_comment":"The Texas Instruments TMS320C55x DSP family","pl":"_TI_C5500 = 142","src":1343,"more_decls":null}{"doc_comment":"STMicroelectronics 64bit VLIW Data Signal Processor","pl":"_MMDSP_PLUS = 160","src":1346,"more_decls":null}{"doc_comment":"Cypress M8C microprocessor","pl":"_CYPRESS_M8C = 161","src":1349,"more_decls":null}{"doc_comment":"Renesas R32C series microprocessors","pl":"_R32C = 162","src":1352,"more_decls":null}{"doc_comment":"NXP Semiconductors TriMedia architecture family","pl":"_TRIMEDIA = 163","src":1355,"more_decls":null}{"doc_comment":"Qualcomm Hexagon processor","pl":"_HEXAGON = 164","src":1358,"more_decls":null}{"doc_comment":"Intel 8051 and variants","pl":"_8051 = 165","src":1361,"more_decls":null}{"doc_comment":"STMicroelectronics STxP7x family of configurable and extensible RISC processors","pl":"_STXP7X = 166","src":1364,"more_decls":null}{"doc_comment":"Andes Technology compact code size embedded RISC processor family","pl":"_NDS32 = 167","src":1367,"more_decls":null}{"doc_comment":"Cyan Technology eCOG1X family","pl":"_ECOG1X = 168","src":1370,"more_decls":null}{"doc_comment":"Dallas Semiconductor MAXQ30 Core Micro-controllers","pl":"_MAXQ30 = 169","src":1373,"more_decls":null}{"doc_comment":"New Japan Radio (NJR) 16-bit DSP Processor","pl":"_XIMO16 = 170","src":1376,"more_decls":null}{"doc_comment":"M2000 Reconfigurable RISC Microprocessor","pl":"_MANIK = 171","src":1379,"more_decls":null}{"doc_comment":"Cray Inc. NV2 vector architecture","pl":"_CRAYNV2 = 172","src":1382,"more_decls":null}{"doc_comment":"Renesas RX family","pl":"_RX = 173","src":1385,"more_decls":null}{"doc_comment":"Imagination Technologies META processor architecture","pl":"_METAG = 174","src":1388,"more_decls":null}{"doc_comment":"MCST Elbrus general purpose hardware architecture","pl":"_MCST_ELBRUS = 175","src":1391,"more_decls":null}{"doc_comment":"Cyan Technology eCOG16 family","pl":"_ECOG16 = 176","src":1394,"more_decls":null}{"doc_comment":"National Semiconductor CompactRISC CR16 16-bit microprocessor","pl":"_CR16 = 177","src":1397,"more_decls":null}{"doc_comment":"Freescale Extended Time Processing Unit","pl":"_ETPU = 178","src":1400,"more_decls":null}{"doc_comment":"Infineon Technologies SLE9X core","pl":"_SLE9X = 179","src":1403,"more_decls":null}{"doc_comment":"Intel L10M","pl":"_L10M = 180","src":1406,"more_decls":null}{"doc_comment":"Intel K10M","pl":"_K10M = 181","src":1409,"more_decls":null}{"doc_comment":"ARM AArch64","pl":"_AARCH64 = 183","src":1412,"more_decls":null}{"doc_comment":"Atmel Corporation 32-bit microprocessor family","pl":"_AVR32 = 185","src":1415,"more_decls":null}{"doc_comment":"STMicroeletronics STM8 8-bit microcontroller","pl":"_STM8 = 186","src":1418,"more_decls":null}{"doc_comment":"Tilera TILE64 multicore architecture family","pl":"_TILE64 = 187","src":1421,"more_decls":null}{"doc_comment":"Tilera TILEPro multicore architecture family","pl":"_TILEPRO = 188","src":1424,"more_decls":null}{"doc_comment":"NVIDIA CUDA architecture","pl":"_CUDA = 190","src":1427,"more_decls":null}{"doc_comment":"Tilera TILE-Gx multicore architecture family","pl":"_TILEGX = 191","src":1430,"more_decls":null}{"doc_comment":"CloudShield architecture family","pl":"_CLOUDSHIELD = 192","src":1433,"more_decls":null}{"doc_comment":"KIPO-KAIST Core-A 1st generation processor family","pl":"_COREA_1ST = 193","src":1436,"more_decls":null}{"doc_comment":"KIPO-KAIST Core-A 2nd generation processor family","pl":"_COREA_2ND = 194","src":1439,"more_decls":null}{"doc_comment":"Synopsys ARCompact V2","pl":"_ARC_COMPACT2 = 195","src":1442,"more_decls":null}{"doc_comment":"Open8 8-bit RISC soft processor core","pl":"_OPEN8 = 196","src":1445,"more_decls":null}{"doc_comment":"Renesas RL78 family","pl":"_RL78 = 197","src":1448,"more_decls":null}{"doc_comment":"Broadcom VideoCore V processor","pl":"_VIDEOCORE5 = 198","src":1451,"more_decls":null}{"doc_comment":"Renesas 78KOR family","pl":"_78KOR = 199","src":1454,"more_decls":null}{"doc_comment":"Freescale 56800EX Digital Signal Controller (DSC)","pl":"_56800EX = 200","src":1457,"more_decls":null}{"doc_comment":"Beyond BA1 CPU architecture","pl":"_BA1 = 201","src":1460,"more_decls":null}{"doc_comment":"Beyond BA2 CPU architecture","pl":"_BA2 = 202","src":1463,"more_decls":null}{"doc_comment":"XMOS xCORE processor family","pl":"_XCORE = 203","src":1466,"more_decls":null}{"doc_comment":"Microchip 8-bit PIC(r) family","pl":"_MCHP_PIC = 204","src":1469,"more_decls":null}{"doc_comment":"Reserved by Intel","pl":"_INTEL205 = 205","src":1472,"more_decls":null}{"doc_comment":"Reserved by Intel","pl":"_INTEL206 = 206","src":1475,"more_decls":null}{"doc_comment":"Reserved by Intel","pl":"_INTEL207 = 207","src":1478,"more_decls":null}{"doc_comment":"Reserved by Intel","pl":"_INTEL208 = 208","src":1481,"more_decls":null}{"doc_comment":"Reserved by Intel","pl":"_INTEL209 = 209","src":1484,"more_decls":null}{"doc_comment":"KM211 KM32 32-bit processor","pl":"_KM32 = 210","src":1487,"more_decls":null}{"doc_comment":"KM211 KMX32 32-bit processor","pl":"_KMX32 = 211","src":1490,"more_decls":null}{"doc_comment":"KM211 KMX16 16-bit processor","pl":"_KMX16 = 212","src":1493,"more_decls":null}{"doc_comment":"KM211 KMX8 8-bit processor","pl":"_KMX8 = 213","src":1496,"more_decls":null}{"doc_comment":"KM211 KVARC processor","pl":"_KVARC = 214","src":1499,"more_decls":null}{"doc_comment":"Paneve CDP architecture family","pl":"_CDP = 215","src":1502,"more_decls":null}{"doc_comment":"Cognitive Smart Memory Processor","pl":"_COGE = 216","src":1505,"more_decls":null}{"doc_comment":"iCelero CoolEngine","pl":"_COOL = 217","src":1508,"more_decls":null}{"doc_comment":"Nanoradio Optimized RISC","pl":"_NORC = 218","src":1511,"more_decls":null}{"doc_comment":"CSR Kalimba architecture family","pl":"_CSR_KALIMBA = 219","src":1514,"more_decls":null}{"doc_comment":"AMD GPU architecture","pl":"_AMDGPU = 224","src":1517,"more_decls":null}{"doc_comment":"RISC-V","pl":"_RISCV = 243","src":1520,"more_decls":null}{"doc_comment":"Lanai 32-bit processor","pl":"_LANAI = 244","src":1523,"more_decls":null}{"doc_comment":"Linux kernel bpf virtual machine","pl":"_BPF = 247","src":1526,"more_decls":null}{"pl":"_","src":1528,"more_decls":null}}{"pl":"fn ProgramHeaderIterator(ParseSource: anytype) type","sub_container_type":"struct ","src":411,"more_decls":{"pl":"elf_header: Header","src":413,"more_decls":null}{"pl":"parse_source: ParseSource","src":414,"more_decls":null}{"pl":"index: usize = 0","src":415,"more_decls":null}{"pl":"fn next(self: *@This()) !?Elf64_Phdr","src":417,"more_decls":null}}{"pl":"fn SectionHeaderIterator(ParseSource: anytype) type","sub_container_type":"struct ","src":461,"more_decls":{"pl":"elf_header: Header","src":463,"more_decls":null}{"pl":"parse_source: ParseSource","src":464,"more_decls":null}{"pl":"index: usize = 0","src":465,"more_decls":null}{"pl":"fn next(self: *@This()) !?Elf64_Shdr","src":467,"more_decls":null}}{"pl":"fn int(is_64: bool, need_bswap: bool, int_32: anytype, int_64: anytype) @TypeOf(int_64)","src":534,"more_decls":null}{"pl":"fn int32(need_bswap: bool, int_32: anytype, comptime Int64: anytype) Int64","src":546,"more_decls":null}{"pl":"pub fn bswapAllFields(comptime S: type, ptr: *S) void {\n    if (@typeInfo(S) != .Struct) @compileError(\"bswapAllFields expects a struct as the first argument\");\n    inline for (std.meta.fields(S)) |f| {\n        @field(ptr, f.name) = @byteSwap(f.field_type, @field(ptr, f.name));\n    }\n}","src":554,"more_decls":null}{"pl":"const AT_NULL = 0","src":14,"more_decls":null}{"pl":"const AT_IGNORE = 1","src":15,"more_decls":null}{"pl":"const AT_EXECFD = 2","src":16,"more_decls":null}{"pl":"const AT_PHDR = 3","src":17,"more_decls":null}{"pl":"const AT_PHENT = 4","src":18,"more_decls":null}{"pl":"const AT_PHNUM = 5","src":19,"more_decls":null}{"pl":"const AT_PAGESZ = 6","src":20,"more_decls":null}{"pl":"const AT_BASE = 7","src":21,"more_decls":null}{"pl":"const AT_FLAGS = 8","src":22,"more_decls":null}{"pl":"const AT_ENTRY = 9","src":23,"more_decls":null}{"pl":"const AT_NOTELF = 10","src":24,"more_decls":null}{"pl":"const AT_UID = 11","src":25,"more_decls":null}{"pl":"const AT_EUID = 12","src":26,"more_decls":null}{"pl":"const AT_GID = 13","src":27,"more_decls":null}{"pl":"const AT_EGID = 14","src":28,"more_decls":null}{"pl":"const AT_CLKTCK = 17","src":29,"more_decls":null}{"pl":"const AT_PLATFORM = 15","src":30,"more_decls":null}{"pl":"const AT_HWCAP = 16","src":31,"more_decls":null}{"pl":"const AT_FPUCW = 18","src":32,"more_decls":null}{"pl":"const AT_DCACHEBSIZE = 19","src":33,"more_decls":null}{"pl":"const AT_ICACHEBSIZE = 20","src":34,"more_decls":null}{"pl":"const AT_UCACHEBSIZE = 21","src":35,"more_decls":null}{"pl":"const AT_IGNOREPPC = 22","src":36,"more_decls":null}{"pl":"const AT_SECURE = 23","src":37,"more_decls":null}{"pl":"const AT_BASE_PLATFORM = 24","src":38,"more_decls":null}{"pl":"const AT_RANDOM = 25","src":39,"more_decls":null}{"pl":"const AT_HWCAP2 = 26","src":40,"more_decls":null}{"pl":"const AT_EXECFN = 31","src":41,"more_decls":null}{"pl":"const AT_SYSINFO = 32","src":42,"more_decls":null}{"pl":"const AT_SYSINFO_EHDR = 33","src":43,"more_decls":null}{"pl":"const AT_L1I_CACHESHAPE = 34","src":44,"more_decls":null}{"pl":"const AT_L1D_CACHESHAPE = 35","src":45,"more_decls":null}{"pl":"const AT_L2_CACHESHAPE = 36","src":46,"more_decls":null}{"pl":"const AT_L3_CACHESHAPE = 37","src":47,"more_decls":null}{"pl":"const AT_L1I_CACHESIZE = 40","src":48,"more_decls":null}{"pl":"const AT_L1I_CACHEGEOMETRY = 41","src":49,"more_decls":null}{"pl":"const AT_L1D_CACHESIZE = 42","src":50,"more_decls":null}{"pl":"const AT_L1D_CACHEGEOMETRY = 43","src":51,"more_decls":null}{"pl":"const AT_L2_CACHESIZE = 44","src":52,"more_decls":null}{"pl":"const AT_L2_CACHEGEOMETRY = 45","src":53,"more_decls":null}{"pl":"const AT_L3_CACHESIZE = 46","src":54,"more_decls":null}{"pl":"const AT_L3_CACHEGEOMETRY = 47","src":55,"more_decls":null}{"pl":"const DT_NULL = 0","src":57,"more_decls":null}{"pl":"const DT_NEEDED = 1","src":58,"more_decls":null}{"pl":"const DT_PLTRELSZ = 2","src":59,"more_decls":null}{"pl":"const DT_PLTGOT = 3","src":60,"more_decls":null}{"pl":"const DT_HASH = 4","src":61,"more_decls":null}{"pl":"const DT_STRTAB = 5","src":62,"more_decls":null}{"pl":"const DT_SYMTAB = 6","src":63,"more_decls":null}{"pl":"const DT_RELA = 7","src":64,"more_decls":null}{"pl":"const DT_RELASZ = 8","src":65,"more_decls":null}{"pl":"const DT_RELAENT = 9","src":66,"more_decls":null}{"pl":"const DT_STRSZ = 10","src":67,"more_decls":null}{"pl":"const DT_SYMENT = 11","src":68,"more_decls":null}{"pl":"const DT_INIT = 12","src":69,"more_decls":null}{"pl":"const DT_FINI = 13","src":70,"more_decls":null}{"pl":"const DT_SONAME = 14","src":71,"more_decls":null}{"pl":"const DT_RPATH = 15","src":72,"more_decls":null}{"pl":"const DT_SYMBOLIC = 16","src":73,"more_decls":null}{"pl":"const DT_REL = 17","src":74,"more_decls":null}{"pl":"const DT_RELSZ = 18","src":75,"more_decls":null}{"pl":"const DT_RELENT = 19","src":76,"more_decls":null}{"pl":"const DT_PLTREL = 20","src":77,"more_decls":null}{"pl":"const DT_DEBUG = 21","src":78,"more_decls":null}{"pl":"const DT_TEXTREL = 22","src":79,"more_decls":null}{"pl":"const DT_JMPREL = 23","src":80,"more_decls":null}{"pl":"const DT_BIND_NOW = 24","src":81,"more_decls":null}{"pl":"const DT_INIT_ARRAY = 25","src":82,"more_decls":null}{"pl":"const DT_FINI_ARRAY = 26","src":83,"more_decls":null}{"pl":"const DT_INIT_ARRAYSZ = 27","src":84,"more_decls":null}{"pl":"const DT_FINI_ARRAYSZ = 28","src":85,"more_decls":null}{"pl":"const DT_RUNPATH = 29","src":86,"more_decls":null}{"pl":"const DT_FLAGS = 30","src":87,"more_decls":null}{"pl":"const DT_ENCODING = 32","src":88,"more_decls":null}{"pl":"const DT_PREINIT_ARRAY = 32","src":89,"more_decls":null}{"pl":"const DT_PREINIT_ARRAYSZ = 33","src":90,"more_decls":null}{"pl":"const DT_SYMTAB_SHNDX = 34","src":91,"more_decls":null}{"pl":"const DT_NUM = 35","src":92,"more_decls":null}{"pl":"const DT_LOOS = 0x6000000d","src":93,"more_decls":null}{"pl":"const DT_HIOS = 0x6ffff000","src":94,"more_decls":null}{"pl":"const DT_LOPROC = 0x70000000","src":95,"more_decls":null}{"pl":"const DT_HIPROC = 0x7fffffff","src":96,"more_decls":null}{"pl":"const DT_PROCNUM = DT_MIPS_NUM","src":97,"more_decls":null}{"pl":"const DT_VALRNGLO = 0x6ffffd00","src":99,"more_decls":null}{"pl":"const DT_GNU_PRELINKED = 0x6ffffdf5","src":100,"more_decls":null}{"pl":"const DT_GNU_CONFLICTSZ = 0x6ffffdf6","src":101,"more_decls":null}{"pl":"const DT_GNU_LIBLISTSZ = 0x6ffffdf7","src":102,"more_decls":null}{"pl":"const DT_CHECKSUM = 0x6ffffdf8","src":103,"more_decls":null}{"pl":"const DT_PLTPADSZ = 0x6ffffdf9","src":104,"more_decls":null}{"pl":"const DT_MOVEENT = 0x6ffffdfa","src":105,"more_decls":null}{"pl":"const DT_MOVESZ = 0x6ffffdfb","src":106,"more_decls":null}{"pl":"const DT_FEATURE_1 = 0x6ffffdfc","src":107,"more_decls":null}{"pl":"const DT_POSFLAG_1 = 0x6ffffdfd","src":108,"more_decls":null}{"pl":"const DT_SYMINSZ = 0x6ffffdfe","src":110,"more_decls":null}{"pl":"const DT_SYMINENT = 0x6ffffdff","src":111,"more_decls":null}{"pl":"const DT_VALRNGHI = 0x6ffffdff","src":112,"more_decls":null}{"pl":"const DT_VALNUM = 12","src":113,"more_decls":null}{"pl":"const DT_ADDRRNGLO = 0x6ffffe00","src":115,"more_decls":null}{"pl":"const DT_GNU_HASH = 0x6ffffef5","src":116,"more_decls":null}{"pl":"const DT_TLSDESC_PLT = 0x6ffffef6","src":117,"more_decls":null}{"pl":"const DT_TLSDESC_GOT = 0x6ffffef7","src":118,"more_decls":null}{"pl":"const DT_GNU_CONFLICT = 0x6ffffef8","src":119,"more_decls":null}{"pl":"const DT_GNU_LIBLIST = 0x6ffffef9","src":120,"more_decls":null}{"pl":"const DT_CONFIG = 0x6ffffefa","src":121,"more_decls":null}{"pl":"const DT_DEPAUDIT = 0x6ffffefb","src":122,"more_decls":null}{"pl":"const DT_AUDIT = 0x6ffffefc","src":123,"more_decls":null}{"pl":"const DT_PLTPAD = 0x6ffffefd","src":124,"more_decls":null}{"pl":"const DT_MOVETAB = 0x6ffffefe","src":125,"more_decls":null}{"pl":"const DT_SYMINFO = 0x6ffffeff","src":126,"more_decls":null}{"pl":"const DT_ADDRRNGHI = 0x6ffffeff","src":127,"more_decls":null}{"pl":"const DT_ADDRNUM = 11","src":128,"more_decls":null}{"pl":"const DT_VERSYM = 0x6ffffff0","src":130,"more_decls":null}{"pl":"const DT_RELACOUNT = 0x6ffffff9","src":132,"more_decls":null}{"pl":"const DT_RELCOUNT = 0x6ffffffa","src":133,"more_decls":null}{"pl":"const DT_FLAGS_1 = 0x6ffffffb","src":135,"more_decls":null}{"pl":"const DT_VERDEF = 0x6ffffffc","src":136,"more_decls":null}{"pl":"const DT_VERDEFNUM = 0x6ffffffd","src":138,"more_decls":null}{"pl":"const DT_VERNEED = 0x6ffffffe","src":139,"more_decls":null}{"pl":"const DT_VERNEEDNUM = 0x6fffffff","src":141,"more_decls":null}{"pl":"const DT_VERSIONTAGNUM = 16","src":142,"more_decls":null}{"pl":"const DT_AUXILIARY = 0x7ffffffd","src":144,"more_decls":null}{"pl":"const DT_FILTER = 0x7fffffff","src":145,"more_decls":null}{"pl":"const DT_EXTRANUM = 3","src":146,"more_decls":null}{"pl":"const DT_SPARC_REGISTER = 0x70000001","src":148,"more_decls":null}{"pl":"const DT_SPARC_NUM = 2","src":149,"more_decls":null}{"pl":"const DT_MIPS_RLD_VERSION = 0x70000001","src":151,"more_decls":null}{"pl":"const DT_MIPS_TIME_STAMP = 0x70000002","src":152,"more_decls":null}{"pl":"const DT_MIPS_ICHECKSUM = 0x70000003","src":153,"more_decls":null}{"pl":"const DT_MIPS_IVERSION = 0x70000004","src":154,"more_decls":null}{"pl":"const DT_MIPS_FLAGS = 0x70000005","src":155,"more_decls":null}{"pl":"const DT_MIPS_BASE_ADDRESS = 0x70000006","src":156,"more_decls":null}{"pl":"const DT_MIPS_MSYM = 0x70000007","src":157,"more_decls":null}{"pl":"const DT_MIPS_CONFLICT = 0x70000008","src":158,"more_decls":null}{"pl":"const DT_MIPS_LIBLIST = 0x70000009","src":159,"more_decls":null}{"pl":"const DT_MIPS_LOCAL_GOTNO = 0x7000000a","src":160,"more_decls":null}{"pl":"const DT_MIPS_CONFLICTNO = 0x7000000b","src":161,"more_decls":null}{"pl":"const DT_MIPS_LIBLISTNO = 0x70000010","src":162,"more_decls":null}{"pl":"const DT_MIPS_SYMTABNO = 0x70000011","src":163,"more_decls":null}{"pl":"const DT_MIPS_UNREFEXTNO = 0x70000012","src":164,"more_decls":null}{"pl":"const DT_MIPS_GOTSYM = 0x70000013","src":165,"more_decls":null}{"pl":"const DT_MIPS_HIPAGENO = 0x70000014","src":166,"more_decls":null}{"pl":"const DT_MIPS_RLD_MAP = 0x70000016","src":167,"more_decls":null}{"pl":"const DT_MIPS_DELTA_CLASS = 0x70000017","src":168,"more_decls":null}{"pl":"const DT_MIPS_DELTA_CLASS_NO = 0x70000018","src":169,"more_decls":null}{"pl":"const DT_MIPS_DELTA_INSTANCE = 0x70000019","src":171,"more_decls":null}{"pl":"const DT_MIPS_DELTA_INSTANCE_NO = 0x7000001a","src":172,"more_decls":null}{"pl":"const DT_MIPS_DELTA_RELOC = 0x7000001b","src":174,"more_decls":null}{"pl":"const DT_MIPS_DELTA_RELOC_NO = 0x7000001c","src":175,"more_decls":null}{"pl":"const DT_MIPS_DELTA_SYM = 0x7000001d","src":177,"more_decls":null}{"pl":"const DT_MIPS_DELTA_SYM_NO = 0x7000001e","src":179,"more_decls":null}{"pl":"const DT_MIPS_DELTA_CLASSSYM = 0x70000020","src":181,"more_decls":null}{"pl":"const DT_MIPS_DELTA_CLASSSYM_NO = 0x70000021","src":183,"more_decls":null}{"pl":"const DT_MIPS_CXX_FLAGS = 0x70000022","src":185,"more_decls":null}{"pl":"const DT_MIPS_PIXIE_INIT = 0x70000023","src":186,"more_decls":null}{"pl":"const DT_MIPS_SYMBOL_LIB = 0x70000024","src":187,"more_decls":null}{"pl":"const DT_MIPS_LOCALPAGE_GOTIDX = 0x70000025","src":188,"more_decls":null}{"pl":"const DT_MIPS_LOCAL_GOTIDX = 0x70000026","src":189,"more_decls":null}{"pl":"const DT_MIPS_HIDDEN_GOTIDX = 0x70000027","src":190,"more_decls":null}{"pl":"const DT_MIPS_PROTECTED_GOTIDX = 0x70000028","src":191,"more_decls":null}{"pl":"const DT_MIPS_OPTIONS = 0x70000029","src":192,"more_decls":null}{"pl":"const DT_MIPS_INTERFACE = 0x7000002a","src":193,"more_decls":null}{"pl":"const DT_MIPS_DYNSTR_ALIGN = 0x7000002b","src":194,"more_decls":null}{"pl":"const DT_MIPS_INTERFACE_SIZE = 0x7000002c","src":195,"more_decls":null}{"pl":"const DT_MIPS_RLD_TEXT_RESOLVE_ADDR = 0x7000002d","src":196,"more_decls":null}{"pl":"const DT_MIPS_PERF_SUFFIX = 0x7000002e","src":198,"more_decls":null}{"pl":"const DT_MIPS_COMPACT_SIZE = 0x7000002f","src":200,"more_decls":null}{"pl":"const DT_MIPS_GP_VALUE = 0x70000030","src":201,"more_decls":null}{"pl":"const DT_MIPS_AUX_DYNAMIC = 0x70000031","src":202,"more_decls":null}{"pl":"const DT_MIPS_PLTGOT = 0x70000032","src":204,"more_decls":null}{"pl":"const DT_MIPS_RWPLT = 0x70000034","src":206,"more_decls":null}{"pl":"const DT_MIPS_RLD_MAP_REL = 0x70000035","src":207,"more_decls":null}{"pl":"const DT_MIPS_NUM = 0x36","src":208,"more_decls":null}{"pl":"const DT_ALPHA_PLTRO = (DT_LOPROC + 0)","src":210,"more_decls":null}{"pl":"const DT_ALPHA_NUM = 1","src":211,"more_decls":null}{"pl":"const DT_PPC_GOT = (DT_LOPROC + 0)","src":213,"more_decls":null}{"pl":"const DT_PPC_OPT = (DT_LOPROC + 1)","src":214,"more_decls":null}{"pl":"const DT_PPC_NUM = 2","src":215,"more_decls":null}{"pl":"const DT_PPC64_GLINK = (DT_LOPROC + 0)","src":217,"more_decls":null}{"pl":"const DT_PPC64_OPD = (DT_LOPROC + 1)","src":218,"more_decls":null}{"pl":"const DT_PPC64_OPDSZ = (DT_LOPROC + 2)","src":219,"more_decls":null}{"pl":"const DT_PPC64_OPT = (DT_LOPROC + 3)","src":220,"more_decls":null}{"pl":"const DT_PPC64_NUM = 4","src":221,"more_decls":null}{"pl":"const DT_IA_64_PLT_RESERVE = (DT_LOPROC + 0)","src":223,"more_decls":null}{"pl":"const DT_IA_64_NUM = 1","src":224,"more_decls":null}{"pl":"const DT_NIOS2_GP = 0x70000002","src":226,"more_decls":null}{"pl":"const PT_NULL = 0","src":228,"more_decls":null}{"pl":"const PT_LOAD = 1","src":229,"more_decls":null}{"pl":"const PT_DYNAMIC = 2","src":230,"more_decls":null}{"pl":"const PT_INTERP = 3","src":231,"more_decls":null}{"pl":"const PT_NOTE = 4","src":232,"more_decls":null}{"pl":"const PT_SHLIB = 5","src":233,"more_decls":null}{"pl":"const PT_PHDR = 6","src":234,"more_decls":null}{"pl":"const PT_TLS = 7","src":235,"more_decls":null}{"pl":"const PT_NUM = 8","src":236,"more_decls":null}{"pl":"const PT_LOOS = 0x60000000","src":237,"more_decls":null}{"pl":"const PT_GNU_EH_FRAME = 0x6474e550","src":238,"more_decls":null}{"pl":"const PT_GNU_STACK = 0x6474e551","src":239,"more_decls":null}{"pl":"const PT_GNU_RELRO = 0x6474e552","src":240,"more_decls":null}{"pl":"const PT_LOSUNW = 0x6ffffffa","src":241,"more_decls":null}{"pl":"const PT_SUNWBSS = 0x6ffffffa","src":242,"more_decls":null}{"pl":"const PT_SUNWSTACK = 0x6ffffffb","src":243,"more_decls":null}{"pl":"const PT_HISUNW = 0x6fffffff","src":244,"more_decls":null}{"pl":"const PT_HIOS = 0x6fffffff","src":245,"more_decls":null}{"pl":"const PT_LOPROC = 0x70000000","src":246,"more_decls":null}{"pl":"const PT_HIPROC = 0x7fffffff","src":247,"more_decls":null}{"pl":"const SHT_NULL = 0","src":249,"more_decls":null}{"pl":"const SHT_PROGBITS = 1","src":250,"more_decls":null}{"pl":"const SHT_SYMTAB = 2","src":251,"more_decls":null}{"pl":"const SHT_STRTAB = 3","src":252,"more_decls":null}{"pl":"const SHT_RELA = 4","src":253,"more_decls":null}{"pl":"const SHT_HASH = 5","src":254,"more_decls":null}{"pl":"const SHT_DYNAMIC = 6","src":255,"more_decls":null}{"pl":"const SHT_NOTE = 7","src":256,"more_decls":null}{"pl":"const SHT_NOBITS = 8","src":257,"more_decls":null}{"pl":"const SHT_REL = 9","src":258,"more_decls":null}{"pl":"const SHT_SHLIB = 10","src":259,"more_decls":null}{"pl":"const SHT_DYNSYM = 11","src":260,"more_decls":null}{"pl":"const SHT_INIT_ARRAY = 14","src":261,"more_decls":null}{"pl":"const SHT_FINI_ARRAY = 15","src":262,"more_decls":null}{"pl":"const SHT_PREINIT_ARRAY = 16","src":263,"more_decls":null}{"pl":"const SHT_GROUP = 17","src":264,"more_decls":null}{"pl":"const SHT_SYMTAB_SHNDX = 18","src":265,"more_decls":null}{"pl":"const SHT_LOOS = 0x60000000","src":266,"more_decls":null}{"pl":"const SHT_HIOS = 0x6fffffff","src":267,"more_decls":null}{"pl":"const SHT_LOPROC = 0x70000000","src":268,"more_decls":null}{"pl":"const SHT_HIPROC = 0x7fffffff","src":269,"more_decls":null}{"pl":"const SHT_LOUSER = 0x80000000","src":270,"more_decls":null}{"pl":"const SHT_HIUSER = 0xffffffff","src":271,"more_decls":null}{"pl":"const STB_LOCAL = 0","src":273,"more_decls":null}{"pl":"const STB_GLOBAL = 1","src":274,"more_decls":null}{"pl":"const STB_WEAK = 2","src":275,"more_decls":null}{"pl":"const STB_NUM = 3","src":276,"more_decls":null}{"pl":"const STB_LOOS = 10","src":277,"more_decls":null}{"pl":"const STB_GNU_UNIQUE = 10","src":278,"more_decls":null}{"pl":"const STB_HIOS = 12","src":279,"more_decls":null}{"pl":"const STB_LOPROC = 13","src":280,"more_decls":null}{"pl":"const STB_HIPROC = 15","src":281,"more_decls":null}{"pl":"const STB_MIPS_SPLIT_COMMON = 13","src":283,"more_decls":null}{"pl":"const STT_NOTYPE = 0","src":285,"more_decls":null}{"pl":"const STT_OBJECT = 1","src":286,"more_decls":null}{"pl":"const STT_FUNC = 2","src":287,"more_decls":null}{"pl":"const STT_SECTION = 3","src":288,"more_decls":null}{"pl":"const STT_FILE = 4","src":289,"more_decls":null}{"pl":"const STT_COMMON = 5","src":290,"more_decls":null}{"pl":"const STT_TLS = 6","src":291,"more_decls":null}{"pl":"const STT_NUM = 7","src":292,"more_decls":null}{"pl":"const STT_LOOS = 10","src":293,"more_decls":null}{"pl":"const STT_GNU_IFUNC = 10","src":294,"more_decls":null}{"pl":"const STT_HIOS = 12","src":295,"more_decls":null}{"pl":"const STT_LOPROC = 13","src":296,"more_decls":null}{"pl":"const STT_HIPROC = 15","src":297,"more_decls":null}{"pl":"const STT_SPARC_REGISTER = 13","src":299,"more_decls":null}{"pl":"const STT_PARISC_MILLICODE = 13","src":301,"more_decls":null}{"pl":"const STT_HP_OPAQUE = (STT_LOOS + 0x1)","src":303,"more_decls":null}{"pl":"const STT_HP_STUB = (STT_LOOS + 0x2)","src":304,"more_decls":null}{"pl":"const STT_ARM_TFUNC = STT_LOPROC","src":306,"more_decls":null}{"pl":"const STT_ARM_16BIT = STT_HIPROC","src":307,"more_decls":null}{"pl":"const VER_FLG_BASE = 0x1","src":309,"more_decls":null}{"pl":"const VER_FLG_WEAK = 0x2","src":310,"more_decls":null}{"pl":"const EI_NIDENT = 16","src":574,"more_decls":null}{"pl":"const EI_CLASS = 4","src":576,"more_decls":null}{"pl":"const ELFCLASSNONE = 0","src":577,"more_decls":null}{"pl":"const ELFCLASS32 = 1","src":578,"more_decls":null}{"pl":"const ELFCLASS64 = 2","src":579,"more_decls":null}{"pl":"const ELFCLASSNUM = 3","src":580,"more_decls":null}{"pl":"const EI_DATA = 5","src":582,"more_decls":null}{"pl":"const ELFDATANONE = 0","src":583,"more_decls":null}{"pl":"const ELFDATA2LSB = 1","src":584,"more_decls":null}{"pl":"const ELFDATA2MSB = 2","src":585,"more_decls":null}{"pl":"const ELFDATANUM = 3","src":586,"more_decls":null}{"pl":"const EI_VERSION = 6","src":588,"more_decls":null}{"pl":"const Elf32_Half = u16","src":590,"more_decls":null}{"pl":"const Elf64_Half = u16","src":591,"more_decls":null}{"pl":"const Elf32_Word = u32","src":592,"more_decls":null}{"pl":"const Elf32_Sword = i32","src":593,"more_decls":null}{"pl":"const Elf64_Word = u32","src":594,"more_decls":null}{"pl":"const Elf64_Sword = i32","src":595,"more_decls":null}{"pl":"const Elf32_Xword = u64","src":596,"more_decls":null}{"pl":"const Elf32_Sxword = i64","src":597,"more_decls":null}{"pl":"const Elf64_Xword = u64","src":598,"more_decls":null}{"pl":"const Elf64_Sxword = i64","src":599,"more_decls":null}{"pl":"const Elf32_Addr = u32","src":600,"more_decls":null}{"pl":"const Elf64_Addr = u64","src":601,"more_decls":null}{"pl":"const Elf32_Off = u32","src":602,"more_decls":null}{"pl":"const Elf64_Off = u64","src":603,"more_decls":null}{"pl":"const Elf32_Section = u16","src":604,"more_decls":null}{"pl":"const Elf64_Section = u16","src":605,"more_decls":null}{"pl":"const Elf32_Versym = Elf32_Half","src":606,"more_decls":null}{"pl":"const Elf64_Versym = Elf64_Half","src":607,"more_decls":null}{"pl":"const Elf32_Conflict = Elf32_Addr","src":902,"more_decls":null}{"pl":"const Auxv = switch (@sizeOf(usize)) {\n    4 => Elf32_auxv_t,\n    8 => Elf64_auxv_t,\n    else => @compileError(\"expected pointer size of 32 or 64\"),\n}","src":928,"more_decls":null}{"pl":"const Ehdr = switch (@sizeOf(usize)) {\n    4 => Elf32_Ehdr,\n    8 => Elf64_Ehdr,\n    else => @compileError(\"expected pointer size of 32 or 64\"),\n}","src":933,"more_decls":null}{"pl":"const Phdr = switch (@sizeOf(usize)) {\n    4 => Elf32_Phdr,\n    8 => Elf64_Phdr,\n    else => @compileError(\"expected pointer size of 32 or 64\"),\n}","src":938,"more_decls":null}{"pl":"const Dyn = switch (@sizeOf(usize)) {\n    4 => Elf32_Dyn,\n    8 => Elf64_Dyn,\n    else => @compileError(\"expected pointer size of 32 or 64\"),\n}","src":943,"more_decls":null}{"pl":"const Rel = switch (@sizeOf(usize)) {\n    4 => Elf32_Rel,\n    8 => Elf64_Rel,\n    else => @compileError(\"expected pointer size of 32 or 64\"),\n}","src":948,"more_decls":null}{"pl":"const Rela = switch (@sizeOf(usize)) {\n    4 => Elf32_Rela,\n    8 => Elf64_Rela,\n    else => @compileError(\"expected pointer size of 32 or 64\"),\n}","src":953,"more_decls":null}{"pl":"const Shdr = switch (@sizeOf(usize)) {\n    4 => Elf32_Shdr,\n    8 => Elf64_Shdr,\n    else => @compileError(\"expected pointer size of 32 or 64\"),\n}","src":958,"more_decls":null}{"pl":"const Sym = switch (@sizeOf(usize)) {\n    4 => Elf32_Sym,\n    8 => Elf64_Sym,\n    else => @compileError(\"expected pointer size of 32 or 64\"),\n}","src":963,"more_decls":null}{"pl":"const Verdef = switch (@sizeOf(usize)) {\n    4 => Elf32_Verdef,\n    8 => Elf64_Verdef,\n    else => @compileError(\"expected pointer size of 32 or 64\"),\n}","src":968,"more_decls":null}{"pl":"const Verdaux = switch (@sizeOf(usize)) {\n    4 => Elf32_Verdaux,\n    8 => Elf64_Verdaux,\n    else => @compileError(\"expected pointer size of 32 or 64\"),\n}","src":973,"more_decls":null}{"pl":"const Addr = switch (@sizeOf(usize)) {\n    4 => Elf32_Addr,\n    8 => Elf64_Addr,\n    else => @compileError(\"expected pointer size of 32 or 64\"),\n}","src":978,"more_decls":null}{"pl":"const Half = switch (@sizeOf(usize)) {\n    4 => Elf32_Half,\n    8 => Elf64_Half,\n    else => @compileError(\"expected pointer size of 32 or 64\"),\n}","src":983,"more_decls":null}{"doc_comment":"Section data should be writable during execution.","pl":"const SHF_WRITE = 0x1","src":1532,"more_decls":null}{"doc_comment":"Section occupies memory during program execution.","pl":"const SHF_ALLOC = 0x2","src":1535,"more_decls":null}{"doc_comment":"Section contains executable machine instructions.","pl":"const SHF_EXECINSTR = 0x4","src":1538,"more_decls":null}{"doc_comment":"The data in this section may be merged.","pl":"const SHF_MERGE = 0x10","src":1541,"more_decls":null}{"doc_comment":"The data in this section is null-terminated strings.","pl":"const SHF_STRINGS = 0x20","src":1544,"more_decls":null}{"doc_comment":"A field in this section holds a section header table index.","pl":"const SHF_INFO_LINK = 0x40","src":1547,"more_decls":null}{"doc_comment":"Adds special ordering requirements for link editors.","pl":"const SHF_LINK_ORDER = 0x80","src":1550,"more_decls":null}{"doc_comment":"This section requires special OS-specific processing to avoid incorrect\nbehavior.","pl":"const SHF_OS_NONCONFORMING = 0x100","src":1554,"more_decls":null}{"doc_comment":"This section is a member of a section group.","pl":"const SHF_GROUP = 0x200","src":1557,"more_decls":null}{"doc_comment":"This section holds Thread-Local Storage.","pl":"const SHF_TLS = 0x400","src":1560,"more_decls":null}{"doc_comment":"Identifies a section containing compressed data.","pl":"const SHF_COMPRESSED = 0x800","src":1563,"more_decls":null}{"doc_comment":"This section is excluded from the final executable or shared library.","pl":"const SHF_EXCLUDE = 0x80000000","src":1566,"more_decls":null}{"doc_comment":"Start of target-specific flags.","pl":"const SHF_MASKOS = 0x0ff00000","src":1569,"more_decls":null}{"doc_comment":"Bits indicating processor-specific flags.","pl":"const SHF_MASKPROC = 0xf0000000","src":1572,"more_decls":null}{"doc_comment":"All sections with the \"d\" flag are grouped together by the linker to form\nthe data section and the dp register is set to the start of the section by\nthe boot code.","pl":"const XCORE_SHF_DP_SECTION = 0x10000000","src":1577,"more_decls":null}{"doc_comment":"All sections with the \"c\" flag are grouped together by the linker to form\nthe constant pool and the cp register is set to the start of the constant\npool by the boot code.","pl":"const XCORE_SHF_CP_SECTION = 0x20000000","src":1582,"more_decls":null}{"doc_comment":"If an object file section does not have this flag set, then it may not hold\nmore than 2GB and can be freely referred to in objects using smaller code\nmodels. Otherwise, only objects using larger code models can refer to them.\nFor example, a medium code model object can refer to data in a section that\nsets this flag besides being able to refer to data in a section that does\nnot set it; likewise, a small code model object can refer only to code in a\nsection that does not set this flag.","pl":"const SHF_X86_64_LARGE = 0x10000000","src":1591,"more_decls":null}{"doc_comment":"All sections with the GPREL flag are grouped into a global data area\nfor faster accesses","pl":"const SHF_HEX_GPREL = 0x10000000","src":1595,"more_decls":null}{"doc_comment":"Section contains text/data which may be replicated in other sections.\nLinker must retain only one copy.","pl":"const SHF_MIPS_NODUPES = 0x01000000","src":1599,"more_decls":null}{"doc_comment":"Linker must generate implicit hidden weak names.","pl":"const SHF_MIPS_NAMES = 0x02000000","src":1602,"more_decls":null}{"doc_comment":"Section data local to process.","pl":"const SHF_MIPS_LOCAL = 0x04000000","src":1605,"more_decls":null}{"doc_comment":"Do not strip this section.","pl":"const SHF_MIPS_NOSTRIP = 0x08000000","src":1608,"more_decls":null}{"doc_comment":"Section must be part of global data area.","pl":"const SHF_MIPS_GPREL = 0x10000000","src":1611,"more_decls":null}{"doc_comment":"This section should be merged.","pl":"const SHF_MIPS_MERGE = 0x20000000","src":1614,"more_decls":null}{"doc_comment":"Address size to be inferred from section entry size.","pl":"const SHF_MIPS_ADDR = 0x40000000","src":1617,"more_decls":null}{"doc_comment":"Section data is string data by default.","pl":"const SHF_MIPS_STRING = 0x80000000","src":1620,"more_decls":null}{"doc_comment":"Make code section unreadable when in execute-only mode","pl":"const SHF_ARM_PURECODE = 0x2000000","src":1623,"more_decls":null}{"doc_comment":"Execute","pl":"const PF_X = 1","src":1626,"more_decls":null}{"doc_comment":"Write","pl":"const PF_W = 2","src":1629,"more_decls":null}{"doc_comment":"Read","pl":"const PF_R = 4","src":1632,"more_decls":null}{"doc_comment":"Bits for operating system-specific semantics.","pl":"const PF_MASKOS = 0x0ff00000","src":1635,"more_decls":null}{"doc_comment":"Bits for processor-specific semantics.","pl":"const PF_MASKPROC = 0xf0000000","src":1638,"more_decls":null}]