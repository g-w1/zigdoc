[{"doc_comment":"Priority queue for storing generic data. Initialize with `init`.","pl":"fn PriorityQueue(comptime T: type) type","sub_container_type":"struct ","src":14,"more_decls":{"pl":"items: []T","src":18,"more_decls":null}{"pl":"len: usize","src":19,"more_decls":null}{"pl":"allocator: *Allocator","src":20,"more_decls":null}{"pl":"compareFn: fn (a: T, b: T) bool","src":21,"more_decls":null}{"pl":"pub const Iterator = struct ","src":207,"more_decls":{"pl":"queue: *PriorityQueue(T)","src":208,"more_decls":null}{"pl":"count: usize","src":209,"more_decls":null}{"pl":"pub fn next(it: *Iterator) ?T {\n    if (it.count >= it.queue.len) return null;\n    const out = it.count;\n    it.count += 1;\n    return it.queue.items[out];\n}","src":211,"more_decls":null}{"pl":"pub fn reset(it: *Iterator) void {\n    it.count = 0;\n}","src":218,"more_decls":null}}{"doc_comment":"Initialize and return a priority queue. Provide\n`compareFn` that returns `true` when its first argument\nshould get popped before its second argument. For example,\nto make `pop` return the minimum value, provide\n\n`fn lessThan(a: T, b: T) bool { return a < b; }`","pl":"fn init(allocator: *Allocator, compareFn: fn (a: T, b: T) bool) Self","src":29,"more_decls":null}{"doc_comment":"Free memory used by the queue.","pl":"pub fn deinit(self: Self) void {\n    self.allocator.free(self.items);\n}","src":39,"more_decls":null}{"doc_comment":"Insert a new element, maintaining priority.","pl":"pub fn add(self: *Self, elem: T) !void {\n    try ensureCapacity(self, self.len + 1);\n    addUnchecked(self, elem);\n}","src":44,"more_decls":null}{"doc_comment":"Add each element in `items` to the queue.","pl":"pub fn addSlice(self: *Self, items: []const T) !void {\n    try self.ensureCapacity(self.len + items.len);\n    for (items) |e| {\n        self.addUnchecked(e);\n    }\n}","src":71,"more_decls":null}{"doc_comment":"Look at the highest priority element in the queue. Returns\n`null` if empty.","pl":"pub fn peek(self: *Self) ?T {\n    return if (self.len > 0) self.items[0] else null;\n}","src":80,"more_decls":null}{"doc_comment":"Pop the highest priority element from the queue. Returns\n`null` if empty.","pl":"pub fn removeOrNull(self: *Self) ?T {\n    return if (self.len > 0) self.remove() else null;\n}","src":86,"more_decls":null}{"doc_comment":"Remove and return the highest priority element from the\nqueue.","pl":"pub fn remove(self: *Self) T {\n    return self.removeIndex(0);\n}","src":92,"more_decls":null}{"doc_comment":"Remove and return element at index. Indices are in the\nsame order as iterator, which is not necessarily priority\norder.","pl":"fn removeIndex(self: *Self, index: usize) T","src":99,"more_decls":null}{"doc_comment":"Return the number of elements remaining in the priority\nqueue.","pl":"pub fn count(self: Self) usize {\n    return self.len;\n}","src":111,"more_decls":null}{"doc_comment":"Return the number of elements that can be added to the\nqueue before more memory is allocated.","pl":"pub fn capacity(self: Self) usize {\n    return self.items.len;\n}","src":117,"more_decls":null}{"doc_comment":"PriorityQueue takes ownership of the passed in slice. The slice must have been\nallocated with `allocator`.\nDeinitialize with `deinit`.","pl":"fn fromOwnedSlice(allocator: *Allocator, compareFn: fn (a: T, b: T) bool, items: []T) Self","src":160,"more_decls":null}{"pl":"fn ensureCapacity(self: *Self, new_capacity: usize) !void","src":175,"more_decls":null}{"pl":"pub fn resize(self: *Self, new_len: usize) !void {\n    try self.ensureCapacity(new_len);\n    self.len = new_len;\n}","src":185,"more_decls":null}{"pl":"pub fn shrink(self: *Self, new_len: usize) void {\n    // TODO take advantage of the new realloc semantics\n    assert(new_len <= self.len);\n    self.len = new_len;\n}","src":190,"more_decls":null}{"pl":"fn update(self: *Self, elem: T, new_elem: T) !void","src":196,"more_decls":null}{"doc_comment":"Return an iterator that walks the queue without consuming\nit. Invalidated if the heap is modified.","pl":"pub fn iterator(self: *Self) Iterator {\n    return Iterator{\n        .queue = self,\n        .count = 0,\n    };\n}","src":225,"more_decls":null}}]