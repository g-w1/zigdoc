[{"pl":"pub const CallgrindClientRequest = extern enum ","src":8,"more_decls":{"pl":"DumpStats = valgrind.ToolBase(\"CT\")","src":9,"more_decls":null}{"pl":"ZeroStats","src":10,"more_decls":null}{"pl":"ToggleCollect","src":11,"more_decls":null}{"pl":"DumpStatsAt","src":12,"more_decls":null}{"pl":"StartInstrumentation","src":13,"more_decls":null}{"pl":"StopInstrumentation","src":14,"more_decls":null}}{"doc_comment":"Dump current state of cost centers, and zero them afterwards","pl":"pub fn dumpStats() void {\n    doCallgrindClientRequestStmt(.DumpStats, 0, 0, 0, 0, 0);\n}","src":26,"more_decls":null}{"doc_comment":"Dump current state of cost centers, and zero them afterwards.\nThe argument is appended to a string stating the reason which triggered\nthe dump. This string is written as a description field into the\nprofile data dump.","pl":"pub fn dumpStatsAt(pos_str: [*]u8) void {\n    doCallgrindClientRequestStmt(.DumpStatsAt, @ptrToInt(pos_str), 0, 0, 0, 0);\n}","src":34,"more_decls":null}{"doc_comment":"Zero cost centers","pl":"pub fn zeroStats() void {\n    doCallgrindClientRequestStmt(.ZeroStats, 0, 0, 0, 0, 0);\n}","src":39,"more_decls":null}{"doc_comment":"Toggles collection state.\nThe collection state specifies whether the happening of events\nshould be noted or if they are to be ignored. Events are noted\nby increment of counters in a cost center","pl":"pub fn toggleCollect() void {\n    doCallgrindClientRequestStmt(.ToggleCollect, 0, 0, 0, 0, 0);\n}","src":47,"more_decls":null}{"doc_comment":"Start full callgrind instrumentation if not already switched on.\nWhen cache simulation is done, it will flush the simulated cache;\nthis will lead to an artificial cache warmup phase afterwards with\ncache misses which would not have happened in reality.","pl":"pub fn startInstrumentation() void {\n    doCallgrindClientRequestStmt(.StartInstrumentation, 0, 0, 0, 0, 0);\n}","src":55,"more_decls":null}{"doc_comment":"Stop full callgrind instrumentation if not already switched off.\nThis flushes Valgrinds translation cache, and does no additional\ninstrumentation afterwards, which effectivly will run at the same\nspeed as the \"none\" tool (ie. at minimal slowdown).\nUse this to bypass Callgrind aggregation for uninteresting code parts.\nTo start Callgrind in this mode to ignore the setup phase, use\nthe option \"--instr-atstart=no\".","pl":"pub fn stopInstrumentation() void {\n    doCallgrindClientRequestStmt(.StopInstrumentation, 0, 0, 0, 0, 0);\n}","src":66,"more_decls":null}]