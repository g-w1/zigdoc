[{"doc_comment":"Allocator that fails after N allocations, useful for making sure out of\nmemory conditions are handled correctly.\n\nTo use this, first initialize it and get an allocator with\n\n`const failing_allocator = &FailingAllocator.init(<allocator>,\n<fail_index>).allocator;`\n\nThen use `failing_allocator` anywhere you would have used a\ndifferent allocator.","pl":"pub const FailingAllocator = struct ","src":18,"more_decls":{"pl":"allocator: mem.Allocator","src":19,"more_decls":null}{"pl":"index: usize","src":20,"more_decls":null}{"pl":"fail_index: usize","src":21,"more_decls":null}{"pl":"internal_allocator: *mem.Allocator","src":22,"more_decls":null}{"pl":"allocated_bytes: usize","src":23,"more_decls":null}{"pl":"freed_bytes: usize","src":24,"more_decls":null}{"pl":"allocations: usize","src":25,"more_decls":null}{"pl":"deallocations: usize","src":26,"more_decls":null}{"doc_comment":"`fail_index` is the number of successful allocations you can\nexpect from this allocator. The next allocation will fail.\nFor example, if this is called with `fail_index` equal to 2,\nthe following test will pass:\n\nvar a = try failing_alloc.create(i32);\nvar b = try failing_alloc.create(i32);\ntesting.expectError(error.OutOfMemory, failing_alloc.create(i32));","pl":"fn init(allocator: *mem.Allocator, fail_index: usize) FailingAllocator","src":36,"more_decls":null}}]